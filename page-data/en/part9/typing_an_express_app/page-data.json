{"componentChunkName":"component---src-templates-content-template-js","path":"/en/part9/typing_an_express_app","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Now that we have a basic understanding of how TypeScript works and how to create small projects with it, it's time to start creating something useful. We are now going to create a new project that will introduce use cases that are a little more realistic.</p>\n<p>One major change from the previous part is that <em>we're not going to use ts-node anymore</em>. It is a handy tool that helps you get started, but in the long run, it is advisable to use the official TypeScript compiler that comes with the <em>typescript</em> npm-package. The official compiler generates and packages JavaScript files from the .ts files so that the built <em>production version</em> won't contain any TypeScript code anymore. This is the exact outcome we are aiming for since TypeScript itself is not executable by browsers or Node.</p>\n<h3>Setting up the project</h3>\n<p>We will create a project for Ilari, who loves flying small planes but has a difficult time managing his flight history. He is a coder himself, so he doesn't necessarily need a user interface, but he'd like to use some custom software with HTTP requests and retain the possibility of later adding a web-based user interface to the application.</p>\n<p>Let's start by creating our first real project: <em>Ilari's flight diaries</em>. As usual, run <em>npm init</em> and install the <em>typescript</em> package as a dev dependency.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> typescript --save-dev</code></pre></div>\n<p>TypeScript's Native Compiler (<em>tsc</em>) can help us initialize our project by generating our <em>tsconfig.json</em> file.\nFirst, we need to add the <em>tsc</em> command to the list of executable scripts in <em>package.json</em> (unless you have installed <em>typescript</em> globally). Even if you installed TypeScript globally, you should always add it as a dev dependency to your project.</p>\n<p>The npm script for running <em>tsc</em> is set as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"tsc\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The bare <em>tsc</em> command is often added to <em>scripts</em> so that other scripts can use it, hence don't be surprised to find it set up within the project like this.</p>\n<p>We can now initialize our tsconfig.json settings by running:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"> <span class=\"token function\">npm</span> run tsc -- <span class=\"token parameter variable\">--init</span></code></pre></div>\n<p> <strong>Note</strong> the extra <em>--</em> before the actual argument! Arguments before <em>--</em>  are interpreted as being for the <em>npm</em> command, while the ones after that are meant for the command that is run through the script (i.e. <em>tsc</em> in this case).</p>\n<p>The <em>tsconfig.json</em> file we just created contains a lengthy list of every configuration available to us. However, most of them are commented out.\nStudying this file can help you find some configuration options you might need.\nIt is also completely okay to keep the commented lines, in case you might need them someday.</p>\n<p>At the moment, we want the following to be active:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES6\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./build/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedLocals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedParameters\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitReturns\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noFallthroughCasesInSwitch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's go through each configuration:</p>\n<p>The <em>target</em> configuration tells the compiler which <em>ECMAScript</em> version to use when generating JavaScript. ES6 is supported by most browsers, so it is a good and safe option.</p>\n<p><em>outDir</em> tells where the compiled code should be placed.</p>\n<p><em>module</em> tells the compiler that we want to use <em>CommonJS</em> modules in the compiled code. This means we can use the old <em>require</em> syntax instead of the <em>import</em> one, which is not supported in older versions of <em>Node</em>.</p>\n<p><em>strict</em> is a shorthand for multiple separate options:\n<em>noImplicitAny, noImplicitThis, alwaysStrict, strictBindCallApply, strictNullChecks, strictFunctionTypes and strictPropertyInitialization</em>.\nThey guide our coding style to use the TypeScript features more strictly.\nFor us, perhaps the most important is the already-familiar <a href=\"https://www.staging-typescript.org/tsconfig#noImplicitAny\">noImplicitAny</a>. It prevents implicitly setting type <em>any</em>, which can for example happen if you don't type the parameters of a function.\nDetails about the rest of the configurations can be found in the <a href=\"https://www.staging-typescript.org/tsconfig#strict\">tsconfig documentation</a>.\nUsing <em>strict</em> is suggested by the official documentation.</p>\n<p><em>noUnusedLocals</em> prevents having unused local variables, and <em>noUnusedParameters</em> throws an error if a function has unused parameters.</p>\n<p><em>noImplicitReturns</em> checks all code paths in a function to ensure they return a value.</p>\n<p><em>noFallthroughCasesInSwitch</em> ensures that, in a <em>switch case</em>, each case ends either with a <em>return</em> or a <em>break</em> statement.</p>\n<p><em>esModuleInterop</em> allows interoperability between CommonJS and ES Modules; see more in the <a href=\"https://www.staging-typescript.org/tsconfig#esModuleInterop\">documentation</a>.</p>\n<p>Now that we have set our configuration, we can continue by installing <em>express</em> and, of course, also <em>@types/express</em>. Also, since this is a real project, which is intended to be grown over time, we will use ESlint from the very beginning:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> express\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev eslint @types/express @typescript-eslint/eslint-plugin @typescript-eslint/parser</code></pre></div>\n<p>Now our <em>package.json</em> should look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"flight-diary\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"tsc\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ISC\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.18.2\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@types/express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.17.18\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/eslint-plugin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.7.3\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.7.3\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^8.50.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^5.2.2\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We also create a <em>.eslintrc</em> file with the following content:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"eslint:recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/recommended-requiring-type-checking\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@typescript-eslint\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"browser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"es6\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"node\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@typescript-eslint/semi\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/explicit-function-return-type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/explicit-module-boundary-types\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/restrict-template-expressions\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/restrict-plus-operands\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/no-unsafe-member-access\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/no-unused-vars\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token property\">\"argsIgnorePattern\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^_\"</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"no-case-declarations\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parserOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"project\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./tsconfig.json\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we just need to set up our development environment, and we are ready to start writing some serious code.\nThere are many different options for this. One option could be to use the familiar <em>nodemon</em> with <em>ts-node</em>. However, as we saw earlier, <em>ts-node-dev</em> does the same thing, so we will use that instead.\nSo, let's install <em>ts-node-dev</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev ts-node-dev</code></pre></div>\n<p>We finally define a few more npm scripts, and voilà, we are ready to begin:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"tsc\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node-dev index.ts\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --ext .ts .\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see, there is a lot of stuff to go through before beginning the actual coding. When you are working on a real project, careful preparations support your development process. Take the time needed to create a good setup for yourself and your team, so that everything runs smoothly in the long run.</p>\n<h3>Let there be code</h3>\n<p>Now we can finally start coding! As always, we start by creating a ping endpoint, just to make sure everything is working.</p>\n<p>The contents of the <em>index.ts</em> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/ping'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someone pinged here'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, if we run the app with <em>npm run dev</em>, we can verify that a request to <a href=\"http://localhost:3000/ping\">http://localhost:3000/ping</a> gives the response <em>pong</em>, so our configuration is set!</p>\n<p>When starting the app with <em>npm run dev</em>, it runs in development mode.\nThe development mode is not suitable at all when we later operate the app in production.</p>\n<p>Let's try to create a <em>production build</em> by running the TypeScript compiler. Since we have defined the <em>outdir</em> in our tsconfig.json, nothing's left but to run the script <em>npm run tsc</em>.</p>\n<p>Just like magic, a native runnable JavaScript production build of the Express backend is created in file <em>index.js</em> inside the directory <em>build</em>. The compiled code looks like this</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> __importDefault <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>__importDefault<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">mod</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>mod <span class=\"token operator\">&amp;&amp;</span> mod<span class=\"token punctuation\">.</span>__esModule<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> mod <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"default\"</span><span class=\"token operator\">:</span> mod <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">,</span> <span class=\"token string\">\"__esModule\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> express_1 <span class=\"token operator\">=</span> <span class=\"token function\">__importDefault</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> express_1<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express_1<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/ping'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someone pinged here'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Currently, if we run ESlint it will also interpret the files in the <em>build</em> directory. We don't want that, since the code there is compiler-generated. We can prevent this by creating a  <em>.eslintignore</em> file that lists the content we want ESlint to ignore, just like we do with git and <em>.gitignore</em>.</p>\n<p>Let's add an npm script for running the application in production mode:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"tsc\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node-dev index.ts\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --ext .ts .\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node build/index.js\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When we run the app with <em>npm start</em>, we can verify that the production build also works:</p>\n<picture><img src=\"/static/863bc762b6f7599c221ee3dc4b35cbc6/5a190/15a.png\" alt=\"browser showing pong from localhost:3000/ping\" srcset=\"/static/863bc762b6f7599c221ee3dc4b35cbc6/772e8/15a.png 200w,\n/static/863bc762b6f7599c221ee3dc4b35cbc6/e17e5/15a.png 400w,\n/static/863bc762b6f7599c221ee3dc4b35cbc6/5a190/15a.png 800w,\n/static/863bc762b6f7599c221ee3dc4b35cbc6/c1b63/15a.png 1200w,\n/static/863bc762b6f7599c221ee3dc4b35cbc6/203d3/15a.png 1322w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Now we have a minimal working pipeline for developing our project.\nWith the help of our compiler and ESlint, we ensure that good code quality is maintained. With this base, we can start creating an app that we could, later on, deploy into a production environment.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 9.8-9.9</h3>\n<h4>Before you start the exercises</h4>\n<p>For this set of exercises, you will be developing a backend for an existing project called <strong>Patientor</strong>, which is a simple medical record application for doctors who handle diagnoses and basic health information of their patients.</p>\n<p>The <a href=\"https://github.com/fullstack-hy2020/patientor\">frontend</a> has already been built by outsider experts and your task is to create a backend to support the existing code.</p>\n<h4>WARNING</h4>\n<p>Quite often VS code loses track of what is really happening in the code and it shows type or style related warnings despite the code having been fixed. If this happens (to me it has happened quite often), close and open the file that is giving you trouble or just restart the editor. It is also good to doublecheck that everything really works by running the compiler and the ESlint from the command line with commands:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run tsc\n<span class=\"token function\">npm</span> run lint</code></pre></div>\n<p>When run in command line you get the \"real result\" for sure. So, never trust the editor too much!</p>\n<h4>9.8: Patientor backend, step1</h4>\n<p>Initialize a new backend project that will work with the frontend. Configure ESlint and tsconfig with the same configurations as proposed in the material. Define an endpoint that answers HTTP GET requests for route <em>/api/ping</em>.</p>\n<p>The project should be runnable with npm scripts, both in development mode and, as compiled code, in production mode.</p>\n<h4>9.9: Patientor backend, step2</h4>\n<p>Fork and clone the project <a href=\"https://github.com/fullstack-hy2020/patientor\">patientor</a>. Start the project with the help of the README file.</p>\n<p> You should be able to use the frontend without a functioning backend.</p>\n<p>Ensure that the backend answers the ping request that the <em>frontend</em> has made on startup. Check the developer tools to make sure it works:</p>\n<picture><img src=\"/static/ecb7fbc31d1698f2ba09ee2ee77a4982/5a190/16a.png\" alt=\"dev tools showing ping failed\" srcset=\"/static/ecb7fbc31d1698f2ba09ee2ee77a4982/772e8/16a.png 200w,\n/static/ecb7fbc31d1698f2ba09ee2ee77a4982/e17e5/16a.png 400w,\n/static/ecb7fbc31d1698f2ba09ee2ee77a4982/5a190/16a.png 800w,\n/static/ecb7fbc31d1698f2ba09ee2ee77a4982/c1b63/16a.png 1200w,\n/static/ecb7fbc31d1698f2ba09ee2ee77a4982/1acf3/16a.png 1596w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>You might also want to have a look at the <em>console</em> tab. If something fails, <a href=\"/en/part3\">part 3</a> of the course shows how the problem can be solved.</p>\n</div>\n<div class=\"content\">\n<h3>Implementing the functionality</h3>\n<p>Finally, we are ready to start writing some code.</p>\n<p>Let's start from the basics. Ilari wants to be able to keep track of his experiences on his flight journeys.</p>\n<p>He wants to be able to save <em>diary entries</em>, which contain:</p>\n<ul>\n<li>The date of the entry</li>\n<li>Weather conditions (sunny, windy, cloudy, rainy or stormy)</li>\n<li>Visibility (great, good, ok or poor)</li>\n<li>Free text detailing the experience</li>\n</ul>\n<p>We have obtained some sample data, which we will use as a base to build on.\nThe data is saved in JSON format and can be found <a href=\"https://github.com/fullstack-hy2020/misc/blob/master/diaryentries.json\">here</a>.</p>\n<p>The data looks like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2017-01-01\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"weather\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rainy\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"visibility\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"poor\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Pretty scary flight, I'm glad I'm alive\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2017-04-01\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"weather\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sunny\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"visibility\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"good\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Everything went better than expected, I'm learning much\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Let's start by creating an endpoint that returns all flight diary entries.</p>\n<p>First, we need to make some decisions on how to structure our source code. It is better to place all source code under <em>src</em> directory, so source code is not mixed with configuration files.\nWe will move <em>index.ts</em> there and make the necessary changes to the npm scripts.</p>\n<p>We will place all <a href=\"/en/part4/structure_of_backend_application_introduction_to_testing\">routers</a> and modules which are responsible for handling a set of specific resources such as <em>diaries</em>, under the directory <em>src/routes</em>.\nThis is a bit different than what we did in <a href=\"/en/part4\">part 4</a>, where we used the directory <em>src/controllers</em>.</p>\n<p>The router taking care of all diary endpoints is in <em>src/routes/diaries.ts</em> and looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fetching all diaries!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Saving a diary!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span class=\"token punctuation\">;</span></code></pre></div>\n<p>We'll route all requests to prefix <em>/api/diaries</em> to that specific router in <em>index.ts</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> diaryRouter <span class=\"token keyword\">from</span> <span class=\"token string\">'./routes/diaries'</span><span class=\"token punctuation\">;</span></span><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/ping'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someone pinged here'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/diaries'</span><span class=\"token punctuation\">,</span> diaryRouter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And now, if we make an HTTP GET request to <a href=\"http://localhost:3000/api/diaries\">http://localhost:3000/api/diaries</a>, we should see the message: <em>Fetching all diaries!</em></p>\n<p>Next, we need to start serving the seed data (found <a href=\"https://github.com/fullstack-hy2020/misc/blob/master/diaryentries.json\">here</a>) from the app. We will fetch the data and save it to <em>data/entries.json</em>.</p>\n<p>We won't be writing the code for the actual data manipulations in the router. We will create a <em>service</em> that takes care of the data manipulation instead.\nIt is quite a common practice to separate the \"business logic\" from the router code into modules, which are quite often called <em>services</em>.\nThe name service originates from <a href=\"https://en.wikipedia.org/wiki/Domain-driven_design\">Domain-driven design</a> and was made popular by the <a href=\"https://spring.io/\">Spring</a> framework.</p>\n<p>Let's create a <em>src/services</em> directory and place the <em>diaryService.ts</em> file in it.\nThe file contains two functions for fetching and saving diary entries:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> diaryData <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/entries.json'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getEntries</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> diaryData<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addDiary</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  addDiary\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>But something is not right:</p>\n<picture><img src=\"/static/884eed5d4bb95087f3a48f39769a9a0d/5a190/17c.png\" alt=\"vscode asking to consider using resolveJsonModule since can&#x27;t find module\" srcset=\"/static/884eed5d4bb95087f3a48f39769a9a0d/772e8/17c.png 200w,\n/static/884eed5d4bb95087f3a48f39769a9a0d/e17e5/17c.png 400w,\n/static/884eed5d4bb95087f3a48f39769a9a0d/5a190/17c.png 800w,\n/static/884eed5d4bb95087f3a48f39769a9a0d/c1b63/17c.png 1200w,\n/static/884eed5d4bb95087f3a48f39769a9a0d/913a1/17c.png 1476w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The hint says we might want to use <em>resolveJsonModule</em>. Let's add it to our tsconfig:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES6\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./build/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedLocals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedParameters\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitReturns\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noFallthroughCasesInSwitch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"resolveJsonModule\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And our problem is solved.</p>\n<blockquote>\n<p><strong>NB</strong>: For some reason, VSCode sometimes complains that it cannot find the file <em>../../data/entries.json</em> from the service despite the file existing. That is a bug in the editor, and goes away when the editor is restarted.</p>\n</blockquote>\n<p>Earlier, we saw how the compiler can decide the type of a variable by the value it is assigned.\nSimilarly, the compiler can interpret large data sets consisting of objects and arrays.\nDue to this, the compiler warns us if we try to do something suspicious with the JSON data we are handling. For example, if we are handling an array containing objects of a specific type, and we try to add an object which does not have all the fields the other objects have, or has type conflicts (for example, a number where there should be a string), the compiler can give us a warning.</p>\n<p>Even though the compiler is pretty good at making sure we don't do anything unwanted, it is safer to define the types for the data ourselves.</p>\n<p>Currently, we have a basic working TypeScript Express app, but there are barely any actual <em>typings</em> in the code. Since we know what type of data should be accepted for the <em>weather</em> and <em>visibility</em> fields, there is no reason for us not to include their types in the code.</p>\n<p>Let's create a file for our types, <em>types.ts</em>, where we'll define all our types for this project.</p>\n<p>First, let's type the <em>Weather</em> and <em>Visibility</em> values using a <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types\">union type</a> of the allowed strings:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type Weather <span class=\"token operator\">=</span> <span class=\"token string\">'sunny'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'rainy'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'cloudy'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'windy'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'stormy'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> type Visibility <span class=\"token operator\">=</span> <span class=\"token string\">'great'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'good'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'ok'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'poor'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And, from there, we can continue by creating a DiaryEntry type, which will be an <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#interfaces\">interface</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DiaryEntry</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">weather</span><span class=\"token operator\">:</span> Weather<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">visibility</span><span class=\"token operator\">:</span> Visibility<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">comment</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can now try to type our imported JSON:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> diaryData <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/entries.json'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token literal-property property\">diaries</span><span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> diaryData<span class=\"token punctuation\">;</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> getEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> diaries<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addDiary</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  addDiary\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>But since the JSON already has its values declared, assigning a type for the data set results in an error:</p>\n<picture><img src=\"/static/4a4d7fc6b2c39423984646fd6830f0d8/5a190/19b.png\" alt=\"vscode showing string not assignable to weather error\" srcset=\"/static/4a4d7fc6b2c39423984646fd6830f0d8/772e8/19b.png 200w,\n/static/4a4d7fc6b2c39423984646fd6830f0d8/e17e5/19b.png 400w,\n/static/4a4d7fc6b2c39423984646fd6830f0d8/5a190/19b.png 800w,\n/static/4a4d7fc6b2c39423984646fd6830f0d8/c1b63/19b.png 1200w,\n/static/4a4d7fc6b2c39423984646fd6830f0d8/5bd27/19b.png 1432w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The end of the error message reveals the problem: the <em>weather</em> fields are incompatible. In <em>DiaryEntry</em>, we specified that its type is <em>Weather</em>, but the TypeScript compiler had inferred its type to be <em>string</em>.</p>\n<p>We can fix the problem by doing a <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-assertions\">type assertion</a>. As we already <a href=\"/en/part9/first_steps_with_type_script#type-assertion\">mentioned</a> type assertions should be done only if we are certain we know what we are doing!</p>\n<p>If we assert the type of the variable <em>diaryData</em> to be <em>DiaryEntry</em> with the keyword <em>as</em>, everything should work:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> diaryData <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/entries.json'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Weather<span class=\"token punctuation\">,</span> Visibility<span class=\"token punctuation\">,</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token literal-property property\">diaries</span><span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> diaryData <span class=\"token keyword\">as</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> getEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> diaries<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addDiary</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  addDiary\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We should never use type assertion unless there is no other way to proceed, as there is always the danger we assert an unfit type to an object and cause a nasty runtime error.\nWhile the compiler trusts you to know what you are doing when using <em>as</em>, by doing this, we are not using the full power of TypeScript but relying on the coder to secure the code.</p>\n<p>In our case, we could change how we export our data so we can type it within the data file.\nSince we cannot use typings in a JSON file, we should convert the JSON file to a ts file <em>diaries.ts</em> which exports the typed data like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../src/types\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token literal-property property\">diaryEntries</span><span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></span>  <span class=\"token punctuation\">{</span>\n      <span class=\"token string-property property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2017-01-01\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">\"weather\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rainy\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">\"visibility\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"poor\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">\"comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Pretty scary flight, I'm glad I'm alive\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> diaryEntries<span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>Now, when we import the array, the compiler interprets it correctly and the <em>weather</em> and <em>visibility</em> fields are understood right:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> diaries <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/entries'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> getEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> diaries<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addDiary</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  addDiary\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note that, if we want to be able to save entries without a certain field, e.g. <em>comment</em>, we could set the type of the field as <a href=\"https://www.typescriptlang.org/docs/handbook/2/objects.html#optional-properties\">optional</a> by adding <em>?</em> to the type declaration:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DiaryEntry</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">weather</span><span class=\"token operator\">:</span> Weather<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">visibility</span><span class=\"token operator\">:</span> Visibility<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  comment<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Node and JSON modules</h3>\n<p>It is important to take note of a problem that may arise when using the tsconfig <a href=\"https://www.typescriptlang.org/tsconfig/#resolveJsonModule\">resolveJsonModule</a> option:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"resolveJsonModule\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>According to the node documentation for <a href=\"https://nodejs.org/api/modules.html#modules_file_modules\">file modules</a>, node will try to resolve modules in order of extensions:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"> <span class=\"token punctuation\">[</span><span class=\"token string\">\"js\"</span>, <span class=\"token string\">\"json\"</span>, <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>In addition to that, by default, <em>ts-node</em> and <em>ts-node-dev</em> extend the list of possible node module extensions to:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"> <span class=\"token punctuation\">[</span><span class=\"token string\">\"js\"</span>, <span class=\"token string\">\"json\"</span>, <span class=\"token string\">\"node\"</span>, <span class=\"token string\">\"ts\"</span>, <span class=\"token string\">\"tsx\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<blockquote>\n<p><strong>NB</strong>: The validity of <em>.js</em>, <em>.json</em> and <em>.node</em> files as modules in TypeScript depend on environment configuration, including <em>tsconfig</em> options such as <em>allowJs</em> and <em>resolveJsonModule</em>.</p>\n</blockquote>\n<p>Consider a flat folder structure containing files:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">  ├── myModule.json\n  └── myModule.ts</code></pre></div>\n<p>In TypeScript, with the <em>resolveJsonModule</em> option set to true, the file <em>myModule.json</em> becomes a valid node module. Now, imagine a scenario where we wish to take the file <em>myModule.ts</em> into use:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> myModule <span class=\"token keyword\">from</span> <span class=\"token string\">\"./myModule\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Looking closely at the order of node module extensions:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"> <span class=\"token punctuation\">[</span><span class=\"token string\">\"js\"</span>, <span class=\"token string\">\"json\"</span>, <span class=\"token string\">\"node\"</span>, <span class=\"token string\">\"ts\"</span>, <span class=\"token string\">\"tsx\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>We notice that the <em>.json</em> file extension takes precedence over <em>.ts</em> and so <em>myModule.json</em> will be imported and not <em>myModule.ts</em>.</p>\n<p>To avoid time-eating bugs, it is recommended that within a flat directory, each file with a valid node module extension has a unique filename.</p>\n<h3>Utility Types</h3>\n<p>Sometimes, we might want to use a specific modification of a type.\nFor example, consider a page for listing some data, some of which is sensitive and some of which is non-sensitive.\nWe might want to be sure that no sensitive data is used or displayed. We could <em>pick</em> the fields of a type we allow to be used to enforce this.\nWe can do that by using the utility type <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys\">Pick</a>.</p>\n<p>In our project, we should consider that Ilari might want to create a listing of all his diary entries <em>excluding</em> the comment field since, during a very scary flight, he might end up writing something he wouldn't necessarily want to show to anyone else.</p>\n<p>The <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys\">Pick</a> utility type allows us to choose which fields of an existing type we want to use.\nPick can be used to either construct a completely new type or to inform a function of what it should return on runtime.\nUtility types are a special kind of type, but they can be used just like regular types.</p>\n<p>In our case, to create a \"censored\" version of the <em>DiaryEntry</em> for public displays, we can use <em>Pick</em> in the function declaration:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Pick<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'date'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'weather'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'visibility'</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>and the compiler would expect the function to return an array of values of the modified <em>DiaryEntry</em> type, which includes only the four selected fields.</p>\n<p>In this case, we want to exclude only one field, so it would be even better to use the <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys\">Omit</a> utility type, which we can use to declare which fields to exclude:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Omit<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token punctuation\">,</span> <span class=\"token string\">'comment'</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To improve the readability, we should most definitively define a <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-aliases\">type alias</a> <em>NonSensitiveDiaryEntry</em> in the file <em>types.ts</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type NonSensitiveDiaryEntry <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token punctuation\">,</span> <span class=\"token string\">'comment'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The code becomes now much more clear and more descriptive:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> diaries <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/entries'</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NonSensitiveDiaryEntry<span class=\"token punctuation\">,</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> getEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> diaries<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> NonSensitiveDiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">return</span> diaries<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addDiary</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  addDiary<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  getNonSensitiveEntries</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>One thing in our application is a cause for concern. In <em>getNonSensitiveEntries</em>, we are returning the complete diary entries, and <em>no error is given</em> despite typing!</p>\n<p>This happens because <a href=\"http://www.typescriptlang.org/docs/handbook/type-compatibility.html\">TypeScript only checks</a> whether we have all of the required fields or not, but excess fields are not prohibited. In our case, this means that it is <em>not prohibited</em> to return an object of type <em>DiaryEntry[]</em>, but if we were to try to access the <em>comment</em> field, it would not be possible because we would be accessing a field that TypeScript is unaware of even though it exists.</p>\n<p>Unfortunately, this can lead to unwanted behavior if you are not aware of what you are doing; the situation is valid as far as TypeScript is concerned, but you are most likely allowing a use that is not wanted.\nIf we were now to return all of the diary entries from the <em>getNonSensitiveEntries</em> function to the frontend, we would be <em>leaking the unwanted fields to the requesting browser</em> - even though our types seem to imply otherwise!</p>\n<p>Because TypeScript doesn't modify the actual data but only its type, we need to exclude the fields ourselves:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> diaries <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/entries.ts'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NonSensitiveDiaryEntry<span class=\"token punctuation\">,</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span>\n\n<span class=\"token keyword\">const</span> getEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> diaries\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> NonSensitiveDiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> diaries<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">,</span> weather<span class=\"token punctuation\">,</span> visibility <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    id<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    date<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    weather<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    visibility<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addDiary</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  getNonSensitiveEntries<span class=\"token punctuation\">,</span>\n  addDiary\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If we now try to return this data with the basic <em>DiaryEntry</em> type, i.e. if we type the function as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></code></pre></div>\n<p>we would get the following error:</p>\n<picture><img src=\"/static/4cf0e3835086dc22ca9c00d89dabd716/5a190/22b.png\" alt=\"vs code error - comment is declared here\" srcset=\"/static/4cf0e3835086dc22ca9c00d89dabd716/772e8/22b.png 200w,\n/static/4cf0e3835086dc22ca9c00d89dabd716/e17e5/22b.png 400w,\n/static/4cf0e3835086dc22ca9c00d89dabd716/5a190/22b.png 800w,\n/static/4cf0e3835086dc22ca9c00d89dabd716/c1b63/22b.png 1200w,\n/static/4cf0e3835086dc22ca9c00d89dabd716/ce0a7/22b.png 1590w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Again, the last line of the error message is the most helpful one. Let's undo this undesired modification.</p>\n<p>Note that if you make the comment field optional (using the <em>?</em> operator), everything will work fine.</p>\n<p>Utility types include many handy tools, and it is undoubtedly worth it to take some time to study <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html\">the documentation</a>.</p>\n<p>Finally, we can complete the route which returns all diary entries:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> diaryService <span class=\"token keyword\">from</span> <span class=\"token string\">'../services/diaryService'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">getNonSensitiveEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Saving a diary!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The response is what we expect it to be:</p>\n<picture><img src=\"/static/2874edda399d6b828630de1496dbc188/5a190/26.png\" alt=\"browser api/diaries shows three json objects\" srcset=\"/static/2874edda399d6b828630de1496dbc188/772e8/26.png 200w,\n/static/2874edda399d6b828630de1496dbc188/e17e5/26.png 400w,\n/static/2874edda399d6b828630de1496dbc188/5a190/26.png 800w,\n/static/2874edda399d6b828630de1496dbc188/c1b63/26.png 1200w,\n/static/2874edda399d6b828630de1496dbc188/29007/26.png 1600w,\n/static/2874edda399d6b828630de1496dbc188/49ee2/26.png 1618w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 9.10-9.11</h3>\n<p>Similarly to Ilari's flight service, we do not use a real database in our app but instead use hardcoded data that is in the files <a href=\"https://github.com/fullstack-hy2020/misc/blob/master/diagnoses.ts\">diagnoses.ts</a> and <a href=\"https://github.com/fullstack-hy2020/misc/blob/master/patients.ts\">patients.ts</a>. Get the files and store those in a directory called <em>data</em> in your project. All data modification can be done in runtime memory, so during this part, it is <em>not necessary to write to a file</em>.</p>\n<h4>9.10: Patientor backend, step3</h4>\n<p>Create a type <em>Diagnosis</em> and use it to create endpoint <em>/api/diagnoses</em> for fetching all diagnoses with HTTP GET.</p>\n<p>Structure your code properly by using meaningfully-named directories and files.</p>\n<p><strong>Note</strong> that <em>diagnoses</em> may or may not contain the field <em>latin</em>. You might want to use <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#optional-properties\">optional properties</a> in the type definition.</p>\n<h4>9.11: Patientor backend, step4</h4>\n<p>Create data type <em>Patient</em> and set up the GET endpoint <em>/api/patients</em> which returns all the patients to the frontend, excluding field <em>ssn</em>. Use a <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html\">utility type</a> to make sure you are selecting and returning only the wanted fields.</p>\n<p>In this exercise, you may assume that field <em>gender</em> has type <em>string</em>.</p>\n<p>Try the endpoint with your browser and ensure that <em>ssn</em> is not included in the response:</p>\n<picture><img src=\"/static/bc4ce99035b5419acfa2d65698c5cb2d/5a190/22g.png\" alt=\"api/patients browser shows no ssn in patients json\" srcset=\"/static/bc4ce99035b5419acfa2d65698c5cb2d/772e8/22g.png 200w,\n/static/bc4ce99035b5419acfa2d65698c5cb2d/e17e5/22g.png 400w,\n/static/bc4ce99035b5419acfa2d65698c5cb2d/5a190/22g.png 800w,\n/static/bc4ce99035b5419acfa2d65698c5cb2d/c1b63/22g.png 1200w,\n/static/bc4ce99035b5419acfa2d65698c5cb2d/37048/22g.png 1352w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>After creating the endpoint, ensure that the <em>frontend</em> shows the list of patients:</p>\n<picture><img src=\"/static/c6b49beac1a640408462ec316e341d7e/5a190/22h.png\" alt=\"browser showing list of patients\" srcset=\"/static/c6b49beac1a640408462ec316e341d7e/772e8/22h.png 200w,\n/static/c6b49beac1a640408462ec316e341d7e/e17e5/22h.png 400w,\n/static/c6b49beac1a640408462ec316e341d7e/5a190/22h.png 800w,\n/static/c6b49beac1a640408462ec316e341d7e/c1b63/22h.png 1200w,\n/static/c6b49beac1a640408462ec316e341d7e/29007/22h.png 1600w,\n/static/c6b49beac1a640408462ec316e341d7e/169e3/22h.png 1682w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n</div>\n<div class=\"content\">\n<h3>Preventing an accidental undefined result</h3>\n<p>Let's extend the backend to support fetching one specific entry with an HTTP GET request to route <em>api/diaries/:id</em>.</p>\n<p>The DiaryService needs to be extended with a <em>findById</em> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> findById <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">DiaryEntry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> entry <span class=\"token operator\">=</span> diaries<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> entry<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  getNonSensitiveEntries<span class=\"token punctuation\">,</span>\n  addDiary<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  findById</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>But once again, a new problem emerges:</p>\n<picture><img src=\"/static/ffec5cdfddb4a1c59d7cab5702849a32/5a190/23e.png\" alt=\"vscode error can&#x27;t assign undefined to DiaryEntry\" srcset=\"/static/ffec5cdfddb4a1c59d7cab5702849a32/772e8/23e.png 200w,\n/static/ffec5cdfddb4a1c59d7cab5702849a32/e17e5/23e.png 400w,\n/static/ffec5cdfddb4a1c59d7cab5702849a32/5a190/23e.png 800w,\n/static/ffec5cdfddb4a1c59d7cab5702849a32/c1b63/23e.png 1200w,\n/static/ffec5cdfddb4a1c59d7cab5702849a32/ea964/23e.png 1312w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The issue is that there is no guarantee that an entry with the specified id can be found.\nIt is good that we are made aware of this potential problem already at compile phase. Without TypeScript, we would not be warned about this problem, and in the worst-case scenario, we could have ended up returning an <em>undefined</em> object instead of informing the user about the specified entry not being found.</p>\n<p>First of all, in cases like this, we need to decide what the <em>return value</em> should be if an object is not found, and how the case should be handled.\nThe <em>find</em> method of an array returns <em>undefined</em> if the object is not found, and this is fine.\nWe can solve our problem by typing the return value as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> findById <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DiaryEntry <span class=\"token operator\">|</span> <span class=\"token parameter\"><span class=\"token keyword\">undefined</span></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> entry <span class=\"token operator\">=</span> diaries<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> entry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The route handler is the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> diaryService <span class=\"token keyword\">from</span> <span class=\"token string\">'../services/diaryService'</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> diary <span class=\"token operator\">=</span> diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>diary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>diary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">sendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Adding a new diary</h3>\n<p>Let's start building the HTTP POST endpoint for adding new flight diary entries.\nThe new entries should have the same type as the existing data.</p>\n<p>The code handling of the response looks as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> date<span class=\"token punctuation\">,</span> weather<span class=\"token punctuation\">,</span> visibility<span class=\"token punctuation\">,</span> comment <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> addedEntry <span class=\"token operator\">=</span> diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">addDiary</span><span class=\"token punctuation\">(</span>\n    date<span class=\"token punctuation\">,</span>\n    weather<span class=\"token punctuation\">,</span>\n    visibility<span class=\"token punctuation\">,</span>\n    comment<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>addedEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The corresponding method in <em>diaryService</em> looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  NonSensitiveDiaryEntry<span class=\"token punctuation\">,</span>\n  DiaryEntry<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  Visibility<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  Weather</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">const</span> addDiary <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">weather</span><span class=\"token operator\">:</span> Weather<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">visibility</span><span class=\"token operator\">:</span> Visibility<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">comment</span><span class=\"token operator\">:</span> string\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">DiaryEntry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">const</span> newDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>diaries<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token punctuation\">,</span>\n    weather<span class=\"token punctuation\">,</span>\n    visibility<span class=\"token punctuation\">,</span>\n    comment<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  diaries<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newDiaryEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> newDiaryEntry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As you can see, the <em>addDiary</em> function is becoming quite hard to read now that we have all the fields as separate parameters. It might be better to just send the data as an object to the function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> date<span class=\"token punctuation\">,</span> weather<span class=\"token punctuation\">,</span> visibility<span class=\"token punctuation\">,</span> comment <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> addedEntry <span class=\"token operator\">=</span> diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">addDiary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>    date<span class=\"token punctuation\">,</span>\n    weather<span class=\"token punctuation\">,</span>\n    visibility<span class=\"token punctuation\">,</span>\n    comment<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>addedEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>But wait, what is the type of this object? It is not exactly a <em>DiaryEntry</em>, since it is still missing the <em>id</em> field. It could be useful to create a new type, <em>NewDiaryEntry</em>, for an entry that hasn't been saved yet. Let's create that in <em>types.ts</em> using the existing <em>DiaryEntry</em> type and the <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys\">Omit</a> utility type:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type NewDiaryEntry <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now we can use the new type in our DiaryService, and destructure the new entry object when creating an entry to be saved:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NewDiaryEntry<span class=\"token punctuation\">,</span> NonSensitiveDiaryEntry<span class=\"token punctuation\">,</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> addDiary <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> entry<span class=\"token operator\">:</span> NewDiaryEntry <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">DiaryEntry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> newDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>diaries<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">...</span>entry</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  diaries<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newDiaryEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> newDiaryEntry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now the code looks much cleaner!</p>\n<p>There is still a complaint from our code:</p>\n<picture><img src=\"/static/d30c24693f9f3a515f2b4dad560655a1/5a190/43.png\" alt=\"vscode error unsafe assignment of any value\" srcset=\"/static/d30c24693f9f3a515f2b4dad560655a1/772e8/43.png 200w,\n/static/d30c24693f9f3a515f2b4dad560655a1/e17e5/43.png 400w,\n/static/d30c24693f9f3a515f2b4dad560655a1/5a190/43.png 800w,\n/static/d30c24693f9f3a515f2b4dad560655a1/c1b63/43.png 1200w,\n/static/d30c24693f9f3a515f2b4dad560655a1/29007/43.png 1600w,\n/static/d30c24693f9f3a515f2b4dad560655a1/2d912/43.png 1772w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The cause is the ESlint rule <a href=\"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-unsafe-assignment.md\">@typescript-eslint/no-unsafe-assignment</a> that prevents us from assigning the fields of a request body to variables.</p>\n<p>For the time being, let us just ignore the ESlint rule from the whole file by adding the following as the first line of the file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* eslint-disable @typescript-eslint/no-unsafe-assignment */</span></code></pre></div>\n<p>To parse the incoming data we must have the <em>json</em> middleware configured:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> diaryRouter <span class=\"token keyword\">from</span> <span class=\"token string\">'./routes/diaries'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/diaries'</span><span class=\"token punctuation\">,</span> diaryRouter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now the application is ready to receive HTTP POST requests for new diary entries of the correct type!</p>\n<h3>Proofing requests</h3>\n<p>There are plenty of things that can go wrong when we accept data from outside sources.\nApplications rarely work completely on their own, and we are forced to live with the fact that data from sources outside of our system cannot be fully trusted.\nWhen we receive data from an outside source, there is no way it can already be typed when we receive it. We need to make decisions on how to handle the uncertainty that comes with this.</p>\n<p>The disabled ESlint rule was hinting to us that the following assignment is risky:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> newDiaryEntry <span class=\"token operator\">=</span> diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">addDiary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  date<span class=\"token punctuation\">,</span>\n  weather<span class=\"token punctuation\">,</span>\n  visibility<span class=\"token punctuation\">,</span>\n  comment<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We would like to have the assurance that the object in a POST request has the correct type. Let us now define a function <em>toNewDiaryEntry</em> that receives the request body as a parameter and returns a properly-typed <em>NewDiaryEntry</em> object. The function shall be defined in the file <em>utils.ts</em>.</p>\n<p>The route definition uses the function as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> toNewDiaryEntry <span class=\"token keyword\">from</span> <span class=\"token string\">'../utils'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// ...</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> newDiaryEntry <span class=\"token operator\">=</span> <span class=\"token function\">toNewDiaryEntry</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> addedEntry <span class=\"token operator\">=</span> diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">addDiary</span><span class=\"token punctuation\">(</span>newDiaryEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>addedEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> errorMessage <span class=\"token operator\">=</span> <span class=\"token string\">'Something went wrong.'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      errorMessage <span class=\"token operator\">+=</span> <span class=\"token string\">' Error: '</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We can now also remove the first line that ignores the ESlint rule <em>no-unsafe-assignment</em>.</p>\n<p>Since we are now writing secure code and trying to ensure that we are getting exactly the data we want from the requests, we should get started with parsing and validating each field we are expecting to receive.</p>\n<p>The skeleton of the function <em>toNewDiaryEntry</em> looks like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NewDiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> toNewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">NewDiaryEntry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">newEntry</span><span class=\"token operator\">:</span> NewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> newEntry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> toNewDiaryEntry<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The function should parse each field and make sure that the return value is exactly of type <em>NewDiaryEntry</em>. This means we should check each field separately.</p>\n<p>Once again, we have a type issue: what is the  type of the parameter <em>object</em>? Since the <em>object</em> <strong>is</strong> the body of a request, Express has typed it as <em>any</em>. Since the idea of this function is to map fields of unknown type to fields of the correct type and check whether they are defined as expected, this might be the rare case in which we *want to allow the <strong>any</strong> type*.</p>\n<p>However, if we type the object as <em>any</em>, ESlint complains about that:</p>\n<picture><img src=\"/static/411f26618362a029ea8814bc338c49d4/5a190/61new.png\" alt=\"vscode eslint showing object should be typed something non-any and that its defined but never used\" srcset=\"/static/411f26618362a029ea8814bc338c49d4/772e8/61new.png 200w,\n/static/411f26618362a029ea8814bc338c49d4/e17e5/61new.png 400w,\n/static/411f26618362a029ea8814bc338c49d4/5a190/61new.png 800w,\n/static/411f26618362a029ea8814bc338c49d4/c1b63/61new.png 1200w,\n/static/411f26618362a029ea8814bc338c49d4/29007/61new.png 1600w,\n/static/411f26618362a029ea8814bc338c49d4/61583/61new.png 1616w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>We could ignore the ESlint rule but a better idea is to follow one of the advices the editor gives in the <em>Quick Fix</em> and set the parameter type to <em>unknown</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NewDiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> toNewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>object<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">NewDiaryEntry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">newEntry</span><span class=\"token operator\">:</span> NewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> newEntry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> toNewDiaryEntry<span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://www.typescriptlang.org/docs/handbook/2/functions.html#unknown\">unknown</a> is the ideal type for our kind of situation of input validation, since we don't yet need to define the type to match <em>any</em> type, but can first verify the type and then confirm that is the expected type.\nWith the use of <em>unknown</em>, we also don't need to worry about the <em>@typescript-eslint/no-explicit-any</em> ESlint rule, since we are not using <em>any</em>. However, we might still need to use <em>any</em> in some cases in which we are not yet sure about the type and need to access the properties of an object of type <em>any</em> to validate or type-check the property values themselves.</p>\n<blockquote>\n<h4>A sidenote from the editor</h4>\n<p><em>If you are like me and hate having a code in broken state for a long time due to incomplete typing, you could start by \"faking\" the function:</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> toNewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>object<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">NewDiaryEntry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// now object is no longer unused</span>\n <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">newEntry</span><span class=\"token operator\">:</span> NewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token literal-property property\">weather</span><span class=\"token operator\">:</span> <span class=\"token string\">'cloudy'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// fake the return value</span>\n   <span class=\"token literal-property property\">visibility</span><span class=\"token operator\">:</span> <span class=\"token string\">'great'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token string\">'2022-1-1'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">comment</span><span class=\"token operator\">:</span> <span class=\"token string\">'fake news'</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">return</span> newEntry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>So before the real data and types are ready to use, I am just returning here something that has for sure the right type. The code stays in an operational state all the time and my blood pressure remains at normal levels.</em></p>\n</blockquote>\n<h3>Type guards</h3>\n<p>Let us start creating the parsers for each of the fields of the parameter <em>object: unknown</em>.</p>\n<p>To validate the <em>comment</em> field, we need to check that it exists and to ensure that it is of the type <em>string</em>.</p>\n<p>The function should look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parseComment <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>comment<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>comment <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect or missing comment'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> comment<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The function gets a parameter of type <em>unknown</em> and returns it as type <em>string</em> if it exists and is of the right type.</p>\n<p>The string validation function looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isString <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>text<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> text is <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> text <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">||</span> text <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The function is a so-called <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates\">type guard</a>. That means it is a function that returns a boolean <em>and</em> has a <em>type predicate</em> as the return type. In our case, the type predicate is:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">text is string</code></pre></div>\n<p>The general form of a type predicate is <em>parameterName is Type</em> where the <em>parameterName</em> is the name of the function parameter and <em>Type</em> is the targeted type.</p>\n<p>If the type guard function returns true, the TypeScript compiler knows that the tested variable has the type that was defined in the type predicate.</p>\n<p>Before the type guard is called, the actual type of the variable <em>comment</em> is not known:</p>\n<picture><img src=\"/static/e5e9792b4f550da4f7e58d0b99bf8087/5a190/28e-21.png\" alt=\"vscode hovering over isString(comment) shows type unknown\" srcset=\"/static/e5e9792b4f550da4f7e58d0b99bf8087/772e8/28e-21.png 200w,\n/static/e5e9792b4f550da4f7e58d0b99bf8087/e17e5/28e-21.png 400w,\n/static/e5e9792b4f550da4f7e58d0b99bf8087/5a190/28e-21.png 800w,\n/static/e5e9792b4f550da4f7e58d0b99bf8087/c1b63/28e-21.png 1200w,\n/static/e5e9792b4f550da4f7e58d0b99bf8087/f1c64/28e-21.png 1390w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>But after the call, if the code proceeds past the exception (that is, the type guard returned true), then the compiler knows that <em>comment</em> is of type <em>string</em>:</p>\n<picture><img src=\"/static/2185931be98d1cb3980200dd02efca67/5a190/29e-21.png\" alt=\"vscode hovering over return comment shows type string\" srcset=\"/static/2185931be98d1cb3980200dd02efca67/772e8/29e-21.png 200w,\n/static/2185931be98d1cb3980200dd02efca67/e17e5/29e-21.png 400w,\n/static/2185931be98d1cb3980200dd02efca67/5a190/29e-21.png 800w,\n/static/2185931be98d1cb3980200dd02efca67/c1b63/29e-21.png 1200w,\n/static/2185931be98d1cb3980200dd02efca67/1134b/29e-21.png 1470w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The use of a type guard that returns a type predicate is one way to do <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html\">type narrowing</a>, that is, to give a variable a more strict or accurate type. As we will soon see there are also other kind of <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html\">type guards</a> available.</p>\n<blockquote>\n<h4>Side note: testing if something is a string</h4>\n<p><em>Why do we have two conditions in the string type guard?</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isString <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>text<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> text is <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\"> <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> text <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">||</span> text <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>Would it not be enough to write the guard like this?</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isString <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>text<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> text is <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> text <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>*Most likely, the simpler form is good enough for all practical purposes. However, if we want to be sure, both conditions are needed. There are two different ways to create string in JavaScript, one as a primitive and the other as an object, which both work a bit differently when compared to the <strong>typeof</strong> and <strong>instanceof</strong> operators:*</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"I'm a string primitive\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm a String Object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> returns <span class=\"token string\">'string'</span>\n<span class=\"token keyword\">typeof</span> b<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> returns <span class=\"token string\">'object'</span>\na <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> returns <span class=\"token boolean\">false</span>\nb <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> returns <span class=\"token boolean\">true</span></code></pre></div>\n<p><em>However, it is unlikely that anyone would create a string with a constructor function. Most likely the simpler version of the type guard would be just fine.</em></p>\n</blockquote>\n<p>Next, let's consider the <em>date</em> field.\nParsing and validating the date object is pretty similar to what we did with comments.\nSince TypeScript doesn't know a type for a date, we need to treat it as a <em>string</em>.\nWe should however still use JavaScript-level validation to check whether the date format is acceptable.</p>\n<p>We will add the following functions:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isDate <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>date<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">boolean</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> parseDate <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>date<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>date <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isDate</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect or missing date: '</span> <span class=\"token operator\">+</span> date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> date<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The code is nothing special. The only thing is that we can't use a type predicate based type guard here since a date in this case is only considered to be a <em>string</em>. Note that even though the <em>parseDate</em> function accepts the <em>date</em> variable as <em>unknown</em> after we check the type with <em>isString</em>, then its type is set as <em>string</em>, which is why we can give the variable to the <em>isDate</em> function requiring a string without any problems.</p>\n<p>Finally, we are ready to move on to the last two types, <em>Weather</em> and <em>Visibility</em>.</p>\n<p>We would like the validation and parsing to work as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parseWeather <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>weather<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">Weather</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>weather <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>weather<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isWeather</span><span class=\"token punctuation\">(</span>weather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect or missing weather: '</span> <span class=\"token operator\">+</span> weather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> weather<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The question is: how can we validate that the string is of a specific form?\nOne possible way to write the type guard would be this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isWeather <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>str<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> str is <span class=\"token parameter\">Weather</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'sunny'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rainy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cloudy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'stormy'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This would work just fine, but the problem is that the list of possible values for Weather does not necessarily stay in sync with the type definitions if the type is altered.\nThis is most certainly not good, since we would like to have just one source for all possible weather types.</p>\n<h3>Enum</h3>\n<p>In our case, a better solution would be to improve the actual <em>Weather</em> type. Instead of a type alias, we should use the TypeScript <a href=\"https://www.typescriptlang.org/docs/handbook/enums.html\">enum</a>, which allows us to use the actual values in our code at runtime, not only in the compilation phase.</p>\n<p>Let us redefine the type <em>Weather</em> as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">enum</span> Weather <span class=\"token punctuation\">{</span>\n  Sunny <span class=\"token operator\">=</span> <span class=\"token string\">'sunny'</span><span class=\"token punctuation\">,</span>\n  Rainy <span class=\"token operator\">=</span> <span class=\"token string\">'rainy'</span><span class=\"token punctuation\">,</span>\n  Cloudy <span class=\"token operator\">=</span> <span class=\"token string\">'cloudy'</span><span class=\"token punctuation\">,</span>\n  Stormy <span class=\"token operator\">=</span> <span class=\"token string\">'stormy'</span><span class=\"token punctuation\">,</span>\n  Windy <span class=\"token operator\">=</span> <span class=\"token string\">'windy'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we can check that a string is one of the accepted values, and the type guard can be written like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isWeather <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>param<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> param is <span class=\"token parameter\">Weather</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>Weather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note that we need to take the string representation of the enum values for the comparison, that is why we do the mapping.</p>\n<p>One issue arises after these changes. Our data in file <em>data/entries.ts</em> does not conform to our types anymore:</p>\n<picture><img src=\"/static/2d23be7abdebf83abf928340dce1d30c/5a190/30.png\" alt=\"vscode error rainy is not assignable to type Weather\" srcset=\"/static/2d23be7abdebf83abf928340dce1d30c/772e8/30.png 200w,\n/static/2d23be7abdebf83abf928340dce1d30c/e17e5/30.png 400w,\n/static/2d23be7abdebf83abf928340dce1d30c/5a190/30.png 800w,\n/static/2d23be7abdebf83abf928340dce1d30c/c1b63/30.png 1200w,\n/static/2d23be7abdebf83abf928340dce1d30c/536c7/30.png 1480w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>This is because we cannot just assume a string is an enum.</p>\n<p>We can fix this by mapping the initial data elements to the <em>DiaryEntry</em> type with the <em>toNewDiaryEntry</em> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../src/types\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> toNewDiaryEntry <span class=\"token keyword\">from</span> <span class=\"token string\">\"../src/utils\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n      <span class=\"token string-property property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2017-01-01\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">\"weather\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rainy\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">\"visibility\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"poor\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">\"comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Pretty scary flight, I'm glad I'm alive\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">diaryEntries</span><span class=\"token operator\">:</span> DiaryEntry <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> object <span class=\"token operator\">=</span> <span class=\"token function\">toNewDiaryEntry</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> DiaryEntry<span class=\"token punctuation\">;</span>\n  object<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> object<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> diaryEntries<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note that since <em>toNewDiaryEntry</em> returns an object of type <em>NewDiaryEntry</em>, we need to assert it to be <em>DiaryEntry</em> with the <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-assertions\">as</a> operator.</p>\n<p>Enums are typically used when there is a set of predetermined values that are not expected to change in the future. Usually, they are used for much tighter unchanging values (for example, weekdays, months, cardinal directions), but since they offer us a great way to validate our incoming values, we might as well use them in our case.</p>\n<p>We still need to give the same treatment to <em>Visibility</em>. The enum looks as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">enum</span> Visibility <span class=\"token punctuation\">{</span>\n  Great <span class=\"token operator\">=</span> <span class=\"token string\">'great'</span><span class=\"token punctuation\">,</span>\n  Good <span class=\"token operator\">=</span> <span class=\"token string\">'good'</span><span class=\"token punctuation\">,</span>\n  Ok <span class=\"token operator\">=</span> <span class=\"token string\">'ok'</span><span class=\"token punctuation\">,</span>\n  Poor <span class=\"token operator\">=</span> <span class=\"token string\">'poor'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The type guard and the parser are below:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isVisibility <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>param<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> param is <span class=\"token parameter\">Visibility</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>Visibility<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> parseVisibility <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>visibility<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">Visibility</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visibility <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>visibility<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isVisibility</span><span class=\"token punctuation\">(</span>visibility<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect or missing visibility: '</span> <span class=\"token operator\">+</span> visibility<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> visibility<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And finally, we can finalize the <em>toNewDiaryEntry</em> function that takes care of validating and parsing the fields of the POST body. There is however one more thing to take care of. If we try to access the fields of the parameter <em>object</em> as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> toNewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>object<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">NewDiaryEntry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">newEntry</span><span class=\"token operator\">:</span> NewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">comment</span><span class=\"token operator\">:</span> <span class=\"token function\">parseComment</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token function\">parseDate</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">weather</span><span class=\"token operator\">:</span> <span class=\"token function\">parseWeather</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>weather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">visibility</span><span class=\"token operator\">:</span> <span class=\"token function\">parseVisibility</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>visibility<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> newEntry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>we notice that the code does not compile. This is because the <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html#new-unknown-top-type\">unknown</a> type does not allow any operations, so accessing the fields is not possible.</p>\n<p>We can again fix the problem by type narrowing. We have now two type guards, the first checks that the parameter object exists and it has the type <em>object</em>. After this, the second type guard uses the <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#the-in-operator-narrowing\">in</a> operator to ensure that the object has all the desired fields:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> toNewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>object<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">NewDiaryEntry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>object <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> object <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect or missing data'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'comment'</span> <span class=\"token keyword\">in</span> object <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'date'</span> <span class=\"token keyword\">in</span> object <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'weather'</span> <span class=\"token keyword\">in</span> object <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'visibility'</span> <span class=\"token keyword\">in</span> object<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">newEntry</span><span class=\"token operator\">:</span> NewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">weather</span><span class=\"token operator\">:</span> <span class=\"token function\">parseWeather</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>weather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">visibility</span><span class=\"token operator\">:</span> <span class=\"token function\">parseVisibility</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>visibility<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token function\">parseDate</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">comment</span><span class=\"token operator\">:</span> <span class=\"token function\">parseComment</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>comment<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> newEntry<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect data: some fields are missing'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If the guard does not evaluate to true, an exception is thrown.</p>\n<p>The use of the operator <em>in</em> actually now guarantees that the fields indeed exist in the object. Because of that, the existence check in parsers is no more needed:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parseVisibility <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>visibility<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">Visibility</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// check !visibility removed:</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>visibility<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isVisibility</span><span class=\"token punctuation\">(</span>visibility<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect visibility: '</span> <span class=\"token operator\">+</span> visibility<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> visibility<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If a field, e.g. <em>comment</em> would be optional, the type narrowing should take that into account, and the operator <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#the-in-operator-narrowing\">in</a> could not be used quite as we did here, since the <em>in</em> test requires the field to be present.</p>\n<p>If we now try to create a new diary entry with invalid or missing fields, we are getting an appropriate error message:</p>\n<picture><img src=\"/static/07769d61772df6f45e54316260fffaa6/5a190/62new.png\" alt=\"postman showing 400 bad request with incorrect or missing visibility - awesome\" srcset=\"/static/07769d61772df6f45e54316260fffaa6/772e8/62new.png 200w,\n/static/07769d61772df6f45e54316260fffaa6/e17e5/62new.png 400w,\n/static/07769d61772df6f45e54316260fffaa6/5a190/62new.png 800w,\n/static/07769d61772df6f45e54316260fffaa6/c1b63/62new.png 1200w,\n/static/07769d61772df6f45e54316260fffaa6/29007/62new.png 1600w,\n/static/07769d61772df6f45e54316260fffaa6/7e21b/62new.png 1626w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The source code of the application can be found on <a href=\"https://github.com/fullstack-hy2020/flight-diary\">GitHub</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 9.12-9.13</h3>\n<h4>9.12: Patientor backend, step5</h4>\n<p>Create a POST endpoint <em>/api/patients</em> for adding patients. Ensure that you can add patients also from the frontend. You can create unique ids of type <em>string</em> using the <a href=\"https://github.com/uuidjs/uuid\">uuid</a> library:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> v1 <span class=\"token keyword\">as</span> uuid <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'uuid'</span>\n<span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">uuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>9.13: Patientor backend, step6</h4>\n<p>Set up safe parsing, validation and type predicate to the POST <em>/api/patients</em> request.</p>\n<p>Refactor the <em>gender</em> field to use an <a href=\"http://www.typescriptlang.org/docs/handbook/enums.html\">enum type</a>.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/ed8ae98c5d885b4d1928a681eefbe7c4/part-9.svg"},"part":9,"letter":"c","lang":"en"}}},"pageContext":{"part":9,"letter":"c","lang":"en"}},"staticQueryHashes":["3128451518"]}
{"componentChunkName":"component---src-templates-content-template-js","path":"/en/part9/react_with_types","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Before we start delving into how you can use TypeScript with React, we should first have a look at what we want to achieve. When everything works as it should, TypeScript will help us catch the following errors:</p>\n<ul>\n<li>Trying to pass an extra/unwanted prop to a component</li>\n<li>Forgetting to pass a required prop to a component</li>\n<li>Passing a prop with the wrong type to a component</li>\n</ul>\n<p>If we make any of these errors, TypeScript can help us catch them in our editor right away. If we didn't use TypeScript, we would have to catch these errors later during testing. We might be forced to do some tedious debugging to find the cause of the errors.</p>\n<p>That's enough reasoning for now. Let's start getting our hands dirty!</p>\n<h3>Vite with TypeScript</h3>\n<p>We can use <a href=\"https://vitejs.dev/\">Vite</a> to create a TypeScript app specifying a template <em>react-ts</em> in the initialization script. So to create a TypeScript app, run the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> create vite@latest my-app-name -- <span class=\"token parameter variable\">--template</span> react-ts</code></pre></div>\n<p>After running the command, you should have a complete basic React app that uses TypeScript. You can start the app by running <em>npm run dev</em> in the application's root.</p>\n<p>If you take a look at the files and folders, you'll notice that the app is not that different from one using pure JavaScript. The only differences are that the <em>.jsx</em> files are now <em>.tsx</em> files, they contain some type annotations, and the root directory contains a <em>tsconfig.json</em> file.</p>\n<p>Now, let's take a look at the <em>tsconfig.json</em> file that has been created for us:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES2020\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"useDefineForClassFields\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ES2020\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DOM\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DOM.Iterable\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ESNext\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"skipLibCheck\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">/* Bundler mode */</span>\n    <span class=\"token string-property property\">\"moduleResolution\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bundler\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"allowImportingTsExtensions\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"resolveJsonModule\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"isolatedModules\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"noEmit\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-jsx\"</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">/* Linting */</span>\n    <span class=\"token string-property property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"noUnusedLocals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"noUnusedParameters\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"noFallthroughCasesInSwitch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"references\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./tsconfig.node.json\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice <em>compilerOptions</em> now has the key <a href=\"https://www.typescriptlang.org/tsconfig#lib\">lib</a> that includes \"type definitions for things found in browser environments (like <em>document</em>)\". Everything else should be more or less fine.</p>\n<p>In our previous project, we used ESlint to help us enforce a coding style, and we'll do the same with this app. We do not need to install any dependencies, since Vite has taken care of that already.</p>\n<p>When we look at the <em>main.tsx</em> file that Vite has generated, it looks familiar but there is a small but remarkable difference, there is a exclamation mark after the statement <em>document.getElementById('root')</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.tsx'</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./index.css'</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>StrictMode<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>StrictMode<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The reason for this is that the statement might return value null but the <em>ReactDOM.createRoot</em> does not accept null as parameter. With the <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#non-null-assertion-operator-postfix-\">! operator</a>, it is possible to assert to the TypeScript compiler that the value is not null.</p>\n<p>Earlier in this part we <a href=\"/en/part9/first_steps_with_type_script#type-assertion\">warned</a>Â about the dangers of type assertions, but in our case the assertion is ok since we are sure that the file <em>index.html</em> indeed has this particular id and the function is always returning a HTMLElement.</p>\n<h3>React components with TypeScript</h3>\n<p>Let us consider the following JavaScript React example:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span>\n<span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">\"prop-types\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Welcome</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nWelcome<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Welcome</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Sarah<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>In this example, we have a component called <em>Welcome</em> to which we pass a <em>name</em> as a prop. It then renders the name to the screen. We know that the <em>name</em> should be a string, and we use the <a href=\"https://www.npmjs.com/package/prop-types\">prop-types</a> package introduced in <a href=\"/en/part5/props_children_and_proptypes#prop-types\">part 5</a> to receive hints about the desired types of a component's props and warnings about invalid prop types.</p>\n<p>With TypeScript, we don't need the <em>prop-types</em> package anymore. We can define the types with the help of TypeScript, just like we define types for a regular function as React components are nothing but mere functions. We will use an interface for the parameter types (i.e. props) and <em>JSX.Element</em> as the return type for any React component:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">WelcomeProps</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> Welcome <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> WelcomeProps<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span><span class=\"token parameter\">Element</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Welcome</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Sarah<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>We defined a new type, <em>WelcomeProps</em>, and passed it to the function's parameter types.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> Welcome <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> WelcomeProps<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span><span class=\"token parameter\">Element</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></code></pre></div>\n<p>You could write the same thing using a more verbose syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> Welcome <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span><span class=\"token parameter\">Element</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now our editor knows that the <em>name</em> prop is a string.</p>\n<p>There is actually no need to define the return type of a React component since the TypeScript compiler infers the type automatically, so we can just write:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">WelcomeProps</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Welcome</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> WelcomeProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Welcome</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Sarah<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n</div>\n<div class=\"tasks\">\n<h3>Exercise 9.14</h3>\n<h4>9.14</h4>\n<p>Create a new Vite app with TypeScript.</p>\n<p>This exercise is similar to the one you have already done in <a href=\"/en/part1/java_script#exercises-1-3-1-5\">Part 1</a> of the course, but with TypeScript and some extra tweaks. Start off by modifying the contents of <em>main.tsx</em> to the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>and <em>App.tsx</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> courseName <span class=\"token operator\">=</span> <span class=\"token string\">\"Half Stack application development\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> courseParts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Fundamentals\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">exerciseCount</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Using props to pass data\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">exerciseCount</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Deeper type usage\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">exerciseCount</span><span class=\"token operator\">:</span> <span class=\"token number\">14</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> totalExercises <span class=\"token operator\">=</span> courseParts<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sum<span class=\"token punctuation\">,</span> part</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> sum <span class=\"token operator\">+</span> part<span class=\"token punctuation\">.</span>exerciseCount<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>courseName<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>courseParts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>courseParts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>exerciseCount<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>courseParts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>courseParts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>exerciseCount<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>courseParts<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>courseParts<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>exerciseCount<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Number of exercises </span><span class=\"token punctuation\">{</span>totalExercises<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<p>and remove the unnecessary files.</p>\n<p>The whole app is now in one component. That is not what we want, so refactor the code so that it consists of three components: <em>Header</em>,  <em>Content</em> and <em>Total</em>. All data is still kept in the <em>App</em> component, which passes all necessary data to each component as props. <em>Be sure to add type declarations for each component's props!</em></p>\n<p>The <em>Header</em> component should take care of rendering the name of the course. <em>Content</em> should render the names of the different parts and the number of exercises in each part, and <em>Total</em> should render the total sum of exercises in all parts.</p>\n<p>The <em>App</em> component should look somewhat like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// const-declarations</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Header</span></span> <span class=\"token attr-name\">name</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>courseName<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Content</span></span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Total</span></span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</div>\n<div class=\"content\">\n<h3>Deeper type usage</h3>\n<p>In the previous exercise, we had three parts of a course, and all parts had the same attributes <em>name</em> and <em>exerciseCount</em>. But what if we need additional attributes for a specific part? How would this look, codewise? Let's consider the following example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> courseParts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Fundamentals\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">exerciseCount</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">\"This is an awesome course part\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Using props to pass data\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">exerciseCount</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">groupProjectCount</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Basics of type Narrowing\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">exerciseCount</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">\"How to go from unknown to string\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Deeper type usage\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">exerciseCount</span><span class=\"token operator\">:</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Confusing description\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">backgroundMaterial</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://type-level-typescript.com/template-literal-types\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the above example, we have added some additional attributes to each course part.\nEach part has the <em>name</em> and <em>exerciseCount</em> attributes, but the first, the third and fourth also have an attribute called <em>description</em>. The second and fourth parts also have some distinct additional attributes.</p>\n<p>Let's imagine that our application just keeps on growing, and we need to pass the different course parts around in our code. On top of that, there are also additional attributes and course parts added to the mix. How can we know that our code is capable of handling all the different types of data correctly, and we are not for example forgetting to render a new course part on some page? This is where TypeScript comes in handy!</p>\n<p>Let's start by defining types for our different course parts. We notice that the first and third have the same set of attributes. The second and fourth are a bit different so we have three different kinds of course part elements.</p>\n<p>So let us define a type for each of the different kind of course parts:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">CoursePartBasic</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">exerciseCount</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">\"basic\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CoursePartGroup</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">exerciseCount</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">groupProjectCount</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">\"group\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CoursePartBackground</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">exerciseCount</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">backgroundMaterial</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">\"background\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Besides the attributes that are found in the various course parts, we have now introduced an additional attribute called <em>kind</em> that has a <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#literal-types\">literal</a> type, it is a \"hard coded\" string, distinct for each course part. We shall soon see where the attribute kind is used!</p>\n<p>Next, we will create a type <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types\">union</a> of all these types. We can then use it to define a type for our array, which should accept any of these course part types:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type CoursePart <span class=\"token operator\">=</span> CoursePartBasic <span class=\"token operator\">|</span> CoursePartGroup <span class=\"token operator\">|</span> CoursePartBackground<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now we can set the type for our <em>courseParts</em> variable:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> courseName <span class=\"token operator\">=</span> <span class=\"token string\">\"Half Stack application development\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">courseParts</span><span class=\"token operator\">:</span> CoursePart<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Fundamentals\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">exerciseCount</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">\"This is an awesome course part\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">\"basic\"</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Using props to pass data\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">exerciseCount</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">groupProjectCount</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">\"group\"</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Basics of type Narrowing\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">exerciseCount</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">\"How to go from unknown to string\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">\"basic\"</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Deeper type usage\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">exerciseCount</span><span class=\"token operator\">:</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Confusing description\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">backgroundMaterial</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://type-level-typescript.com/template-literal-types\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">\"background\"</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that we have now added the attribute <em>kind</em> with a proper value to each element of the array.</p>\n<p>Our editor will automatically warn us if we use the wrong type for an attribute, use an extra attribute, or forget to set an expected attribute. If we eg. try to add the following to the array</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"TypeScript in frontend\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">exerciseCount</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">\"basic\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>We will immediately see an error in the editor:</p>\n<picture><img src=\"/static/35f39f5ab4b7bebd48a567227bd5a08a/5a190/63new.png\" alt=\"vscode exerciseCount not assignable to type CoursePart - description missing\" srcset=\"/static/35f39f5ab4b7bebd48a567227bd5a08a/772e8/63new.png 200w,\n/static/35f39f5ab4b7bebd48a567227bd5a08a/e17e5/63new.png 400w,\n/static/35f39f5ab4b7bebd48a567227bd5a08a/5a190/63new.png 800w,\n/static/35f39f5ab4b7bebd48a567227bd5a08a/c1b63/63new.png 1200w,\n/static/35f39f5ab4b7bebd48a567227bd5a08a/d7e70/63new.png 1286w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Since our new entry has the attribute <em>kind</em> with value <em>\"basic\"</em>, TypeScript knows that the entry does not only have the type <em>CoursePart</em> but it is actually meant to be a <em>CoursePartBasic</em>. So here the attribute <em>kind</em> \"narrows\" the type of the entry from a more general to a more specific type that has a certain set of attributes. We shall soon see this style of type narrowing in action in the code!</p>\n<p>But we're not satisfied yet! There is still a lot of duplication in our types, and we want to avoid that. We start by identifying the attributes all course parts have in common, and defining a base type that contains them. Then we will <a href=\"https://www.typescriptlang.org/docs/handbook/2/objects.html#extending-types\">extend</a> that base type to create our kind-specific types:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">CoursePartBase</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">exerciseCount</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CoursePartBasic</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CoursePartBase</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">\"basic\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CoursePartGroup</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CoursePartBase</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">groupProjectCount</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">\"group\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CoursePartBackground</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CoursePartBase</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">backgroundMaterial</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">\"background\"</span>\n<span class=\"token punctuation\">}</span>\n\ntype CoursePart <span class=\"token operator\">=</span> CoursePartBasic <span class=\"token operator\">|</span> CoursePartGroup <span class=\"token operator\">|</span> CoursePartBackground<span class=\"token punctuation\">;</span></code></pre></div>\n<h3>More type narrowing</h3>\n<p>How should we now use these types in our components?</p>\n<p>If we try to access the objects in the array <em>courseParts: CoursePart[]</em> we notice that it is possible to only access the attributes that are common to all the types in the union:</p>\n<picture><img src=\"/static/57b62f94752f8b1057cd9573c2e7d4c7/5a190/65new.png\" alt=\"vscode showing part.exerciseCou\" srcset=\"/static/57b62f94752f8b1057cd9573c2e7d4c7/772e8/65new.png 200w,\n/static/57b62f94752f8b1057cd9573c2e7d4c7/e17e5/65new.png 400w,\n/static/57b62f94752f8b1057cd9573c2e7d4c7/5a190/65new.png 800w,\n/static/57b62f94752f8b1057cd9573c2e7d4c7/c1b63/65new.png 1200w,\n/static/57b62f94752f8b1057cd9573c2e7d4c7/86a1e/65new.png 1296w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>And indeed, the TypeScript <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#working-with-union-types\">documentation</a> says this:</p>\n<blockquote>\n<p><em>TypeScript will only allow an operation (or attribute access) if it is valid for every member of the union.</em></p>\n</blockquote>\n<p>The documentation also mentions the following:</p>\n<blockquote>\n<p><em>The solution is to narrow the union with code... Narrowing occurs when TypeScript can deduce a more specific type for a value based on the structure of the code.</em></p>\n</blockquote>\n<p>So once again the <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html\">type narrowing</a> is the rescue!</p>\n<p>One handy way to narrow these kinds of types in TypeScript is to use <em>switch case</em> expressions. Once TypeScript has inferred that a variable is of union type and that each type in the union contain a certain literal attribute (in our case <em>kind</em>), we can use that as a type identifier. We can then build a switch case around that attribute and TypeScript will know which attributes are available within each case block:</p>\n<picture><img src=\"/static/41355ab539fd875e4a77ca14dc7ae819/5a190/64new.png\" alt=\"vscode showing part. and then the attributes\" srcset=\"/static/41355ab539fd875e4a77ca14dc7ae819/772e8/64new.png 200w,\n/static/41355ab539fd875e4a77ca14dc7ae819/e17e5/64new.png 400w,\n/static/41355ab539fd875e4a77ca14dc7ae819/5a190/64new.png 800w,\n/static/41355ab539fd875e4a77ca14dc7ae819/c1b63/64new.png 1200w,\n/static/41355ab539fd875e4a77ca14dc7ae819/fe720/64new.png 1448w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>In the above example, TypeScript knows that a <em>part</em> has the type <em>CoursePart</em> and it can then infer that <em>part</em> is of either type <em>CoursePartBasic</em>, <em>CoursePartGroup</em> or <em>CoursePartBackground</em> based on the value of the attribute <em>kind</em>.</p>\n<p>The specific technique of type narrowing where a union type is narrowed based on literal attribute value is called <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#discriminated-unions\">discriminated union</a>.</p>\n<p>Note that the narrowing can naturally be also done with <em>if</em> clause. We could eg. do the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  courseParts<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">part</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>part<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">'background'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'see the following:'</span><span class=\"token punctuation\">,</span> part<span class=\"token punctuation\">.</span>backgroundMaterial<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// can not refer to part.backgroundMaterial here!</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>What about adding new types? If we were to add a new course part, wouldn't it be nice to know if we had already implemented handling that type in our code? In the example above, a new type would go to the <em>default</em> block and nothing would get printed for a new type. Sometimes this is wholly acceptable. For instance, if you wanted to handle only specific (but not all) cases of a type union, having a default is fine. Nonetheless, it is recommended to handle all variations separately in most cases.</p>\n<p>With TypeScript, we can use a method called <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#exhaustiveness-checking\">exhaustive type checking</a>. Its basic principle is that if we encounter an unexpected value, we call a function that accepts a value with the type <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#the-never-type\">never</a> and also has the return type <em>never</em>.</p>\n<p>A straightforward version of the function could look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Helper function for exhaustive type checking\n */</span>\n<span class=\"token keyword\">const</span> assertNever <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> never<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">never</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Unhandled discriminated union member: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If we now were to replace the contents of our <em>default</em> block to:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">assertNever</span><span class=\"token punctuation\">(</span>part<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>and remove the case that handles the type <em>CoursePartBackground</em>, we would see the following error:</p>\n<picture><img src=\"/static/e52199357b4a604af6303ffb0a5f91f2/5a190/66new.png\" alt=\"vscode error Argument of Ttype CoursePart not assignable to type never\" srcset=\"/static/e52199357b4a604af6303ffb0a5f91f2/772e8/66new.png 200w,\n/static/e52199357b4a604af6303ffb0a5f91f2/e17e5/66new.png 400w,\n/static/e52199357b4a604af6303ffb0a5f91f2/5a190/66new.png 800w,\n/static/e52199357b4a604af6303ffb0a5f91f2/c1b63/66new.png 1200w,\n/static/e52199357b4a604af6303ffb0a5f91f2/68638/66new.png 1510w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The error message says that</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">'CoursePartBackground' is not assignable to parameter of type 'never'.</code></pre></div>\n<p>which tells us that we are using a variable somewhere where it should never be used. This tells us that something needs to be fixed.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercise 9.15</h3>\n<h4>9.15</h4>\n<p>Let us now continue extending the app created in exercise 9.14. First, add the type information and replace the variable <em>courseParts</em> with the one from the example below.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">CoursePartBase</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">exerciseCount</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CoursePartBasic</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CoursePartBase</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">\"basic\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CoursePartGroup</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CoursePartBase</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">groupProjectCount</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">\"group\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CoursePartBackground</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CoursePartBase</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">backgroundMaterial</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">\"background\"</span>\n<span class=\"token punctuation\">}</span>\n\ntype CoursePart <span class=\"token operator\">=</span> CoursePartBasic <span class=\"token operator\">|</span> CoursePartGroup <span class=\"token operator\">|</span> CoursePartBackground<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">courseParts</span><span class=\"token operator\">:</span> CoursePart<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Fundamentals\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">exerciseCount</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">\"This is an awesome course part\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">\"basic\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Using props to pass data\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">exerciseCount</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">groupProjectCount</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">\"group\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Basics of type Narrowing\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">exerciseCount</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">\"How to go from unknown to string\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">\"basic\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Deeper type usage\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">exerciseCount</span><span class=\"token operator\">:</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Confusing description\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">backgroundMaterial</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://type-level-typescript.com/template-literal-types\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">\"background\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"TypeScript in frontend\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">exerciseCount</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">\"a hard part\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">\"basic\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now we know that both interfaces <em>CoursePartBasic</em> and <em>CoursePartBackground</em> share not only the base attributes but also an attribute called <em>description</em>, which is a string in both interfaces.</p>\n<p>Your first task is to declare a new interface that includes the <em>description</em> attribute and extends the <em>CoursePartBase</em> interface. Then modify the code so that you can remove the <em>description</em> attribute from both <em>CoursePartBasic</em> and <em>CoursePartBackground</em>  without getting any errors.</p>\n<p>Then create a component <em>Part</em> that renders all attributes of each type of course part. Use a switch case-based exhaustive type checking! Use the new component in component <em>Content</em>.</p>\n<p>Lastly, add another course part interface with the following attributes: <em>name</em>, <em>exerciseCount</em>, <em>description</em> and <em>requirements</em>, the latter being a string array. The objects of this type look like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Backend development\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">exerciseCount</span><span class=\"token operator\">:</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Typing the backend\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">requirements</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"nodejs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jest\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">\"special\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then add that interface to the type union <em>CoursePart</em> and add the corresponding data to the <em>courseParts</em> variable. Now, if you have not modified your <em>Content</em> component correctly, you should get an error, because you have not yet added support for the fourth course part type. Do the necessary changes to <em>Content</em>, so that all attributes for the new course part also get rendered and that the compiler doesn't produce any errors.</p>\n<p>The result might look like the following:</p>\n<picture><img src=\"/static/b250cbeee382069b5352275d6591d469/5a190/45.png\" alt=\"browser showing half stack application development\" srcset=\"/static/b250cbeee382069b5352275d6591d469/772e8/45.png 200w,\n/static/b250cbeee382069b5352275d6591d469/e17e5/45.png 400w,\n/static/b250cbeee382069b5352275d6591d469/5a190/45.png 800w,\n/static/b250cbeee382069b5352275d6591d469/c1b63/45.png 1200w,\n/static/b250cbeee382069b5352275d6591d469/6f278/45.png 1488w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n</div>\n<div class=\"content\">\n<h3>React app with state</h3>\n<p>So far, we have only looked at an application that keeps all the data in a typed variable but does not have any state. Let us once more go back to the note app, and build a typed version of it.</p>\n<p>We start with the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newNote<span class=\"token punctuation\">,</span> setNewNote<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When we hover over the <em>useState</em> calls in the editor, we notice a couple of interesting things.</p>\n<p>The type of the first call <em>useState('')</em> looks like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>initialState<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n  <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> React<span class=\"token punctuation\">.</span>Dispatch<span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>SetStateAction<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">>></span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>The type is somewhat challenging to decipher. It has the following \"form\":</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">functionName</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> return_value</code></pre></div>\n<p>So we notice that TypeScript compiler has inferred that the initial state is either a string or a function that returns a string:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">initialState<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The type of the returned array is the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> React<span class=\"token punctuation\">.</span>Dispatch<span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>SetStateAction<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">>></span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>So the first element, assigned to <em>newNote</em> is a string and the second element that we assigned <em>setNewNote</em> has a slightly more complex type. We notice that there is a string mentioned there, so we know that it must be the type of a function that sets a valued data. See <a href=\"https://codewithstyle.info/Using-React-useState-hook-with-TypeScript/\">here</a> if you want to learn more about the types of useState function.</p>\n<p>From this all we see that TypeScript has indeed <a href=\"https://www.typescriptlang.org/docs/handbook/type-inference.html#handbook-content\">inferred</a> the type of the first useState quite right, it is creating a state with type string.</p>\n<p>When we look at the second useState that has the initial value <em>[]</em> the type looks quite different</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">never</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>initialState<span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> \n  <span class=\"token punctuation\">[</span><span class=\"token builtin\">never</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> React<span class=\"token punctuation\">.</span>Dispatch<span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>SetStateAction<span class=\"token operator\">&lt;</span><span class=\"token builtin\">never</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">>></span><span class=\"token punctuation\">]</span> </code></pre></div>\n<p>TypeScript can just infer that the state has type <em>never[]</em>, it is an array but it has no clue what are the elements stored to array, so we clearly need to help the compiler and provide the type explicitly.</p>\n<p>One of the best sources for information about typing React is the <a href=\"https://react-typescript-cheatsheet.netlify.app/\">React TypeScript Cheatsheet</a>. The Cheatsheet chapter about <a href=\"https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/hooks#usestate\">useState</a> hook instructs to use a <em>type parameter</em> in situations where the compiler can not infer the type.</p>\n<p>Let us now define a type for notes:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Note</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> string\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The solution is now simple:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>Note<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And indeed, the type is set quite right:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Note<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>initialState<span class=\"token operator\">:</span> Note<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Note<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n  <span class=\"token punctuation\">[</span>Note<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> React<span class=\"token punctuation\">.</span>Dispatch<span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>SetStateAction<span class=\"token operator\">&lt;</span>Note<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">>></span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>So in technical terms useState is <a href=\"https://www.typescriptlang.org/docs/handbook/2/generics.html#working-with-generic-type-variables\">a generic function</a>, where the type has to be specified as a <em>type parameter</em> in those cases when the compiler can not infer the type.</p>\n<p>Rendering the notes is now easy. Let us just add some data to the state so that we can see that the code works:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Note</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> string\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>Note<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'testing'</span> <span class=\"token punctuation\">}</span></span>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newNote<span class=\"token punctuation\">,</span> setNewNote<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">{</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span>  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The next task is to add a form that makes it possible to create new notes:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>Note<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'testing'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newNote<span class=\"token punctuation\">,</span> setNewNote<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>form<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>input</span><span class=\"gatsby-highlight-code-line\">          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newNote<span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setNewNote</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> </span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">'submit'</span><span class=\"token operator\">></span>add<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span></span>      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span>\n          <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It just works, there are no complaints about types! When we hover over the <em>event.target.value</em>, we see that it is indeed a string, just what is the expected parameter of the <em>setNewNote</em>:</p>\n<picture><img src=\"/static/4fdba6e7d5c786ad025c244f4e0de32d/5a190/67new.png\" alt=\"vscode showing variable is a string\" srcset=\"/static/4fdba6e7d5c786ad025c244f4e0de32d/772e8/67new.png 200w,\n/static/4fdba6e7d5c786ad025c244f4e0de32d/e17e5/67new.png 400w,\n/static/4fdba6e7d5c786ad025c244f4e0de32d/5a190/67new.png 800w,\n/static/4fdba6e7d5c786ad025c244f4e0de32d/c1b63/67new.png 1200w,\n/static/4fdba6e7d5c786ad025c244f4e0de32d/29007/67new.png 1600w,\n/static/4fdba6e7d5c786ad025c244f4e0de32d/7575b/67new.png 1608w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>So we still need the event handler for adding the new note. Let us try the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noteCreation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// ...</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>noteCreation<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span>        <span class=\"token operator\">&lt;</span>input\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newNote<span class=\"token punctuation\">}</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setNewNote</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> \n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">'submit'</span><span class=\"token operator\">></span>add<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It does not quite work, there is an Eslint error complaining about implicit any:</p>\n<picture><img src=\"/static/7cb6e7a71c22b0be70202fcfde55bc27/5a190/68new.png\" alt=\"vscode error event implicitly has any type\" srcset=\"/static/7cb6e7a71c22b0be70202fcfde55bc27/772e8/68new.png 200w,\n/static/7cb6e7a71c22b0be70202fcfde55bc27/e17e5/68new.png 400w,\n/static/7cb6e7a71c22b0be70202fcfde55bc27/5a190/68new.png 800w,\n/static/7cb6e7a71c22b0be70202fcfde55bc27/c1b63/68new.png 1200w,\n/static/7cb6e7a71c22b0be70202fcfde55bc27/f3abf/68new.png 1474w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>TypeScript compiler has now no clue what is the type of the parameter, so that is why the type is the infamous implicit any that we want to <a href=\"/en/part9/first_steps_with_type_script#the-horrors-of-any\">avoid</a> at all costs. The React TypeScript cheatsheet comes again to rescue, the chapter about\n<a href=\"https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forms_and_events\">forms and events</a> reveals that the right type of event handler is <em>React.SyntheticEvent</em>.</p>\n<p>The code becomes</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Note</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> string\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>Note<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newNote<span class=\"token punctuation\">,</span> setNewNote<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noteCreation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">event</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>SyntheticEvent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> noteToAdd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> newNote<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> notes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>noteToAdd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setNewNote</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>noteCreation<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newNote<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setNewNote</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">'submit'</span><span class=\"token operator\">></span>add<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span>\n          <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And that's it, our app is ready and perfectly typed!</p>\n<h3>Communicating with the server</h3>\n<p>Let us modify the app so that the notes are saved in a JSON server backend in url <a href=\"http://localhost:3001/notes\">http://localhost:3001/notes</a></p>\n<p>As usual, we shall use Axios and the useEffect hook to fetch the initial state from the server.</p>\n<p>Let us try the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When we hover over the <em>response.data</em> we see that it has the type <em>any</em></p>\n<picture><img src=\"/static/488153d6372ff75a85762f13167f9799/5a190/69new.png\" alt=\"vscode response.data showing the any type\" srcset=\"/static/488153d6372ff75a85762f13167f9799/772e8/69new.png 200w,\n/static/488153d6372ff75a85762f13167f9799/e17e5/69new.png 400w,\n/static/488153d6372ff75a85762f13167f9799/5a190/69new.png 800w,\n/static/488153d6372ff75a85762f13167f9799/c1b63/69new.png 1200w,\n/static/488153d6372ff75a85762f13167f9799/c65fa/69new.png 1434w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>To set the data to the state with function <em>setNotes</em> we must type it properly.</p>\n<p>With a little <a href=\"https://upmostly.com/typescript/how-to-use-axios-in-your-typescript-apps\">help from internet</a>, we find a clever trick:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    axios<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span>Note<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>When we hover over the response.data we see that it has the correct type:</p>\n<picture><img src=\"/static/bc2a8094056cabe60f27acd219a0c199/5a190/70new.png\" alt=\"vscode showing response.data has Note array type\" srcset=\"/static/bc2a8094056cabe60f27acd219a0c199/772e8/70new.png 200w,\n/static/bc2a8094056cabe60f27acd219a0c199/e17e5/70new.png 400w,\n/static/bc2a8094056cabe60f27acd219a0c199/5a190/70new.png 800w,\n/static/bc2a8094056cabe60f27acd219a0c199/c1b63/70new.png 1200w,\n/static/bc2a8094056cabe60f27acd219a0c199/e8e04/70new.png 1270w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>We can now set the data in the state <em>notes</em> to get the code working:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    axios<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span>Note<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>So just like with <em>useState</em>, we gave a type parameter to <em>axios.get</em> to instruct it on how the typing should be done. Just like <em>useState</em> also <em>axios.get</em> is a <a href=\"https://www.typescriptlang.org/docs/handbook/2/generics.html#working-with-generic-type-variables\">generic function</a>. Unlike some generic functions, the type parameter of <em>axios.get</em> has a default value of <em>any</em> so, if the function is used without defining the type parameter, the type of the response data will be any.</p>\n<p>The code works, compiler and Eslint are happy and remain quiet. However, giving a type parameter to <em>axios.get</em> is a potentially dangerous thing to do. The response body can contain data in an arbitrary form, and when giving a type parameter we are essentially just telling to TypeScript compiler to trust us that the data has type <em>Note[]</em>.</p>\n<p>So our code is essentially as safe as it would be if a <a href=\"/en/part9/first_steps_with_type_script#type-assertion\">type assertion</a> would be used:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// response.body is of type any</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">as</span> Note<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Since the TypeScript types do not even exist in runtime, our code does not give us any \"safety\" against situations where the request body contains data in a wrong form.</p>\n<p>Giving a type parameter to <em>axios.get</em> might be ok if we are <em>absolutely sure</em> that the backend behaves correctly and returns always the data in the correct form. If we want to build a robust system we should prepare for surprises and parse the response data in the frontend, similarly to what we did <a href=\"/en/part9/typing_an_express_app#proofing-requests\">in the previous section</a> for the requests to the backend.</p>\n<p>Let us now wrap up our app by implementing the new note addition:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noteCreation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">event</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>SyntheticEvent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">    axios<span class=\"token punctuation\">.</span>post<span class=\"token operator\">&lt;</span>Note<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> newNote <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n    <span class=\"token function\">setNewNote</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We are again giving <em>axios.post</em> a type parameter. We know that the server response is the added note, so the proper type parameter is <em>Note</em>.</p>\n<p>Let us clean up the code a bit. For the type definitions, we create a file <em>types.ts</em> with the following content:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Note</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> string\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> type NewNote <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>Note<span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span><span class=\"token operator\">></span></code></pre></div>\n<p>We have added a new type for a <em>new note</em>, one that does not yet have the <em>id</em> field assigned.</p>\n<p>The code that communicates with the backend is also extracted to a module in the file <em>noteService.ts</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Note<span class=\"token punctuation\">,</span> NewNote <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./types\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> baseUrl <span class=\"token operator\">=</span> <span class=\"token string\">'http://localhost:3001/notes'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAllNotes</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> axios\n    <span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span>Note<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createNote</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">object</span><span class=\"token operator\">:</span> NewNote</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> axios\n    <span class=\"token punctuation\">.</span>post<span class=\"token operator\">&lt;</span>Note<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The component <em>App</em> is now much cleaner:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Note <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./types\"</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getAllNotes<span class=\"token punctuation\">,</span> createNote <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./noteService'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>Note<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newNote<span class=\"token punctuation\">,</span> setNewNote<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">getAllNotes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noteCreation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">event</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>SyntheticEvent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">createNote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> newNote <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n    <span class=\"token function\">setNewNote</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The app is now nicely typed and ready for further development!</p>\n<p>The code of the typed notes can be found <a href=\"https://github.com/fullstack-hy2020/typed-notes\">here</a>.</p>\n<h3>A note about defining object types</h3>\n<p>We have used <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#interfaces\">interfaces</a> to define object types, e.g. diary entries, in the previous section</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">DiaryEntry</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">weather</span><span class=\"token operator\">:</span> Weather<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">visibility</span><span class=\"token operator\">:</span> Visibility<span class=\"token punctuation\">;</span>\n  comment<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n<p>and in the course part of this section</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">CoursePartBase</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">exerciseCount</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We actually could have had the same effect by using a <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-aliases\">type alias</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type DiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">weather</span><span class=\"token operator\">:</span> Weather<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">visibility</span><span class=\"token operator\">:</span> Visibility<span class=\"token punctuation\">;</span>\n  comment<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n<p>In most cases, you can use either <em>type</em> or <em>interface</em>, whichever syntax you prefer. However, there are a few things to keep in mind.\nFor example, if you define multiple interfaces with the same name, they will result in a merged interface, whereas if you try to define multiple types with the same name, it will result in an error stating that a type with the same name is already declared.</p>\n<p>TypeScript documentation <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces\">recommends using interfaces</a> in most cases.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 9.16-9.19</h3>\n<p>Let us now build a frontend for the Ilari's flight diaries that was developed in <a href=\"/en/part9/typing_an_express_app\">the previous section</a>. The source code of the backend can be found in <a href=\"https://github.com/fullstack-hy2020/flight-diary\">this GitHub repository</a>.</p>\n<h4>Exercise 9.16</h4>\n<p>Create a TypeScript React app with similar configurations as the apps of this section. Fetch the diaries from the backend and render those to screen. Do all the required typing and ensure that there are no Eslint errors.</p>\n<p>Remember to keep the network tab open. It might give you a valuable hint...</p>\n<p>You can decide how the diary entries are rendered. If you wish, you may take inspiration from the figure below. Note that the backend API does not return the diary comments, you may modify it to return also those on a GET request.</p>\n<h4>Exercise 9.17</h4>\n<p>Make it possible to add new diary entries from the frontend. In this exercise you may skip all validations and assume that the user just enters the data in a correct form.</p>\n<h4>Exercise 9.18</h4>\n<p>Notify the user if the the creation of a diary entry fails in the backend, show also the reason for the failure.</p>\n<p>See eg. <a href=\"https://dev.to/mdmostafizurrahaman/handle-axios-error-in-typescript-4mf9\">this</a> to see how you can narrow the Axios error so that you can get hold of the error message.</p>\n<p>Your solution may look like this:</p>\n<picture><img src=\"/static/f036ca43fc9598f7cd51fa4482c3bd6e/5a190/71new.png\" alt=\"browser showing error incorrect visibility best ever\" srcset=\"/static/f036ca43fc9598f7cd51fa4482c3bd6e/772e8/71new.png 200w,\n/static/f036ca43fc9598f7cd51fa4482c3bd6e/e17e5/71new.png 400w,\n/static/f036ca43fc9598f7cd51fa4482c3bd6e/5a190/71new.png 800w,\n/static/f036ca43fc9598f7cd51fa4482c3bd6e/c1b63/71new.png 1200w,\n/static/f036ca43fc9598f7cd51fa4482c3bd6e/913a1/71new.png 1476w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>Exercise 9.19</h4>\n<p>Addition of a diary entry is now very error prone since user can type anything to the input fields. The situation must be improved.</p>\n<p>Modify the input form so that the date is set with a HTML <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date\">date</a> input element, and the weather and visibility are set with HTML <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio\">radio buttons</a>. We have already used radio buttons in <a href=\"/en/part6/many_reducers#store-with-complex-state\">part 6</a>, that material may or may not be useful...</p>\n<p>Your app should all the time stay well typed and there should not be any Eslint errors and no Eslint rules should be ignored.</p>\n<p>Your solution could look like this:</p>\n<picture><img src=\"/static/0a768e12adf75afb3c347d4a1f9384ab/5a190/72new.png\" alt=\"browser showing add new entry form for diaries\" srcset=\"/static/0a768e12adf75afb3c347d4a1f9384ab/772e8/72new.png 200w,\n/static/0a768e12adf75afb3c347d4a1f9384ab/e17e5/72new.png 400w,\n/static/0a768e12adf75afb3c347d4a1f9384ab/5a190/72new.png 800w,\n/static/0a768e12adf75afb3c347d4a1f9384ab/c1b63/72new.png 1200w,\n/static/0a768e12adf75afb3c347d4a1f9384ab/85e74/72new.png 1436w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/ed8ae98c5d885b4d1928a681eefbe7c4/part-9.svg"},"part":9,"letter":"d","lang":"en"}}},"pageContext":{"part":9,"letter":"d","lang":"en"}},"staticQueryHashes":["3128451518"]}
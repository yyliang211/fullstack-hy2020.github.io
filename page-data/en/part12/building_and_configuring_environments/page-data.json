{"componentChunkName":"component---src-templates-content-template-js","path":"/en/part12/building_and_configuring_environments","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n</div>\n<div class=\"tasks\">\n<p>The part was updated 21th Mar 2024: Create react app was replaced with Vite in the todo-frontend.</p>\n<p>If you started the part before the update, you can see <a href=\"https://github.com/fullstack-hy2020/fullstack-hy2020.github.io/tree/4015af9dddb61cb01f013456d8728e8f553be347/src/content/12\">here</a> the old material. There are some changes in the frontend configurations.</p>\n</div>\n<div class=\"content\">\n<p>In the previous section, we used two different base images: ubuntu and node and did some manual work to get a simple \"Hello, World!\" running. The tools and commands we learned during that process will be helpful. In this section, we will learn how to build images and configure environments for our applications. We will start with a regular Express/Node.js backend and build on top of that with other services, including a MongoDB database.</p>\n<h3>Dockerfile</h3>\n<p>Instead of modifying a container by copying files inside, we can create a new image that contains the \"Hello, World!\" application. The tool for this is the Dockerfile. Dockerfile is a simple text file that contains all of the instructions for creating an image. Let's create an example Dockerfile from the \"Hello, World!\" application.</p>\n<p>If you did not already, create a directory on your machine and create a file called <i>Dockerfile</i> inside that directory. Let's also put an <i>index.js</i> containing <em>console.log('Hello, World!')</em> next to the Dockerfile. Your directory structure should look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">├── index.js\n└── Dockerfile</code></pre></div>\n<p>inside that Dockerfile we will tell the image three things:</p>\n<ul>\n<li>Use the <a href=\"https://hub.docker.com/_/node\">node:20</a> as the base for our image</li>\n<li>Include the index.js inside the image, so we don't need to manually copy it into the container</li>\n<li>When we run a container from the image, use Node to execute the index.js file.</li>\n</ul>\n<p>The wishes above will translate into a basic Dockerfile. The best location to place this file is usually at the root of the project. </p>\n<p>The resulting <i>Dockerfile</i> looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> node:20</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /usr/src/app</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> ./index.js ./index.js</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> node index.js</span></code></pre></div>\n<p>FROM instruction will tell Docker that the base for the image should be node:20. COPY instruction will copy the file <i>index.js</i> from the host machine to the file with the same name in the image. CMD instruction tells what happens when <em>docker run</em> is used. CMD is the default command that can then be overwritten with the parameter given after the image name. See <em>docker run --help</em> if you forgot.</p>\n<p>The WORKDIR instruction was slipped in to ensure we don't interfere with the contents of the image. It will guarantee all of the following commands will have <i>/usr/src/app</i> set as the working directory. If the directory doesn't exist in the base image, it will be automatically created.</p>\n<p>If we do not specify a WORKDIR, we risk overwriting important files by accident. If you check the root (<em>/</em>) of the node:20 image with <em>docker run node:20 ls</em>, you can notice all of the directories and files that are already included in the image.</p>\n<p>Now we can use the command <em>docker build</em> to build an image based on the Dockerfile. Let's spice up the command with one additional flag: <em>-t</em>, this will help us name the image:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> fs-hello-world <span class=\"token builtin class-name\">.</span> \n<span class=\"token punctuation\">[</span>+<span class=\"token punctuation\">]</span> Building <span class=\"token number\">3</span>.9s <span class=\"token punctuation\">(</span><span class=\"token number\">8</span>/8<span class=\"token punctuation\">)</span> FINISHED\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>So the result is \"Docker please build with tag (you may think the tag to be the name of the resulting image) <i>fs-hello-world</i> the Dockerfile in this directory\". You can point to any Dockerfile, but in our case, a simple dot will mean the Dockerfile in <i>this</i> directory. That is why the command ends with a period. After the build is finished, you can run it with <em>docker run fs-hello-world</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> run fs-hello-world\nHello, World</code></pre></div>\n<p>As images are just files, they can be moved around, downloaded and deleted. You can list the images you have locally with <em>docker image ls</em>, delete them with <em>docker image rm</em>. See what other command you have available with <em>docker image --help</em>.</p>\n<p>One more thing: in above it was mentioned that the default command, defined by the CMD in the Dockerfile, can be overridden if needed. We could e.g. open a bash session to the container and observe it's content: </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> fs-hello-world <span class=\"token function\">bash</span>\nroot@2932e32dbc09:/usr/src/app<span class=\"token comment\"># ls</span>\nindex.js\nroot@2932e32dbc09:/usr/src/app<span class=\"token comment\">#</span></code></pre></div>\n<h3>More meaningful image</h3>\n<p>Moving an Express server to a container should be as simple as moving the \"Hello, World!\" application inside a container. The only difference is that there are more files. Thankfully <em>COPY</em> instruction can handle all that. Let's delete the index.js and create a new Express server. Lets use <a href=\"https://expressjs.com/en/starter/generator.html\">express-generator</a> to create a basic Express application skeleton.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx express-generator\n  <span class=\"token punctuation\">..</span>.\n  \n  <span class=\"token function\">install</span> dependencies:\n    $ <span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n\n  run the app:\n    $ <span class=\"token assign-left variable\">DEBUG</span><span class=\"token operator\">=</span>playground:* <span class=\"token function\">npm</span> start</code></pre></div>\n<p>First, let's run the application to get an idea of what we just created. Note that the command to run the application may be different from you, my directory was called playground.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n$ <span class=\"token assign-left variable\">DEBUG</span><span class=\"token operator\">=</span>playground:* <span class=\"token function\">npm</span> start\n  playground:server Listening on port <span class=\"token number\">3000</span> +0ms</code></pre></div>\n<p>Great, so now we can navigate to <a href=\"http://localhost:3000\">http://localhost:3000</a> and the app is running there.</p>\n<p>Containerizing that should be relatively easy based on the previous example.</p>\n<ul>\n<li>Use node as base</li>\n<li>Set working directory so we don't interfere with the contents of the base image</li>\n<li>Copy ALL of the files in this directory to the image</li>\n<li>Start with DEBUG=playground:* npm start</li>\n</ul>\n<p>Let's place the following Dockerfile at the root of the project:</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> node:20</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /usr/src/app</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> . .</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> DEBUG=playground:* npm start</span></code></pre></div>\n<p>Let's build the image from the Dockerfile and then run it:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> express-server <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-p</span> <span class=\"token number\">3123</span>:3000 express-server</code></pre></div>\n<p>The <em>-p</em> flag in the run command will inform Docker that a port from the host machine should be opened and directed to a port in the container. The format for is <em>-p host-port:application-port</em>.</p>\n<p>The application is now running! Let's test it by sending a GET request to <a href=\"http://localhost:3123/\">http://localhost:3123/</a>.</p>\n<blockquote>\n<p>If yours doesn't work, skip to the next section. There is an explanation why it may not work even if you followed the steps correctly.</p>\n</blockquote>\n<p>Shutting the app down is a headache at the moment. Use another terminal and <em>docker kill</em> command to kill the application. The <em>docker kill</em> will send a kill signal (SIGKILL) to the application to force it to shut down. It needs the name or the id of the container as an argument.</p>\n<p>By the way, when using the id as the argument, the beginning of the ID is enough for Docker to know which container we mean.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> container <span class=\"token function\">ls</span>\n  CONTAINER ID   IMAGE            COMMAND                  CREATED         STATUS         PORTS                                       NAMES\n  48096ca3ffec   express-server   <span class=\"token string\">\"docker-entrypoint.s…\"</span>   <span class=\"token number\">9</span> seconds ago   Up <span class=\"token number\">6</span> seconds   <span class=\"token number\">0.0</span>.0.0:3123-<span class=\"token operator\">></span><span class=\"token number\">3000</span>/tcp, :::3123-<span class=\"token operator\">></span><span class=\"token number\">3000</span>/tcp   infallible_booth\n\n$ <span class=\"token function\">docker</span> <span class=\"token function\">kill</span> <span class=\"token number\">48</span>\n  <span class=\"token number\">48</span></code></pre></div>\n<p>In the future, let's use the same port on both sides of <em>-p</em>. Just so we don't have to remember which one we happened to choose.</p>\n<h4>Fixing potential issues we created by copy-pasting</h4>\n<p>There are a few steps we need to change to create a more comprehensive Dockerfile. It may even be that the above example doesn't work in all cases because we skipped an important step.</p>\n<p>When we ran npm install on our machine, in some cases the <strong>Node package manager</strong> may install operating system specific dependencies during the install step. We may accidentally move non-functional parts to the image with the COPY instruction. This can easily happen if we copy the <i>node_modules</i> directory into the image.</p>\n<p>This is a critical thing to keep in mind when we build our images. It's best to do most things, such as to run <em>npm install</em> during the build process <i>inside the container</i> rather than doing those prior to building. The easy rule of thumb is to only copy files that you would push to GitHub. Build artefacts or dependencies should not be copied since those can be installed during the build process.</p>\n<p>We can use <i>.dockerignore</i> to solve the problem. The file .dockerignore is very similar to .gitignore, you can use that to prevent unwanted files from being copied to your image. The file should be placed next to the Dockerfile. Here is a possible content of a <i>.dockerignore</i></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.dockerignore\n.gitignore\nnode_modules\nDockerfile</code></pre></div>\n<p>However, in our case, the .dockerignore isn't the only thing required. We will need to install the dependencies during the build step. The <em>Dockerfile</em> changes to:</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> node:20</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /usr/src/app</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> . .</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token instruction\"><span class=\"token keyword\">RUN</span> npm install</span>\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> DEBUG=playground:* npm start</span></code></pre></div>\n<p>The npm install can be risky. Instead of using npm install, npm offers a much better tool for installing dependencies, the <em>ci</em> command.</p>\n<p>Differences between ci and install:</p>\n<ul>\n<li>install may update the package-lock.json</li>\n<li>install may install a different version of a dependency if you have ^ or ~ in the version of the dependency.</li>\n<li>ci will delete the node_modules folder before installing anything</li>\n<li>ci will follow the package-lock.json and does not alter any files</li>\n</ul>\n<p>So in short: <em>ci</em> creates reliable builds, while <em>install</em> is the one to use when you want to install new dependencies.</p>\n<p>As we are not installing anything new during the build step, and we don't want the versions to suddenly change, we will use <em>ci</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> node:20</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /usr/src/app</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> . .</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token instruction\"><span class=\"token keyword\">RUN</span> npm ci</span>\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> DEBUG=playground:* npm start</span></code></pre></div>\n<p>Even better, we can use <em>npm ci --omit=dev</em> to not waste time installing development dependencies.</p>\n<blockquote>\n<p>As you noticed in the comparison list; npm ci will delete the node_modules folder so creating the .dockerignore did not matter. However, .dockerignore is an amazing tool when you want to optimize your build process. We will talk briefly about these optimizations later.</p>\n</blockquote>\n<p>Now the Dockerfile should work again, try it with <em>docker build -t express-server . &#x26;&#x26; docker run -p 3123:3000 express-server</em></p>\n<blockquote>\n<p>Note that we are here chaining two bash commands with &#x26;&#x26;. We could get (nearly) the same effect by running both commands separately. When chaining commands with &#x26;&#x26; if one command fails, the next ones in the chain will not be executed.</p>\n</blockquote>\n<p>We set an environment variable <em>DEBUG=playground:*</em> during CMD for the npm start. However, with Dockerfiles we could also use the instruction ENV to set environment variables. Let's do that:</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> node:20</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /usr/src/app</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> . .</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> npm ci </span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token instruction\"><span class=\"token keyword\">ENV</span> DEBUG=playground:*</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token instruction\"><span class=\"token keyword\">CMD</span> npm start</span></code></pre></div>\n<blockquote>\n<p><i>If you're wondering what the DEBUG environment variable does, read <a href=\"http://expressjs.com/en/guide/debugging.html#debugging-express\">here</a>.</i></p>\n</blockquote>\n<h4>Dockerfile best practices</h4>\n<p>There are 2 rules of thumb you should follow when creating images:</p>\n<ul>\n<li>Try to create as <strong>secure</strong> of an image as possible</li>\n<li>Try to create as <strong>small</strong> of an image as possible</li>\n</ul>\n<p>Smaller images are more secure by having less attack surface area, and smaller images also move faster in deployment pipelines.</p>\n<p>Snyk has a great list of 10 best practices for Node/Express containerization. Read those <a href=\"https://snyk.io/blog/10-best-practices-to-containerize-nodejs-web-applications-with-docker/\">here</a>.</p>\n<p>One big carelessness we have left is running the application as root instead of using a user with lower privileges. Let's do a final fix to the Dockerfile:</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> node:20</span>\n  \n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /usr/src/app</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token instruction\"><span class=\"token keyword\">COPY</span> <span class=\"token options\"><span class=\"token property\">--chown</span><span class=\"token punctuation\">=</span><span class=\"token string\">node:node</span></span> . .</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> npm ci </span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> DEBUG=playground:*</span>\n  \n<span class=\"gatsby-highlight-code-line\"><span class=\"token instruction\"><span class=\"token keyword\">USER</span> node</span>\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> npm start</span></code></pre></div>\n</div>\n  \n<div class=\"tasks\">\n<h3>Exercise 12.5.</h3>\n<h4>Exercise 12.5: Containerizing a Node application</h4>\n<p>The repository you cloned or copied in the <a href=\"/en/part12/introduction_to_containers#exercise-12-1\">first exercise</a> contains a todo-app. See the todo-app/todo-backend and read through the README. We will not touch the todo-frontend yet.</p>\n<ul>\n<li>Step 1. Containerize the todo-backend by creating a <i>todo-app/todo-backend/Dockerfile</i> and building an image.</li>\n<li>Step 2. Run the todo-backend image with the correct ports open. Make sure the visit counter increases when used through a browser in <a href=\"http://localhost:3000/\">http://localhost:3000/</a> (or some other port if you configure so)</li>\n</ul>\n<p>Tip: Run the application outside of a container to examine it before starting to containerize.</p>\n</div>\n  \n<div class=\"content\">\n<h3>Using Docker compose</h3>\n<p>In the previous section, we created an Express server and knew that it runs in port 3000, and ran it with <em>docker build -t express-server . &#x26;&#x26; docker run -p 3000:3000 express-server</em>. This already looks like something you would need to put into a script to remember. Fortunately, Docker offers us a better solution.</p>\n<p><a href=\"https://docs.docker.com/compose/\">Docker compose</a> is another fantastic tool, which can help us to manage containers. Let's start using compose as we learn more about containers as it will help us save some time with the configuration.</p>\n<p>Now we can turn the previous spell into a yaml file. The best part about yaml files is that you can save these to a Git repository!</p>\n<p>Create the file <strong>docker-compose.yml</strong> and place it at the root of the project, next to the Dockerfile. The file content is</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.8'</span>            <span class=\"token comment\"># Version 3.8 is quite new and should work</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span>                    <span class=\"token comment\"># The name of the service, can be anything</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> express<span class=\"token punctuation\">-</span>server <span class=\"token comment\"># Declares which image to use</span>\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> .              <span class=\"token comment\"># Declares where to build if image is not found</span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>                <span class=\"token comment\"># Declares the ports to publish</span>\n      <span class=\"token punctuation\">-</span> 3000<span class=\"token punctuation\">:</span><span class=\"token number\">3000</span></code></pre></div>\n<p>The meaning of each line is explained as a comment. If you want to see the full specification see the <a href=\"https://docs.docker.com/compose/compose-file/compose-file-v3/\">documentation</a>.</p>\n<p>Now we can use <em>docker compose up</em> to build and run the application. If we want to rebuild the images we can use <em>docker compose up --build</em>.</p>\n<p>You can also run the application in the background with <em>docker compose up -d</em> (<em>-d</em> for detached) and close it with <em>docker compose down</em>.</p>\n<blockquote>\n<p><i>Note that some older Docker versions (especially in Windows ) do not support the  command <em>docker compose</em>. One way to circumvent this problem is to <a href=\"https://docs.docker.com/compose/install/\">install</a> the stand alone command <em>docker-compose</em> that works mostly similarly to <em>docker compose</em>. However, the preferable fix is to update the Docker to a more recent version.</i></p>\n</blockquote>\n<p>Creating files like <em>docker-compose.yml</em> that <i>declare</i> what you want instead of script files that you need to run in a specific order / a specific number of times is often a great practice.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercise 12.6.</h3>\n<h4>Exercise 12.6: Docker compose</h4>\n<p>Create a <i>todo-app/todo-backend/docker-compose.yml</i> file that works with the Node application from the previous exercise.</p>\n<p>The visit counter is the only feature that is required to be working.</p>\n</div>\n<div class=\"content\">\n<h3>Utilizing containers in development</h3>\n<p>When you are developing software, containerization can be used in various ways to improve your quality of life. One of the most useful cases is by bypassing the need to install and configure tools twice.</p>\n<p>It may not be the best option to move your entire development environment into a container, but if that's what you want it's certainly possible. We will revisit this idea at the end of this part. But until then, <i>run the Node application itself outside of containers</i>.</p>\n<p>The application we met in the previous exercises uses MongoDB. Let's explore <a href=\"https://hub.docker.com/\">Docker Hub</a> to find a MongoDB image. Docker Hub is the default place where Docker pulls the images from, you can use other registries as well, but since we are already knee-deep in Docker it's a good choice. With a quick search, we can find <a href=\"https://hub.docker.com/_/mongo\">https://hub.docker.com/_/mongo</a></p>\n<p>Create a new yaml called <i>todo-app/todo-backend/docker-compose.dev.yml</i> that looks like following:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.8'</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">mongo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mongo\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> 3456<span class=\"token punctuation\">:</span><span class=\"token number\">27017</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">MONGO_INITDB_ROOT_USERNAME</span><span class=\"token punctuation\">:</span> root\n      <span class=\"token key atrule\">MONGO_INITDB_ROOT_PASSWORD</span><span class=\"token punctuation\">:</span> example\n      <span class=\"token key atrule\">MONGO_INITDB_DATABASE</span><span class=\"token punctuation\">:</span> the_database</code></pre></div>\n<p>The meaning of the two first environment variables defined above is explained on the Docker Hub page:</p>\n<blockquote>\n<p><i>These variables, used in conjunction, create a new user and set that user's password. This user is created in the admin authentication database and given the role of root, which is a \"superuser\" role.</i></p>\n</blockquote>\n<p>The last environment variable <em>MONGO_INITDB_DATABASE</em> will tell MongoDB to create a database with that name. </p>\n<p>You can use <em>-f</em> flag to specify a <i>file</i> to run the Docker Compose command with e.g.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> compose <span class=\"token parameter variable\">-f</span> docker-compose.dev.yml up</code></pre></div>\n<p>Now that we may have multiple compose files, it's useful.</p>\n<p>Now start the MongoDB with <em>docker compose -f docker-compose.dev.yml up -d</em>. With <em>-d</em> it will run it in the background. You can view the output logs with <em>docker compose -f docker-compose.dev.yml logs -f</em>. There the <em>-f</em> will ensure we <i>follow</i> the logs.</p>\n<p>As said previously, currently we <strong>do not</strong> want to run the Node application inside a container. Developing while the application itself is inside a container is a challenge. We will explore that option later in this part.</p>\n<p>Run the good old <em>npm install</em> first on your machine to set up the Node application. Then start the application with the relevant environment variable. You can modify the code to set them as the defaults or use the .env file. There is no hurt in putting these keys to GitHub since they are only used in your local development environment. I'll just throw them in with the <em>npm run dev</em> to help you copy-paste.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">MONGO_URL</span><span class=\"token operator\">=</span>mongodb://localhost:3456/the_database <span class=\"token function\">npm</span> run dev</code></pre></div>\n<p>This won't be enough; we need to create a user to be authorized inside of the container. The url <a href=\"http://localhost:3000/todos\">http://localhost:3000/todos</a> leads to an authentication error:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> <span class=\"token number\">2.0</span>.12\n<span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> to restart at any time, enter <span class=\"token variable\"><span class=\"token variable\">`</span>rs<span class=\"token variable\">`</span></span>\n<span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> watching path<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>: *.*\n<span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> watching extensions: js,mjs,json\n<span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> starting <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">node</span> ./bin/www<span class=\"token variable\">`</span></span>\n/Users/mluukkai/dev/fs-ci-lokakuu/repo/todo-app/todo-backend/node_modules/mongodb/lib/cmap/connection.js:272\n          callback<span class=\"token punctuation\">(</span>new MongoError<span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n                   ^\nMongoError: <span class=\"token builtin class-name\">command</span> <span class=\"token function\">find</span> requires authentication\n    at MessageStream.messageHandler <span class=\"token punctuation\">(</span>/Users/mluukkai/dev/fs-ci-lokakuu/repo/todo-app/todo-backend/node_modules/mongodb/lib/cmap/connection.js:272:20<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Bind mount and initializing the database</h3>\n<p>In the <a href=\"https://hub.docker.com/_/mongo\">MongoDB Docker Hub</a> page under \"Initializing a fresh instance\" is the info on how to execute JavaScript to initialize the database and a user for it.</p>\n<p>The exercise project has a file <i>todo-app/todo-backend/mongo/mongo-init.js</i> with contents:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">db<span class=\"token punctuation\">.</span><span class=\"token function\">createUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token string\">'the_username'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">pwd</span><span class=\"token operator\">:</span> <span class=\"token string\">'the_password'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">roles</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">role</span><span class=\"token operator\">:</span> <span class=\"token string\">'dbOwner'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">db</span><span class=\"token operator\">:</span> <span class=\"token string\">'the_database'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">createCollection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndb<span class=\"token punctuation\">.</span>todos<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">'Write code'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">done</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndb<span class=\"token punctuation\">.</span>todos<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">'Learn about containers'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">done</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This file will initialize the database with a user and a few todos. Next, we need to get it inside the container at startup.</p>\n<p>We could create a new image FROM mongo and COPY the file inside, or we can use a <a href=\"https://docs.docker.com/storage/bind-mounts/\">bind mount</a> to mount the file <i>mongo-init.js</i> to the container. Let's do the latter.</p>\n<p>Bind mount is the act of binding a file (or directory) on the host machine to a file (or directory) in the container. A bind mount is done by adding a <em>-v</em> flag with <em>container run</em>. The syntax is <em>-v FILE-IN-HOST:FILE-IN-CONTAINER</em>. Since we already learned about Docker Compose let's skip that. The bind mount is declared under key <i>volumes</i> in docker-compose-yml. Otherwise the format is the same, first host and then container:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\">  <span class=\"token key atrule\">mongo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mongo\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">-</span> 3456<span class=\"token punctuation\">:</span><span class=\"token number\">27017</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">MONGO_INITDB_ROOT_USERNAME</span><span class=\"token punctuation\">:</span> root\n      <span class=\"token key atrule\">MONGO_INITDB_ROOT_PASSWORD</span><span class=\"token punctuation\">:</span> example\n      <span class=\"token key atrule\">MONGO_INITDB_DATABASE</span><span class=\"token punctuation\">:</span> the_database\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span> </span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">-</span> ./mongo/mongo<span class=\"token punctuation\">-</span>init.js<span class=\"token punctuation\">:</span>/docker<span class=\"token punctuation\">-</span>entrypoint<span class=\"token punctuation\">-</span>initdb.d/mongo<span class=\"token punctuation\">-</span>init.js</span></code></pre></div>\n<p>The result of the bind mount is that the file <i>mongo-init.js</i> in the mongo folder of the host machine is the same as the <i>mongo-init.js</i> file in the container's /docker-entrypoint-initdb.d directory. Changes to either file will be available in the other. We don't need to make any changes during runtime. But this will be the key to software development in containers.</p>\n<p>Run <em>docker compose -f docker-compose.dev.yml down --volumes</em> to ensure that nothing is left and start from a clean slate with <em>docker compose -f docker-compose.dev.yml up</em> to initialize the database.</p>\n<p>If you see an error like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">mongo_database <span class=\"token operator\">|</span> failed to load: /docker-entrypoint-initdb.d/mongo-init.js\nmongo_database <span class=\"token operator\">|</span> exiting with code <span class=\"token parameter variable\">-3</span></code></pre></div>\n<p>you may have a read permission problem. They are not uncommon when dealing with volumes. In the above case, you can use <em>chmod a+r mongo-init.js</em>, which will give everyone read access to that file. Be careful when using <em>chmod</em> since granting more privileges can be a security issue. Use the <em>chmod</em> only on the mongo-init.js on your computer.</p>\n<p>Now starting the Express application with the correct environment variable should work:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">MONGO_URL</span><span class=\"token operator\">=</span>mongodb://the_username:the_password@localhost:3456/the_database <span class=\"token function\">npm</span> run dev</code></pre></div>\n<p>Let's check that the <a href=\"http://localhost:3000/todos\">http://localhost:3000/todos</a> returns the two todos we inserted in the initialization. We can and <i>should</i> use Postman to test the basic functionality of the app, such as adding or deleting a todo.</p>\n<h3>Still problems?</h3>\n<p>For some reason, the initialization of Mongo has caused problems for many.</p>\n<p>If the app does not work and you still end up with the following error</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">/Users/mluukkai/dev/fs-ci-lokakuu/repo/todo-app/todo-backend/node_modules/mongodb/lib/cmap/connection.js:272\n          callback<span class=\"token punctuation\">(</span>new MongoError<span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n                   ^\nMongoError: <span class=\"token builtin class-name\">command</span> <span class=\"token function\">find</span> requires authentication\n    at MessageStream.messageHandler <span class=\"token punctuation\">(</span>/Users/mluukkai/dev/fs-ci-lokakuu/repo/todo-app/todo-backend/node_modules/mongodb/lib/cmap/connection.js:272:20<span class=\"token punctuation\">)</span></code></pre></div>\n<p>run these commands:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> compose <span class=\"token parameter variable\">-f</span> docker-compose.dev.yml down <span class=\"token parameter variable\">--volumes</span>\n<span class=\"token function\">docker</span> image <span class=\"token function\">rm</span> mongo</code></pre></div>\n<p>After these, try to start Mongo again.</p>\n<p>If the problem persists, let us drop the idea of a volume altogether and copy the initialization script to a custom image. Create the following <i>Dockerfile</i> to the directory <i>todo-app/todo-backend/mongo</i></p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> mongo</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> ./mongo-init.js /docker-entrypoint-initdb.d/</span></code></pre></div>\n<p>Build it to an image with the command</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> initialized-mongo <span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>Change now the <i>docker-compose.dev.yml</i> to use the new image:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\">  <span class=\"token key atrule\">mongo</span><span class=\"token punctuation\">:</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> initialized<span class=\"token punctuation\">-</span>mongo</span>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">-</span> 3456<span class=\"token punctuation\">:</span><span class=\"token number\">27017</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">MONGO_INITDB_ROOT_USERNAME</span><span class=\"token punctuation\">:</span> root\n      <span class=\"token key atrule\">MONGO_INITDB_ROOT_PASSWORD</span><span class=\"token punctuation\">:</span> example\n      <span class=\"token key atrule\">MONGO_INITDB_DATABASE</span><span class=\"token punctuation\">:</span> the_database</code></pre></div>\n<p>Now the app should finally work.</p>\n<h3>Persisting data with volumes</h3>\n<p>By default, database containers are not going to preserve our data. When you close the database container you <i>may or may not</i> be able to get the data back.</p>\n<blockquote>\n<p>Mongo is actually a rare case in which the container indeed does preserve the data. This happens, since the developers who made the Docker image for Mongo have defined a volume to be used. <a href=\"https://github.com/docker-library/mongo/blob/cb8a419053858e510fc68ed2d69415b3e50011cb/4.4/Dockerfile#L113\">This line</a> in the Dockerfile will instruct Docker to preserve the data in a volume.</p>\n</blockquote>\n<p>There are two distinct methods to store the data: </p>\n<ul>\n<li>Declaring a location in your filesystem (called <a href=\"https://docs.docker.com/storage/bind-mounts/\">bind mount</a>)</li>\n<li>Letting Docker decide where to store the data (<a href=\"https://docs.docker.com/storage/volumes/\">volume</a>)</li>\n</ul>\n<p>The first choice is preferable in most cases whenever one <i>really</i> needs to avoid the data being deleted. </p>\n<p>Let's see both in action with Docker compose. Let us start with <i>bind mount:</i></p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">mongo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mongo\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">-</span> 3456<span class=\"token punctuation\">:</span><span class=\"token number\">27017</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">MONGO_INITDB_ROOT_USERNAME</span><span class=\"token punctuation\">:</span> root\n      <span class=\"token key atrule\">MONGO_INITDB_ROOT_PASSWORD</span><span class=\"token punctuation\">:</span> example\n      <span class=\"token key atrule\">MONGO_INITDB_DATABASE</span><span class=\"token punctuation\">:</span> the_database\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./mongo/mongo<span class=\"token punctuation\">-</span>init.js<span class=\"token punctuation\">:</span>/docker<span class=\"token punctuation\">-</span>entrypoint<span class=\"token punctuation\">-</span>initdb.d/mongo<span class=\"token punctuation\">-</span>init.js\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">-</span> ./mongo_data<span class=\"token punctuation\">:</span>/data/db</span></code></pre></div>\n<p>The above will create a directory called <em>mongo_data</em> to your local filesystem and map it into the container as <em>/data/db</em>. This means the data in <em>/data/db</em> is stored outside of the container but still accessible by the container! Just remember to add the directory to .gitignore.</p>\n<p>A similar outcome can be achieved with a <i>named volume:</i></p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">mongo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mongo\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">-</span> 3456<span class=\"token punctuation\">:</span><span class=\"token number\">27017</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">MONGO_INITDB_ROOT_USERNAME</span><span class=\"token punctuation\">:</span> root\n      <span class=\"token key atrule\">MONGO_INITDB_ROOT_PASSWORD</span><span class=\"token punctuation\">:</span> example\n      <span class=\"token key atrule\">MONGO_INITDB_DATABASE</span><span class=\"token punctuation\">:</span> the_database\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./mongo/mongo<span class=\"token punctuation\">-</span>init.js<span class=\"token punctuation\">:</span>/docker<span class=\"token punctuation\">-</span>entrypoint<span class=\"token punctuation\">-</span>initdb.d/mongo<span class=\"token punctuation\">-</span>init.js\n      <span class=\"token punctuation\">-</span> mongo_data<span class=\"token punctuation\">:</span>/data/db\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token key atrule\">mongo_data</span><span class=\"token punctuation\">:</span></span></code></pre></div>\n<p>Now the volume is created but managed by Docker. After starting the application (<em>docker compose -f docker-compose.dev.yml up</em>) you can list the volumes with <em>docker volume ls</em>, inspect one of them with <em>docker volume inspect</em> and even delete them with <em>docker volume rm</em>: </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> volume <span class=\"token function\">ls</span>\nDRIVER    VOLUME NAME\n<span class=\"token builtin class-name\">local</span>     todo-backend_mongo_data\n$ <span class=\"token function\">docker</span> volume inspect todo-backend_mongo_data\n<span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"CreatedAt\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2024-19-03T12:52:11Z\"</span>,\n        <span class=\"token string\">\"Driver\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"local\"</span>,\n        <span class=\"token string\">\"Labels\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"com.docker.compose.project\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"todo-backend\"</span>,\n            <span class=\"token string\">\"com.docker.compose.version\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1.29.2\"</span>,\n            <span class=\"token string\">\"com.docker.compose.volume\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"mongo_data\"</span>\n        <span class=\"token punctuation\">}</span>,\n        <span class=\"token string\">\"Mountpoint\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/var/lib/docker/volumes/todo-backend_mongo_data/_data\"</span>,\n        <span class=\"token string\">\"Name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"todo-backend_mongo_data\"</span>,\n        <span class=\"token string\">\"Options\"</span><span class=\"token builtin class-name\">:</span> null,\n        <span class=\"token string\">\"Scope\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"local\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>The named volume is still stored in your local filesystem but figuring out <i>where</i> may not be as trivial as with the previous option.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercise 12.7.</h3>\n<h4>Exercise 12.7: Little bit of MongoDB coding</h4>\n<p>Note that this exercise assumes that you have done all the configurations made in the material after exercise 12.5. You should still run the todo-app backend <i>outside a container</i>; just the MongoDB is containerized for now.</p>\n<p>The todo application has no proper implementation of routes for getting one todo (GET <i>/todos/:id</i>) and updating one todo (PUT <i>/todos/:id</i>). Fix the code.</p>\n</div>\n<div class=\"content\">\n<h3>Debugging issues in containers</h3>\n<blockquote>\n<p><i>When coding, you most likely end up in a situation where everything is broken.</i></p>\n</blockquote>\n<blockquote>\n<p>- Matti Luukkainen</p>\n</blockquote>\n<p>When developing with containers, we need to learn new tools for debugging, since we can not just \"console.log\" everything. When code has a bug, you may often be in a state where at least something works, so you can work forward from that. Configuration most often is in either of two states: 1. working or 2. broken. We will go over a few tools that can help when your application is in the latter state.</p>\n<p>When developing software, you can safely progress step by step, all the time verifying that what you have coded behaves as expected. Often, this is not the case when doing configurations. The configuration you may be writing can be broken until the moment it is finished. So when you write a long docker-compose.yml or Dockerfile and it does not work, you need to take a moment and think about the various ways you could confirm something is working.</p>\n<p><i>Question Everything</i> is still applicable here. As said in <a href=\"/en/part3/saving_data_to_mongo_db\">part 3</a>: The key is to be systematic. Since the problem can exist anywhere, <i>you must question everything</i>, and eliminate all possible sources of error one by one.</p>\n<p>For myself, the most valuable method of debugging is stopping and thinking about what I'm trying to accomplish instead of just bashing my head at the problem. Often there is a simple, alternate, solution or quick google search that will get me moving forward. </p>\n<h4>exec</h4>\n<p>The Docker command <a href=\"https://docs.docker.com/engine/reference/commandline/exec/\">exec</a> is a heavy hitter. It can be used to jump right into a container when it's running. </p>\n<p>Let's start a web server in the background and do a little bit of debugging to get it running and displaying the message \"Hello, exec!\" in our browser. Let's choose <a href=\"https://www.nginx.com/\">Nginx</a> which is, among other things, a server capable of serving static HTML files. It has a default index.html that we can replace.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> container run <span class=\"token parameter variable\">-d</span> nginx</code></pre></div>\n<p>Ok, now the questions are:</p>\n<ul>\n<li>Where should we go with our browser? </li>\n<li>Is it even running? </li>\n</ul>\n<p>We know how to answer the latter: by listing the running containers.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> container <span class=\"token function\">ls</span>\nCONTAINER ID   IMAGE   COMMAND  CREATED     STATUS    PORTS     NAMES\n3f831a57b7cc   nginx   <span class=\"token punctuation\">..</span>.      <span class=\"token number\">3</span> sec ago   Up <span class=\"token number\">2</span> sec  <span class=\"token number\">80</span>/tcp    keen_darwin</code></pre></div>\n<p>Yes! We got the first question answered as well. It seems to listen on port 80, as seen on the output above.</p>\n<p>Let's shut it down and restart with the <em>-p</em> flag to have our browser access it.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> container stop keen_darwin\n$ <span class=\"token function\">docker</span> container <span class=\"token function\">rm</span> keen_darwin\n\n$ <span class=\"token function\">docker</span> container run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8080</span>:80 nginx</code></pre></div>\n<blockquote>\n<p><i><strong>Editor's note_</strong> when doing development, it is <strong>essential</strong> to constantly follow the container logs. I'm usually not running containers in a detached mode (that is with -d) since it requires a bit of an extra effort to open the logs. </p>\n<p>When I'm 100% sure that everything works... no, when I'm 200% sure, then I might relax a bit and start the containers in detached mode. Until everything again falls apart and it is time to open the logs again.</i></p>\n</blockquote>\n<p>Let's look at the app by going to <a href=\"http://localhost:8080\">http://localhost:8080</a>. It seems that the app is showing the wrong message! Let's hop right into the container and fix this. Keep your browser open, we won't need to shut down the container for this fix. We will execute bash inside the container, the flags <em>-it</em> will ensure that we can interact with the container:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> container <span class=\"token function\">ls</span>\nCONTAINER ID   IMAGE     COMMAND  PORTS                  NAMES\n7edcb36aff08   nginx     <span class=\"token punctuation\">..</span>.      <span class=\"token number\">0.0</span>.0.0:8080-<span class=\"token operator\">></span><span class=\"token number\">80</span>/tcp   wonderful_ramanujan\n\n$ <span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> wonderful_ramanujan <span class=\"token function\">bash</span>\nroot@7edcb36aff08:/<span class=\"token comment\">#</span></code></pre></div>\n<p>Now that we are in, we need to find the faulty file and replace it. Quick Google tells us that file itself is <em>/usr/share/nginx/html/index.html</em>.</p>\n<p>Let's move to the directory and delete the file</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@7edcb36aff08:/<span class=\"token comment\"># cd /usr/share/nginx/html/</span>\nroot@7edcb36aff08:/<span class=\"token comment\"># rm index.html</span></code></pre></div>\n<p>Now, if we go to <a href=\"http://localhost:8080/\">http://localhost:8080/</a> we know that we deleted the correct file. The page shows 404. Let's replace it with one containing the correct contents:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@7edcb36aff08:/<span class=\"token comment\"># echo \"Hello, exec!\" > index.html</span></code></pre></div>\n<p>Refresh the page, and our message is displayed! Now we know how exec can be used to interact with the containers. Remember that all of the changes are lost when the container is deleted. To preserve the changes, you must use <em>commit</em> just as we did in <a href=\"/en/part12/introduction_to_containers#other-docker-commands\">previous section</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercise 12.8.</h3>\n<h4>Exercise 12.8: Mongo command-line interface</h4>\n<blockquote>\n<p>Use <em>script</em> to record what you do, save the file as script-answers/exercise12_8.txt</p>\n</blockquote>\n<p>While the MongoDB from the previous exercise is running, access the database with the Mongo command-line interface (CLI). You can do that using docker exec. Then add a new todo using the CLI.</p>\n<p>The command to open CLI when inside the container is <em>mongosh</em></p>\n<p>The Mongo CLI will require the username and password flags to authenticate correctly. Flags <em>-u root -p example</em> should work, the values are from the docker-compose.dev.yml.</p>\n<ul>\n<li>Step 1: Run MongoDB</li>\n<li>Step 2: Use docker exec to get inside the container</li>\n<li>Step 3: Open Mongo cli</li>\n</ul>\n<p>When you have connected to the Mongo cli you can ask it to show dbs inside:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> show dbs\nadmin         <span class=\"token number\">0</span>.000GB\nconfig         <span class=\"token number\">0</span>.000GB\n<span class=\"token builtin class-name\">local</span>         <span class=\"token number\">0</span>.000GB\nthe_database  <span class=\"token number\">0</span>.000GB</code></pre></div>\n<p>To access the correct database:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> use the_database</code></pre></div>\n<p>And finally to find out the collections:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> show collections\ntodos</code></pre></div>\n<p>We can now access the data in those collections:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> db.todos.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    _id: ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"633c270ba211aa5f7931f078\"</span><span class=\"token punctuation\">)</span>,\n    text: <span class=\"token string\">'Write code'</span>,\n    done: <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>,\n  <span class=\"token punctuation\">{</span>\n    _id: ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"633c270ba211aa5f7931f079\"</span><span class=\"token punctuation\">)</span>,\n    text: <span class=\"token string\">'Learn about containers'</span>,\n    done: <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Insert one new todo with the text: \"Increase the number of tools in my toolbelt\" with the status done as <i>false</i>. Consult the <a href=\"https://docs.mongodb.com/v4.4/reference/method/db.collection.insertOne/#mongodb-method-db.collection.insertOne\">documentation</a> to see how the addition is done.</p>\n<p>Ensure that you see the new todo both in the Express app and when querying from Mongo CLI.</p>\n</div>\n<div class=\"content\">\n<h3>Redis</h3>\n<p><a href=\"https://redis.io/\">Redis</a> is a <a href=\"https://redis.com/nosql/key-value-databases/\">key-value</a> database. In contrast to eg. MongoDB, the data stored in key-value storage has a bit less structure, there are eg. no collections or tables, it just contains junks of data that can be fetched based on the <i>key</i> that was attached to the data  (the <i>value</i>).</p>\n<p>By default, Redis works <i>in-memory</i>, which means that it does not store data persistently. </p>\n<p>An excellent use case for Redis is to use it as a cache. Caches are often used to store data that is otherwise slow to fetch and save the data until it's no longer valid. After the cache becomes invalid, you would then fetch the data again and store it in the cache.</p>\n<p>Redis has nothing to do with containers. But since we are already able to add <i>any</i> 3rd party service to your applications, why not learn about a new one?</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 12.9. - 12.11.</h3>\n<h4>Exercise 12.9: Set up Redis for the project</h4>\n<p>The Express server has already been configured to use Redis, and it is only missing the <em>REDIS_URL</em> environment variable. The application will use that environment variable to connect to the Redis. Read through the <a href=\"https://hub.docker.com/_/redis\">Docker Hub page for Redis</a>, add Redis to the <i>todo-app/todo-backend/docker-compose.dev.yml</i> by defining another service after mongo:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">mongo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">...</span>\n  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">?</span><span class=\"token punctuation\">?</span><span class=\"token punctuation\">?</span></code></pre></div>\n<p>Since the Docker Hub page doesn't have all the info, we can use Google to aid us. The default port for Redis is found by doing so:</p>\n<picture><img src=\"/static/c2052870c4d9cd9369bf0f66dd1b1cf9/5a190/redis_port_by_google.png\" srcset=\"/static/c2052870c4d9cd9369bf0f66dd1b1cf9/772e8/redis_port_by_google.png 200w,\n/static/c2052870c4d9cd9369bf0f66dd1b1cf9/e17e5/redis_port_by_google.png 400w,\n/static/c2052870c4d9cd9369bf0f66dd1b1cf9/5a190/redis_port_by_google.png 800w,\n/static/c2052870c4d9cd9369bf0f66dd1b1cf9/f96df/redis_port_by_google.png 849w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>We won't have any idea if the configuration works unless we try it. The application will not start using Redis by itself, that shall happen in the next exercise.</p>\n<p>Once Redis is configured and started, restart the backend and give it the <i>REDIS_URL</i>, which has the form <i>redis://host:port</i></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">REDIS_URL</span><span class=\"token operator\">=</span>insert-redis-url-here <span class=\"token assign-left variable\">MONGO_URL</span><span class=\"token operator\">=</span>mongodb://the_username:the_password@localhost:3456/the_database <span class=\"token function\">npm</span> run dev</code></pre></div>\n<p>You can now test the configuration by adding the line</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> redis <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../redis'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>to the Express server eg. in file <i>routes/index.js</i>. If nothing happens, the configuration is done right. If not, the server crashes:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">events.js:291\n      throw er<span class=\"token punctuation\">;</span> // Unhandled <span class=\"token string\">'error'</span> event\n      ^\n\nError: Redis connection to localhost:637 failed - connect ECONNREFUSED <span class=\"token number\">127.0</span>.0.1:6379\n    at TCPConnectWrap.afterConnect <span class=\"token punctuation\">[</span>as oncomplete<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>net.js:1144:16<span class=\"token punctuation\">)</span>\nEmitted <span class=\"token string\">'error'</span> event on RedisClient instance at:\n    at RedisClient.on_error <span class=\"token punctuation\">(</span>/Users/mluukkai/opetus/docker-fs/container-app/express-app/node_modules/redis/index.js:342:14<span class=\"token punctuation\">)</span>\n    at Socket.<span class=\"token operator\">&lt;</span>anonymous<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>/Users/mluukkai/opetus/docker-fs/container-app/express-app/node_modules/redis/index.js:223:14<span class=\"token punctuation\">)</span>\n    at Socket.emit <span class=\"token punctuation\">(</span>events.js:314:20<span class=\"token punctuation\">)</span>\n    at emitErrorNT <span class=\"token punctuation\">(</span>internal/streams/destroy.js:100:8<span class=\"token punctuation\">)</span>\n    at emitErrorCloseNT <span class=\"token punctuation\">(</span>internal/streams/destroy.js:68:3<span class=\"token punctuation\">)</span>\n    at processTicksAndRejections <span class=\"token punctuation\">(</span>internal/process/task_queues.js:80:21<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  errno: -61,\n  code: <span class=\"token string\">'ECONNREFUSED'</span>,\n  syscall: <span class=\"token string\">'connect'</span>,\n  address: <span class=\"token string\">'127.0.0.1'</span>,\n  port: <span class=\"token number\">6379</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> app crashed - waiting <span class=\"token keyword\">for</span> <span class=\"token function\">file</span> changes before starting<span class=\"token punctuation\">..</span>.</code></pre></div>\n<h4>Exercise 12.10:</h4>\n<p>The project already has <a href=\"https://www.npmjs.com/package/redis\">https://www.npmjs.com/package/redis</a> installed and two functions \"promisified\" - getAsync and setAsync.</p>\n<ul>\n<li>setAsync function takes in key and value, using the key to store the value.</li>\n<li>getAsync function takes in a key and returns the value in a promise.</li>\n</ul>\n<p>Implement a todo counter that saves the number of created todos to Redis:</p>\n<ul>\n<li>Step 1: Whenever a request is sent to add a todo, increment the counter by one.</li>\n<li>Step 2: Create a GET /statistics endpoint where you can ask for the usage metadata. The format should be the following JSON:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"added_todos\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Exercise 12.11:</h4>\n<blockquote>\n<p>Use <em>script</em> to record what you do, save the file as script-answers/exercise12_11.txt</p>\n</blockquote>\n<p>If the application does not behave as expected, direct access to the database may be beneficial in pinpointing problems. Let us try out how <a href=\"https://redis.io/topics/rediscli\">redis-cli</a> can be used to access the database.</p>\n<ul>\n<li>Go to the Redis container with <em>docker exec</em> and open the redis-cli.</li>\n<li>Find the key you used with <em><a href=\"https://redis.io/commands/keys\">KEYS *</a></em> </li>\n<li>Check the value of the key with the command <a href=\"https://redis.io/commands/get\">GET</a></li>\n<li>Set the value of the counter to 9001, find the right command from <a href=\"https://redis.io/commands/\">here</a> </li>\n<li>Make sure that the new value works by refreshing the page <a href=\"http://localhost:3000/statistics\">http://localhost:3000/statistics</a></li>\n<li>Create a new todo with Postman and ensure from redis-cli that the counter has increased accordingly</li>\n<li>Delete the key from the cli and ensure that the counter works when new todos are added</li>\n</ul>\n</div>\n<div class=\"content\">\n<h3>Persisting data with Redis</h3>\n<p>In the previous section, it was mentioned that <i>by default</i> Redis does not persist the data. However, the persistence is easy to toggle on. We only need to start the Redis with a different command, as instructed by the <a href=\"https://hub.docker.com/_/redis\">Docker hub page</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Everything else</span>\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'redis-server'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--appendonly'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yes'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># Overwrite the CMD</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># Declare the volume</span>\n      <span class=\"token punctuation\">-</span> ./redis_data<span class=\"token punctuation\">:</span>/data</code></pre></div>\n<p>The data will now be persisted to the directory <i>redis_data</i> of the host machine.\nRemember to add the directory to .gitignore!</p>\n<h4>Other functionality of Redis</h4>\n<p>In addition to the GET, SET and DEL operations on keys and values, Redis can do also quite a lot more. It can for example automatically expire keys, which is a very useful feature when Redis is used as a cache.</p>\n<p>Redis can also be used to implement the so-called <a href=\"https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern\">publish-subscribe</a> (or PubSub) pattern which is an asynchronous communication mechanism for distributed software. In this scenario, Redis works as a <i>message broker</i> between two or more services. Some of the services are <i>publishing</i> messages by sending those to Redis, which on arrival of a message, informs the parties that have <i>subscribed</i> to those messages. </p>\n</div>\n<div class=\"tasks\">\n<h3>Exercise 12.12.</h3>\n<h4>Exercise 12.12: Persisting data in Redis</h4>\n<p>Check that the data is not persisted by default: after running</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> compose <span class=\"token parameter variable\">-f</span> docker-compose.dev.yml down\n<span class=\"token function\">docker</span> compose <span class=\"token parameter variable\">-f</span> docker-compose.dev.yml up</code></pre></div>\n<p>the counter value is reset to 0.</p>\n<p>Then create a volume for Redis data (by modifying <i>todo-app/todo-backend/docker-compose.dev.yml </i>) and make sure that the data survives after running</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> compose <span class=\"token parameter variable\">-f</span> docker-compose.dev.yml down\n<span class=\"token function\">docker</span> compose <span class=\"token parameter variable\">-f</span> docker-compose.dev.yml up</code></pre></div>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/09ec6709015c0dcb492111bd9e645d3d/part-12.svg"},"part":12,"letter":"b","lang":"en"}}},"pageContext":{"part":12,"letter":"b","lang":"en"}},"staticQueryHashes":["3128451518"]}
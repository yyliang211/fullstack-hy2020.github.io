{"componentChunkName":"component---src-templates-content-template-js","path":"/ptbr/part4/autenticacao_por_token","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Os usuários devem estar aptos a logarem na aplicação, e quando um usuário é logado, suas informações devem ser adicionadas automaticamente a qualquer nova nota que você criar.</p>\n<p>Agora nós vamos implementar no backend uma <a href=\"https://scotch.io/tutorials/the-ins-and-outs-of-token-based-authentication#toc-how-token-based-works\">autenticação baseada em token</a>.</p>\n<p>Os princípios da autenticação baseada em token são apresentados no diagrama abaixo:</p>\n<picture><img src=\"/static/259c9dce6b3d1d77bedb04e799ac7dd3/5a190/16new.png\" alt=\"diagrama de sequência da autenticação baseada em token\" srcset=\"/static/259c9dce6b3d1d77bedb04e799ac7dd3/772e8/16new.png 200w,\n/static/259c9dce6b3d1d77bedb04e799ac7dd3/e17e5/16new.png 400w,\n/static/259c9dce6b3d1d77bedb04e799ac7dd3/5a190/16new.png 800w,\n/static/259c9dce6b3d1d77bedb04e799ac7dd3/c1b63/16new.png 1200w,\n/static/259c9dce6b3d1d77bedb04e799ac7dd3/29007/16new.png 1600w,\n/static/259c9dce6b3d1d77bedb04e799ac7dd3/da893/16new.png 2130w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<ul>\n<li>\n<p>Usuário começa a logar usando uma formulário de login implementado com React</p>\n<ul>\n<li>Nós adicionamos o formulário no front-end ns <a href=\"/ptbr/part5\">part 5</a></li>\n</ul>\n</li>\n<li>O React code envia o nome de usuário e a senha para o endereço <i>/api/login</i> do servidor como uma requisição HTTP POST</li>\n<li>\n<p>Se o usuário e a senha estiverem corretos, o servidor gera um <i>token</i> que de alguma forma identifica o usuário logado.</p>\n<ul>\n<li>O token é assinado digitalmente, tornando-o impossível de falsificar (no sentido criptográfico)</li>\n</ul>\n</li>\n<li>O backend responde com um código de status de operação bem sucedida e retorna o token com a resposta.</li>\n<li>O browser salva o token, como por exemplo em um estado (state) de uma aplicação React.</li>\n<li>Quando o usuário cria uma nova nota (ou outra operação que requer identificação), o código React envia o token para o servidor com a requisição.</li>\n<li>O servidor usa o token para identificar o usuário.</li>\n</ul>\n<p>Vamos implementar a funcionalidade de login. Instale o <a href=\"https://github.com/auth0/node-jsonwebtoken\">jsonwebtoken</a> biblioteca, que permite gerar <a href=\"https://jwt.io/\">JSON web tokens</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> jsonwebtoken</code></pre></div>\n<p>O código para a funcionalidade de login está no arquivo controllers/login.js.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jsonwebtoken'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> bcrypt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bcrypt'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> loginRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/user'</span><span class=\"token punctuation\">)</span>\n\nloginRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> passwordCorrect <span class=\"token operator\">=</span> user <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span>\n    <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span>\n    <span class=\"token operator\">:</span> <span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>passwordHash<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;&amp;</span> passwordCorrect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token string\">'invalid username or password'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> userForToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>userForToken<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span>\n\n  response\n    <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> token<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> loginRouter</code></pre></div>\n<p>O código inicia buscando o usuário no banco de dados pelo <i>username</i> anexado à requisição.\nEm seguida, verifica a <i>senha</i>, também anexada à requisição.\nComo as senhas não são armazenadas no banco de dados, mas sim <i>hashes</i> calculados a partir das senhas, o método <em>bcrypt.compare</em> é usado para comparar se a senha está correta:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>passwordHash<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Se o usuário não for encontrado ou se a senha estiver incorreta, a requisição é respondida com o código de status <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2\">401 Unauthorized</a>. O motivo para a falha é explicado no corpo da resposta.</p>\n<p>Se a senha estiver correta, o token é gerado com o método <em>jwt.sign</em>. O token contém o nome de usuário e o ID do usuário assinado digitalmente.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> userForToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>userForToken<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>O token é assinado digitalmente utilizando-se uma string passada pela variável de ambiente <i>SECRET</i> como o <i>segredo</i>. A assinatura digital garante que somente as partes que conhecem o segredo podem gerar o token válido.\nO valor da variável de ambiente deve ser definido no arquivo <i>env</i>.</p>\n<p>Uma requisição bem sucedida é respondida com o código de status <i>200 ok</i>. O token e o username do usuários são enviados de volta no corpo da resposta.</p>\n<p>Agora basta adicionar o código do login na aplicação, por meio de uma nova rota no <i>app.js</i></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> loginRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./controllers/login'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//...</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/login'</span><span class=\"token punctuation\">,</span> loginRouter<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Vamos tentar logar usando o VS Code REST-client:</p>\n<picture><img src=\"/static/5c4c0fb60e15ec9c753e541a05002c3f/5a190/17e.png\" alt=\"vscode rest post com username/password\" srcset=\"/static/5c4c0fb60e15ec9c753e541a05002c3f/772e8/17e.png 200w,\n/static/5c4c0fb60e15ec9c753e541a05002c3f/e17e5/17e.png 400w,\n/static/5c4c0fb60e15ec9c753e541a05002c3f/5a190/17e.png 800w,\n/static/5c4c0fb60e15ec9c753e541a05002c3f/c1b63/17e.png 1200w,\n/static/5c4c0fb60e15ec9c753e541a05002c3f/0f586/17e.png 1498w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Se não funcionar, a seguinte mensagem vai aparecer no console:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>node:32911<span class=\"token punctuation\">)</span> UnhandledPromiseRejectionWarning: Error: secretOrPrivateKey must have a value\n    at Object.module.exports <span class=\"token punctuation\">[</span>as sign<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>/Users/mluukkai/opetus/_2019fullstack-koodit/osa3/notes-backend/node_modules/jsonwebtoken/sign.js:101:20<span class=\"token punctuation\">)</span>\n    at loginRouter.post <span class=\"token punctuation\">(</span>/Users/mluukkai/opetus/_2019fullstack-koodit/osa3/notes-backend/controllers/login.js:26:21<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>node:32911<span class=\"token punctuation\">)</span> UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async <span class=\"token keyword\">function</span> without a catch block, or by rejecting a promise <span class=\"token function\">which</span> was not handled with .catch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>. <span class=\"token punctuation\">(</span>rejection id: <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>O comando <em>jwt.sign(userForToken, process.env.SECRET)</em> falhou. Nós esquecemos de definir um valor para a variável de ambiente <i>SECRET</i>. Pode ser qualquer string. Quando definimos o valor no arquivo <i>env</i>, (e reiniciamos o servidor), o login funcionará.</p>\n<p>Um login bem-sucedido retorna os detalhes do usuário e o token:</p>\n<picture><img src=\"/static/2e2ddac76483e17fded8f6fcc43fd7d4/5a190/18ea.png\" alt=\"resposta do vs code rest mostrando os detalhes e o token\" srcset=\"/static/2e2ddac76483e17fded8f6fcc43fd7d4/772e8/18ea.png 200w,\n/static/2e2ddac76483e17fded8f6fcc43fd7d4/e17e5/18ea.png 400w,\n/static/2e2ddac76483e17fded8f6fcc43fd7d4/5a190/18ea.png 800w,\n/static/2e2ddac76483e17fded8f6fcc43fd7d4/c1b63/18ea.png 1200w,\n/static/2e2ddac76483e17fded8f6fcc43fd7d4/29007/18ea.png 1600w,\n/static/2e2ddac76483e17fded8f6fcc43fd7d4/6f175/18ea.png 2036w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Um nome de usuário ou senha incorretos retorna uma messagem de erro e o código de status apropriado</p>\n<picture><img src=\"/static/49fe09c494b9e591fa8811b1772404d5/5a190/19ea.png\" alt=\"resposta do vs code rest com detalhes do login incorreto\" srcset=\"/static/49fe09c494b9e591fa8811b1772404d5/772e8/19ea.png 200w,\n/static/49fe09c494b9e591fa8811b1772404d5/e17e5/19ea.png 400w,\n/static/49fe09c494b9e591fa8811b1772404d5/5a190/19ea.png 800w,\n/static/49fe09c494b9e591fa8811b1772404d5/c1b63/19ea.png 1200w,\n/static/49fe09c494b9e591fa8811b1772404d5/29007/19ea.png 1600w,\n/static/49fe09c494b9e591fa8811b1772404d5/aea0a/19ea.png 2018w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Limitando a criação de novas notas para somente usuários logados</h3>\n<p>Vamos modificar a criação de novas notas de forma que somente seja possível se a requisição post contiver um token válido. A nota será salva na lista de notas do usuário identificado pelo token.</p>\n<p>Existem diversas formas de enviar o token do navegador para o servidor. Nós vamos utilizar o cabeçalho (header) <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/HTTP/Headers/Authorization\">Authorization</a>. O header também informa qual é o <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/HTTP/Authentication#esquema_basic_de_autentica%C3%A7%C3%A3o\">esquema de autenticação</a> utilizado. Isso pode ser necessário se o servidor oferece múltiplas formas de autenticação.\nIdentificar o esquema revela ao servidor como as credenciais anexadas devem ser interpretadas.</p>\n<p>O esquema <i>Bearer</i> é adequado às nossas necessidades.</p>\n<p>Na prática, significa que se o token é a string  <i>eyJhbGciOiJIUzI1NiIsInR5c2VybmFtZSI6Im1sdXVra2FpIiwiaW</i>, por exemplo, o header de autorização (Authorization) terá o seguinte valor:</p>\n<pre>\nBearer eyJhbGciOiJIUzI1NiIsInR5c2VybmFtZSI6Im1sdXVra2FpIiwiaW\n</pre>\n<p>O código para criação de novas notas deve ser alterado assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jsonwebtoken'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getTokenFrom</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">request</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> authorization <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'authorization'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authorization <span class=\"token operator\">&amp;&amp;</span> authorization<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bearer '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> authorization<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bearer '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\nnotesRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> decodedToken <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span><span class=\"token function\">getTokenFrom</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token string\">'token invalid'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">important</span><span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>_id\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> savedNote <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  user<span class=\"token punctuation\">.</span>notes <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>savedNote<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>savedNote<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>A função auxiliar <em>getTokenFrom</em> isola o token do header <i>authorization</i>. A validade do token é checada com <em>jwt.verify</em>. O método também decodifica o token, ou retorna o objeto no qual o token foi baseado.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> decodedToken <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Se o token estiver faltando ou for inválido, a exceção <i>JsonWebTokenError</i> será lançada. Precisamos expandir o tratamento de erros do middleware para que também cuide desse caso em particular:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">errorHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'CastError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token string\">'malformatted id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'ValidationError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span>  <span class=\"token string\">'JsonWebTokenError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O objeto decodificado do token contém os campos <i>username</i> e <i>id</i>, os quais informar ao servidor quem fez a requisição.</p>\n<p>Se o objeto decodificado do token não contiver a identidade do usuário (decodedToken.id é <i>undefined</i>), o código de status <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2\">401 unauthorized</a> será retornado e o motivo da falha será explicado no corpo da resposta.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token string\">'token invalid'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Se a identidade de quem fez a requisição for resolvida, a execução continuará como antes.</p>\n<p>Uma nova nota pode agora ser criada utilizando o Postman se o header <i>authorization</i> fornecer o valor correto com a string <i>Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ</i>, onde o segundo valor é o token retornado pela operação <i>login</i>.</p>\n<p>Utilizando o Postman, seria assim:</p>\n<picture><img src=\"/static/fbedde4a1b76cfc0594778a6833312b2/5a190/20e.png\" alt=\"postman adding bearer token\" srcset=\"/static/fbedde4a1b76cfc0594778a6833312b2/772e8/20e.png 200w,\n/static/fbedde4a1b76cfc0594778a6833312b2/e17e5/20e.png 400w,\n/static/fbedde4a1b76cfc0594778a6833312b2/5a190/20e.png 800w,\n/static/fbedde4a1b76cfc0594778a6833312b2/c1b63/20e.png 1200w,\n/static/fbedde4a1b76cfc0594778a6833312b2/5d6a0/20e.png 1580w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>já com o Visual Studio Code REST client:</p>\n<picture><img src=\"/static/b52fbb45633b056b6e67b02bda722bc8/5a190/21e.png\" alt=\"vscode adding bearer token example\" srcset=\"/static/b52fbb45633b056b6e67b02bda722bc8/772e8/21e.png 200w,\n/static/b52fbb45633b056b6e67b02bda722bc8/e17e5/21e.png 400w,\n/static/b52fbb45633b056b6e67b02bda722bc8/5a190/21e.png 800w,\n/static/b52fbb45633b056b6e67b02bda722bc8/c1b63/21e.png 1200w,\n/static/b52fbb45633b056b6e67b02bda722bc8/29007/21e.png 1600w,\n/static/b52fbb45633b056b6e67b02bda722bc8/dcb79/21e.png 1700w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>A aplicação atual pode ser encontrada no <a href=\"https://github.com/fullstack-hy2020/part3-notes-backend/tree/part4-9\">Github</a>, branch <i>part4-9</i>.</p>\n<p>Se a aplicação possuir múltiplas interfaces requerendo identificação, a validação pelo JWT deve estar separada em seus próprio middleware. Uma biblioteca já existente também pode ser utilizada, como a <a href=\"https://www.npmjs.com/package/express-jwt\">express-jwt</a>.</p>\n<h3>O problema da autenticação baseada em token</h3>\n<p>Autenticação por token é muito fácil de implementar, mas possui um problema. Uma vez que o usuário da API, por exemplo um app React, obtém um token, a API confiará cegamente nele. E se o direito de acesso do token precisar ser revogado?</p>\n<p>Há duas soluções para o problema. A mais fácil delas é limitar o período de validade do token.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">loginRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> passwordCorrect <span class=\"token operator\">=</span> user <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span>\n    <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span>\n    <span class=\"token operator\">:</span> <span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>passwordHash<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;&amp;</span> passwordCorrect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token string\">'invalid username or password'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> userForToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// o token expira em uma hora (60*60 segundos)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    userForToken<span class=\"token punctuation\">,</span> </span><span class=\"gatsby-highlight-code-line\">    process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">expiresIn</span><span class=\"token operator\">:</span> <span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">60</span> <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span></span>\n  response\n    <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> token<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Uma vez expirado, o app cliente necessitará de um novo token. Normalmente, isso acontece forçando o usuário a logar novamente no app.</p>\n<p>O tratamento de erro do middleware deve ser expandido para fornecer o erro apropriado no caso de um token expirado:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">errorHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'CastError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token string\">'malformatted id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'ValidationError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'JsonWebTokenError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token string\">'invalid token'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'TokenExpiredError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token string\">'token expired'</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Quanto mais curto o tempo de expiração, mais segura é a solução. Portanto, se o token cair em mãos erradas ou se o acesso do usuário ao sistema precisar ser revogado, o token só poderá ser usado por um período limitado de tempo. Por outro lado, um tempo de expiração curto força o usuário a fazer login no sistema com mais frequência.</p>\n<p>A outra solução é salvar informações sobre cada token no banco de dados do backend e verificar se o direito de acesso correspondente ao token ainda é válido para cada solicitação da API. Com esse esquema, os direitos de acesso podem ser revogados a qualquer momento. Esse tipo de solução é frequentemente chamado de <i>sessão do lado do servidor (server-side session)</i>.</p>\n<p>O aspecto negativo das sessões do lado do servidor é o aumento da complexidade no backend e também o efeito na performance, uma vez que a validade do token precisa ser verificada para cada solicitação da API ao banco de dados. O acesso ao banco de dados é consideravelmente mais lento em comparação com a verificação da validade do próprio token. É por isso que é bastante comum salvar a sessão correspondente a um token em um <i>banco de dados chave-valor</i> como [Redis] (<a href=\"https://redis.io/\">https://redis.io/</a>), que é limitado em funcionalidade em comparação, por exemplo, ao MongoDB ou um banco de dados relacional, mas extremamente rápido em alguns cenários de uso.</p>\n<p>Quando as sessões do lado do servidor são usadas, o token geralmente é apenas uma string aleatória que não inclui nenhuma informação sobre o usuário, como geralmente é o caso quando os tokens jwt são usados. Para cada solicitação da API, o servidor busca as informações relevantes sobre a identidade do usuário no banco de dados. Também é bastante comum que, em vez de usar o cabeçalho (header) Authorization, sejam usados <i>cookies</i> como mecanismo para transferir o token entre o cliente e o servidor.</p>\n<h3>Notas finais</h3>\n<p>Foram realizadas muitas alterações no código que causaram um problema típico em projetos de software de ritmo acelerado: a maioria dos testes quebrou. Porque esta parte do curso já está cheia de informações novas, deixaremos a correção dos testes como um exercício não obrigatório.</p>\n<p>Nomes de usuário, senhas e aplicações que usam autenticação por token devem sempre ser usados ​​por meio de [HTTPS] (<a href=\"https://en.wikipedia.org/wiki/HTTPS\">https://en.wikipedia.org/wiki/HTTPS</a>). Poderíamos usar um servidor Node [HTTPS] (<a href=\"https://pt.wikipedia.org/wiki/Hyper_Text_Transfer_Protocol_Secure\">https://pt.wikipedia.org/wiki/Hyper_Text_Transfer_Protocol_Secure</a>) em nossa aplicação em vez do servidor [HTTP] (<a href=\"https://nodejs.org/docs/latest-v8.x/api/http.html\">https://nodejs.org/docs/latest-v8.x/api/http.html</a>) (ele requer mais configuração). Por outro lado, a versão de produção de nossa aplicação está no Heroku, portanto, nossa aplicação permanece segura: o Heroku direciona todo o tráfego entre um navegador e o servidor Heroku através de HTTPS.</p>\n<p>Vamos implementar o login no frontend na próxima parte.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercício 4.15.-4.23.</h3>\n<p>No próximo exercício, o básico do gerenciamento de usuário será implementado na aplicação Bloglist. O jeito mais seguro é seguir os ensinamentos do capítulo 4 <a href=\"ptbr/part4/administracao_de_usuarios\">Administração de usuário</a> ao capítulo <a href=\"/ptbr/part4/autenticacao_por_token\">Autenticação por token</a>. Você também pode usar sua criatividade.</p>\n<p><strong>Mai um aviso:</strong> Se você perceber que está misturando async/await com <em>then</em>, é 99% de certeza de que você está fazendo alguma coisa errada. Use um ou outro.</p>\n<h4>4.15: Expansão na lista de Blog, passo3</h4>\n<p>Implemente uma maneira de criar novos usuários por meio de requisições HTTP POST para o endereço <i>/api/users</i>. Usuários devem ter um <i>username, password e name</i></p>\n<p>Não salva a senha no banco de dados como texto puro, mas sim utilize a biblioteca <i>bcrypt</i> como fizemos na parte 4, no capítulo <a href=\"ptbr/part4/administracao_de_usuarios#criando-usuarios\">Criando usuários</a>.</p>\n<p><strong>Obs.:</strong> Alguns usuários de Windows podem ter problemas com o <i>bcrypt</i>. Se for o seu caso, removo a biblioteca com o comando</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> uninstall bcrypt </code></pre></div>\n<p>e instale o <a href=\"https://www.npmjs.com/package/bcryptjs\">bcryptjs</a>.</p>\n<p>Implemente uma forma de ver os detalhes de todos os usuários por meio da requisição HTTP adequada.</p>\n<p>A lista de usuários pode, por exemplo, parecer com o seguinte:</p>\n<picture><img src=\"/static/b59bda1bd7e5987a5c805332d509e516/5a190/22.png\" alt=\"rota api/users no navegador mostrando dados JSON de dois usuários\" srcset=\"/static/b59bda1bd7e5987a5c805332d509e516/772e8/22.png 200w,\n/static/b59bda1bd7e5987a5c805332d509e516/e17e5/22.png 400w,\n/static/b59bda1bd7e5987a5c805332d509e516/5a190/22.png 800w,\n/static/b59bda1bd7e5987a5c805332d509e516/c1b63/22.png 1200w,\n/static/b59bda1bd7e5987a5c805332d509e516/9685e/22.png 1336w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>4.16*: Expansão na lista de Blog, passo4</h4>\n<p>Implemente uma funcionalidade  que adicione as seguintes restrições na criação de novos usuários: O nome de usuário e a senha devem ser fornecidos. O nome de usuário e a senha devem ter pelo menos 3 caracteres. O nome de usuário dever único.</p>\n<p>A operação deve retornar um código de status adequado e algum tipo de mensagem de erro caso um usuário inválido seja fornecido.</p>\n<p><strong>Obs.:</strong> Não teste as restrições da senha com as validações do Mongoose. Não é uma boa ideia, pois a senha recebida pelo backend e o hash da senha salvo no banco de dados não são a mesma coisa. O cumprimento da senha deve ser validado pelo controller, como fizemos na <a href=\"/ptbr/part3/node_js_e_express\">parte 3</a> antes de utilizarmos a validação do Mongoose.</p>\n<p>Implemente também testes que assegurem que usuários inválidos não serão criados e que uma operação inválida para adicionar esse usuário retorne o código de status adequado e uma mensagem de erro.</p>\n<h4>4.17: Expansão da lista de Blog, passo5</h4>\n<p>Expanda a aplicação de forma que cada blog contenha informação sobre o usuário que criou o blog.</p>\n<p>Altere a adição de novos blogs de forma que quando um novo blog é criado,  <i>qualquer</i> usuário do banco de dados é designado como o criador (por exemplo, o primeiro usuário que for encontrado). Implemente isso conforme parte 4, capítulo <a href=\"ptbr/part4/administracao_de_usuarios#popular\">popular</a>.\nQual usuário é designado como o criador não importa muito agora. A funcionalidade será finalizada no exercício 4.19.</p>\n<p>Modifique a listagem de todos os blogs de forma que a informação sobre o usuário criador seja mostrada no blog:</p>\n<picture><img src=\"/static/199682ad74f50747c90997a967856ffa/5a190/23e.png\" alt=\"api/blogs incorpora informação sobre o usuário criador em dados JSON\" srcset=\"/static/199682ad74f50747c90997a967856ffa/772e8/23e.png 200w,\n/static/199682ad74f50747c90997a967856ffa/e17e5/23e.png 400w,\n/static/199682ad74f50747c90997a967856ffa/5a190/23e.png 800w,\n/static/199682ad74f50747c90997a967856ffa/c1b63/23e.png 1200w,\n/static/199682ad74f50747c90997a967856ffa/ae28e/23e.png 1598w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>e a listagem de todos os usuários também mostre os blogs criados por cada usuário:</p>\n<picture><img src=\"/static/ac9967c89785b33440e9b1b4e87c17e5/5a190/24e.png\" alt=\"api/users incorpora blogs em dados JSON\" srcset=\"/static/ac9967c89785b33440e9b1b4e87c17e5/772e8/24e.png 200w,\n/static/ac9967c89785b33440e9b1b4e87c17e5/e17e5/24e.png 400w,\n/static/ac9967c89785b33440e9b1b4e87c17e5/5a190/24e.png 800w,\n/static/ac9967c89785b33440e9b1b4e87c17e5/c1b63/24e.png 1200w,\n/static/ac9967c89785b33440e9b1b4e87c17e5/9f9a4/24e.png 1560w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>4.18: Expansão da lista de Blog, passo6</h4>\n<p>Implemente uma autenticação baseada em token conforme o capítulo <a href=\"/ptbr/part4/autenticacao_por_token\">Autenticação por Token</a>.</p>\n<h4>4.19: Expansão da lista de Blog, passo7</h4>\n<p>Altere o código para adicionar novos blogs de forma que somente seja possível adicionar se um token válido por enviado por uma requisição HTTP POST. O usuário identificado no tolen deverá ser designado como o criador do blog.</p>\n<h4>4.20*: Expansão da lista de Blog, passo7</h4>\n<p><a href=\"/ptbr/part4/autenticacao_por_token\">Nesse exemplo</a> da parte 4 é demonstrado como obter o token do cabeçalho (header) com a função auxiliar <em>getTokenFrom</em>.</p>\n<p>Se você utilizou a mesma solução, refatore o código para obter o token por meio de um <a href=\"/ptbr/part3/node_js_e_express#middleware\">middleware</a>. O middleware deve obter o token do cabeçalho <i>Autorization</i> e atribuí-lo no campo <i>token</i> do objeto <i>request</i>.</p>\n<p>Em outras palavras, se você registrar este middleware no arquivo <i>app.js</i> antes de todas as rotas</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>tokenExtractor<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Routes can access the token with <em>request.token</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">blogsRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n  <span class=\"token keyword\">const</span> decodedToken <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Lembre-se que uma <a href=\"/en/part3/node_js_and_express#middleware\">função middleware</a> normal é uma função com três parâmetros que ao final chamará o último parâmetro <i>next</i> para mover o controle para o próximo middleware: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">tokenExtractor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// código que extrai o token</span>\n\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>4.21*: Expansão da lista de Blog, passo9</h4>\n<p>Altere o código que deleta um blog de forma que possa ser apagado somente pelo usuário que o adicionou. Além disso, deletar somente será possível se o token enviado com a requisição for o mesmo do criador do blog.</p>\n<p>Se for feita uma tentativa de deletar um blog sem um token ou por um usuário inválido, a operação deve retornar um código de status adequado.</p>\n<p>Note que se você buscar um blog no banco de dados,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> blog <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Blog<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>o campo <i>blog.user</i> não conterá uma string, mas um objeto (Object). Logo, se você comparar o id do objeto buscado no banco de dados e a string id, uma comparação normal não funcionará. O id buscado no banco de dados deve ser convertido em string primeiro.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> blog<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> userid<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">...</span></code></pre></div>\n<h4>4.22*:  Expansão da lista de Blog, passo10</h4>\n<p>Tanto a criação de um blog quanto a exclusão precisam descobrir a identidade do usuário que está realizando a operação. O middleware <em>tokenExtractor</em> que fizemos no exercício 4.20 ajuda, mas ainda assim ambas operações <i>post</i> e <i>delete</i> precisam descobrir que usuário possui um determinado token.</p>\n<p>Crie um middleware <em>userExtractor</em>, que descobre quem é o usuário e o atribui ao objeto da requisição. Quando for registrar o middlware no <i>app.js</i></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>userExtractor<span class=\"token punctuation\">)</span></code></pre></div>\n<p>o usuário será atribuído ao campo <em>request.user</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">blogsRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// get user do objeto requisição</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>user\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nblogsRouter<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// get user do objeto requisição</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>user\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Observe que é possível registar o middlware somente para um rota determinada. Assim, ao invés de usar <em>userExtractor</em> com todas as rotas </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// utiliza o middleware em todas as rotas</span>\n<span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>userExtractor<span class=\"token punctuation\">)</span></span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/blogs'</span><span class=\"token punctuation\">,</span> blogsRouter<span class=\"token punctuation\">)</span>  \napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users'</span><span class=\"token punctuation\">,</span> usersRouter<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/login'</span><span class=\"token punctuation\">,</span> loginRouter<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Poderíamos registrar para que seja usado somente na rota <i>/api/blogs</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// utiliza o middleware somente na rota /api/blogs</span>\n<span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/blogs'</span><span class=\"token punctuation\">,</span> userExtractor<span class=\"token punctuation\">,</span> blogsRouter<span class=\"token punctuation\">)</span></span>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users'</span><span class=\"token punctuation\">,</span> usersRouter<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/login'</span><span class=\"token punctuation\">,</span> loginRouter<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Como pode ser visto, fazemos isso encadeando múltiplos middleware como parâmetro da função <i>use</i>. Também seria possível registrar um middlware para apenas uma operação específica.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> userExtractor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>4.23*: Expansão da lista de Blog, passo11</h4>\n<p>Após adicionar a autenticação baseada em token, os testes para adicionar novo blog quebraram. Corrija os testes. Além disso, escreva um novo teste que certifique que a adição de um novo blog falhará com o código de status apropriado <i>401 Unauthorized</i> se um token não for provido. </p>\n<p><a href=\"https://github.com/visionmedia/supertest/issues/398\">Isso</a> será muito útil para fazer a correção.</p>\n<p>Esse é o último exercício dessa parte do curso e agora é hora de fazer o push do código para o GitHub e marcar todos os exercícios concluídos <a href=\"https://studies.cs.helsinki.fi/stats/courses/fullstackopen\">no sistema de submissão de exercícios</a>.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/f800638504cdf371a12947fc31d52030/part-4.svg"},"part":4,"letter":"d","lang":"ptbr"}}},"pageContext":{"part":4,"letter":"d","lang":"ptbr"}},"staticQueryHashes":["3128451518"]}
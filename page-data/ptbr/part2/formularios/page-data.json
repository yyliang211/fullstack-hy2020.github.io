{"componentChunkName":"component---src-templates-content-template-js","path":"/ptbr/part2/formularios","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Vamos continuar expandindo nossa aplicação permitindo que os usuários adicionem novas notas. Você pode encontrar o código para nossa aplicação atual <a href=\"https://github.com/fullstack-hy2020/part2-notes/tree/part2-1\">aqui</a>.</p>\n<p>Para que a página seja atualizada quando novas notas são adicionadas, armazene as notas no estado do componente <i>App</i>. Vamos importar a função <a href=\"https://reactjs.org/docs/hooks-state.html\">useState</a> e usá-la para definir um pedaço de estado que é inicializado com o array das notas iniciais passado nas props.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></span><span class=\"token keyword\">import</span> Note <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Note'</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Notes<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> \n          <span class=\"token operator\">&lt;</span>Note key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> note<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App </code></pre></div>\n<p>O componente usa a função <em>useState</em> para inicializar o pedaço de estado armazenado em <em>notes</em> com o array de notas passado nas props:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">)</span> \n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Também podemos usar o \"React Developer Tools\" para ver o que realmente está acontecendo:</p>\n<picture><img src=\"/static/f6f9f2e421d47bc42e08c761897c64d9/5a190/30.png\" alt=\"navegador mostrando a janela \" srcset=\"/static/f6f9f2e421d47bc42e08c761897c64d9/772e8/30.png 200w,\n/static/f6f9f2e421d47bc42e08c761897c64d9/e17e5/30.png 400w,\n/static/f6f9f2e421d47bc42e08c761897c64d9/5a190/30.png 800w,\n/static/f6f9f2e421d47bc42e08c761897c64d9/c1b63/30.png 1200w,\n/static/f6f9f2e421d47bc42e08c761897c64d9/29007/30.png 1600w,\n/static/f6f9f2e421d47bc42e08c761897c64d9/0ddab/30.png 2220w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Se quiséssemos inicializá-la com uma lista vazia de notas, definiríamos o valor inicial como um array vazio e, como as props não seriam utilizadas, poderíamos omitir o parâmetro <em>props</em> da definição da função:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>  </code></pre></div>\n<p>Vamos manter o valor inicial passado nas props por agora.</p>\n<p>Em seguida, vamos adicionar um <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms\">formulário HTML</a> (form) ao componente que será usado para adicionar novas notas.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addNote</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button clicked'</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Notes<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> \n          <span class=\"token operator\">&lt;</span>Note key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> note<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addNote<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>input <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>save<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>   </span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Adicionamos a função <em>addNote</em> como um gerenciador de evento ao elemento de formulário que será chamado quando o formulário for enviado, clicando no botão de envio <i>save</i>.</p>\n<p>Usamos o método discutido na <a href=\"/en/part1/component_state_event_handlers#event-handling\">Parte 1</a> para definir nosso gerenciador de evento:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addNote</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button clicked'</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O parâmetro <em>event</em> é o <a href=\"https://reactjs.org/docs/handling-events.html\">evento</a> que aciona a chamada para a função gerenciadora de evento:</p>\n<p>O gerenciador de evento chama imediatamente o método <em>event.preventDefault()</em>, o que \"impede a ação padrão\" de enviar um formulário. A ação padrão causaria, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit_event\">entre outras coisas</a>, o recarregamento da página.</p>\n<p>O alvo (target) do evento armazenado em <em>event.target</em> é registrado no console:</p>\n<picture><img src=\"/static/74fb6fa76af47ec0301ec15163cf74e8/5a190/6e.png\" alt=\"console mostrando o botão clicado com o objeto formulário\" srcset=\"/static/74fb6fa76af47ec0301ec15163cf74e8/772e8/6e.png 200w,\n/static/74fb6fa76af47ec0301ec15163cf74e8/e17e5/6e.png 400w,\n/static/74fb6fa76af47ec0301ec15163cf74e8/5a190/6e.png 800w,\n/static/74fb6fa76af47ec0301ec15163cf74e8/c1b63/6e.png 1200w,\n/static/74fb6fa76af47ec0301ec15163cf74e8/1acf3/6e.png 1596w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>O <i>target</i> neste caso é o formulário que definimos em nosso componente.</p>\n<p>Como acessamos os dados armazenados no elemento <i>input</i> do formulário?</p>\n<h3>Um componente controlado</h3>\n<p>Existem muitas maneiras de fazer isso: o primeiro método que vamos utilizar é através do uso de componentes <a href=\"https://reactjs.org/docs/forms.html#controlled-components\">controlados</a> (controlled components).</p>\n<p>Vamos adicionar um novo pedaço de estado chamado <em>newNote</em> para armazenar a entrada fornecida pelo usuário <strong>e</strong> vamos defini-lo como o atributo <i>value</i> do elemento <i>input</i> (entrada):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newNote<span class=\"token punctuation\">,</span> setNewNote<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">'a new note...'</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span> </span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addNote</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button clicked'</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Notes<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> \n          <span class=\"token operator\">&lt;</span>Note key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> note<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addNote<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>input value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newNote<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>save<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>   \n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O texto do espaço reservado armazenado como o valor inicial do estado <em>newNote</em> aparece no elemento <i>input</i>, mas o texto de entrada (input text) não é editável. O console exibe um aviso que nos dá uma dica do que pode estar errado:</p>\n<picture><img src=\"/static/2905b1f4edfe786a70566fe4a7a3a0e9/5a190/7e.png\" alt=\"console exibindo erro de valor fornecido para prop sem onchange\" srcset=\"/static/2905b1f4edfe786a70566fe4a7a3a0e9/772e8/7e.png 200w,\n/static/2905b1f4edfe786a70566fe4a7a3a0e9/e17e5/7e.png 400w,\n/static/2905b1f4edfe786a70566fe4a7a3a0e9/5a190/7e.png 800w,\n/static/2905b1f4edfe786a70566fe4a7a3a0e9/c1b63/7e.png 1200w,\n/static/2905b1f4edfe786a70566fe4a7a3a0e9/29007/7e.png 1600w,\n/static/2905b1f4edfe786a70566fe4a7a3a0e9/05244/7e.png 1752w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>A partir do momento em que atribuímos um pedaço do estado do componente <i>App</i> como o atributo <i>value</i> do elemento de entrada (input element), o componente <i>App</i> passou a controlar o comportamento do elemento de entrada.</p>\n<p>Para habilitar a edição do elemento de entrada, precisamos registrar um <i>gerenciador de evento</i> que sincroniza as mudanças feitas na entrada com o estado do componente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newNote<span class=\"token punctuation\">,</span> setNewNote<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'a new note...'</span>\n  <span class=\"token punctuation\">)</span> \n\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleNoteChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> </span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setNewNote</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Notes<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> \n          <span class=\"token operator\">&lt;</span>Note key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> note<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addNote<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newNote<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleNoteChange<span class=\"token punctuation\">}</span></span>        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>save<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>   \n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Agora registramos um gerenciador de evento para o atributo <i>onChange</i> do elemento <i>input</i> do formulário:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>input\n  value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newNote<span class=\"token punctuation\">}</span>\n  onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleNoteChange<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>O gerenciador de evento é chamado toda vez que <i>ocorre uma mudança no elemento de entrada</i>. A função do gerenciador de evento recebe o objeto de evento como seu parâmetro <em>event</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleNoteChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setNewNote</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A propriedade <em>target</em> do objeto \"event\" agora corresponde ao elemento de entrada controlado, e <em>event.target.value</em> se refere ao valor (value) de entrada desse elemento.</p>\n<p>Observe que não precisamos chamar o método <em>event.preventDefault()</em> como fizemos no gerenciador de evento <i>onSubmit</i>. Isso ocorre porque não há uma ação padrão em uma mudança de entrada, ao contrário do que ocorre em um envio de formulário.</p>\n<p>É possível acompanhar no console como o gerenciador de evento é chamado:</p>\n<picture><img src=\"/static/a8548b60018e45a30412b33bf4a76c62/5a190/8e.png\" alt=\"múltiplas chamadas no console ao digitar typing text\" srcset=\"/static/a8548b60018e45a30412b33bf4a76c62/772e8/8e.png 200w,\n/static/a8548b60018e45a30412b33bf4a76c62/e17e5/8e.png 400w,\n/static/a8548b60018e45a30412b33bf4a76c62/5a190/8e.png 800w,\n/static/a8548b60018e45a30412b33bf4a76c62/c1b63/8e.png 1200w,\n/static/a8548b60018e45a30412b33bf4a76c62/08c33/8e.png 1570w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Você se lembrou de instalar o <a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\">React devtools</a> (Ferramentas do Desenvolvedor React), certo? Ótimo. Você pode ver diretamente como o estado muda na guia \"Componentes\":</p>\n<picture><img src=\"/static/befc5ce08f93dc38d3ebd4db5863a4dc/5a190/9ea.png\" alt=\"mudanças de estado no react devtools mostrando a digitação\" srcset=\"/static/befc5ce08f93dc38d3ebd4db5863a4dc/772e8/9ea.png 200w,\n/static/befc5ce08f93dc38d3ebd4db5863a4dc/e17e5/9ea.png 400w,\n/static/befc5ce08f93dc38d3ebd4db5863a4dc/5a190/9ea.png 800w,\n/static/befc5ce08f93dc38d3ebd4db5863a4dc/c1b63/9ea.png 1200w,\n/static/befc5ce08f93dc38d3ebd4db5863a4dc/29007/9ea.png 1600w,\n/static/befc5ce08f93dc38d3ebd4db5863a4dc/27f8b/9ea.png 1730w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Agora, o estado <em>newNote</em> do componente <i>App</i> reflete o valor atual do elemento de entrada, o que significa que podemos completar a função <em>addNote</em> para criar novas notas:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addNote</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> noteObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> newNote<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">important</span><span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> notes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>noteObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setNewNote</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Primeiramente, criamos um novo objeto para a nota (variável que cria as notas com suas propriedades) chamada <em>noteObject</em> que receberá seu conteúdo do estado <em>newNote</em> do componente. O identificador único <i>id</i> é gerado com base no número total de notas. Este método funciona para a nossa aplicação, já que as nossas notas nunca são excluídas. Com a ajuda da função <em>Math.random()</em>, a nossa nota tem 50% de chance de ser marcada como importante.</p>\n<p>A nova nota é adicionada à lista de notas usando o método de array <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\">concat</a>, apresentado na <a href=\"/ptbr/part1/java_script#arrays\">Parte 1</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>noteObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>O método não muda o array original <em>notes</em>, porém, cria <i>uma nova cópia do array com o novo item adicionado ao final</i>. Isso é importante, já que nós <a href=\"https://reactjs.org/docs/state-and-lifecycle.html#using-state-correctly\">nunca devemos mudar diretamente o estado</a> em React!</p>\n<p>O gerenciador de evento também limpa o valor do elemento de entrada controlado chamando a função <em>setNewNote</em> do estado <em>newNote</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setNewNote</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>É possível encontrar o código atual completo da nossa aplicação na branch <i>part2-2</i> <a href=\"https://github.com/fullstack-hy2020/part2-notes/tree/part2-2\">neste repositório do GitHub</a>.</p>\n<h3>Filtrando os elementos exibidos</h3>\n<p>Vamos adicionar algumas novas funcionalidades à nossa aplicação que nos permitam visualizar apenas as notas importantes.</p>\n<p>Vamos adicionar um estado ao componente <i>App</i> que vai manter o registro das notas que devem ser exibidas:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newNote<span class=\"token punctuation\">,</span> setNewNote<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showAll<span class=\"token punctuation\">,</span> setShowAll<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Modifiquemos o componente para que ele armazene uma lista de todas as notas a serem exibidas na variável <em>notesToShow</em>. Os itens na lista dependem do estado do componente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> Note <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Note'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newNote<span class=\"token punctuation\">,</span> setNewNote<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showAll<span class=\"token punctuation\">,</span> setShowAll<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> notesToShow <span class=\"token operator\">=</span> showAll</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">?</span> notes</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">:</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Notes<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">{</span>notesToShow<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span></span>          <span class=\"token operator\">&lt;</span>Note key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> note<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A definição da variável <em>notesToShow</em> é bastante compacta:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> notesToShow <span class=\"token operator\">=</span> showAll\n  <span class=\"token operator\">?</span> notes\n  <span class=\"token operator\">:</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>A definição utiliza o operador <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">condicional</a> (ou operador ternário) encontrado também em muitas outras linguagens de programação.</p>\n<p>O operador funciona da seguinte maneira. Se tivermos</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> condition <span class=\"token operator\">?</span> val1 <span class=\"token operator\">:</span> val2</code></pre></div>\n<p>a variável <em>result</em> será definida com o valor de <em>val1</em> se <em>condition</em> for verdadeiro. Se <em>condition</em> for falso, a variável <em>result</em> será definida com o valor de <em>val2</em>.</p>\n<p>Se o valor de <em>showAll</em> for falso, a variável <em>notesToShow</em> será atribuída a uma lista que contém somente as notas que possuem a propriedade <em>important</em> definida como verdadeira. A filtragem é feita com a ajuda do método de array <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">filter</a> (filtrar):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">notes<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>O operador ternário é redundante aqui, já que o valor de <em>note.important</em> é verdadeiro ou falso, o que significa que podemos simplesmente escrever:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">notes<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">)</span></code></pre></div>\n<p>A razão de mostrarmos o operador de comparação primeiro foi para enfatizar um detalhe importante: em JavaScript, <em>val1 == val2</em> não funciona como esperado em todas as situações e é mais seguro usar <em>val1 === val2</em> exclusivamente em comparações. Leia mais sobre o assunto <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\">aqui</a>.</p>\n<p>É possível testar a funcionalidade de filtragem mudando o valor inicial do estado <em>showAll</em>.</p>\n<p>Em seguida, vamos adicionar a funcionalidade que permite aos usuários alternar o estado <em>showAll</em> da aplicação a partir da interface de usuário (GUI).</p>\n<p>As alterações relevantes são mostradas abaixo:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span> \n<span class=\"token keyword\">import</span> Note <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Note'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newNote<span class=\"token punctuation\">,</span> setNewNote<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showAll<span class=\"token punctuation\">,</span> setShowAll<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Notes<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setShowAll</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>showAll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">          show <span class=\"token punctuation\">{</span>showAll <span class=\"token operator\">?</span> <span class=\"token string\">'important'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'all'</span> <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">            </span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span>      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>notesToShow<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span>\n          <span class=\"token operator\">&lt;</span>Note key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> note<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n      <span class=\"token comment\">// ...    </span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As notas exibidas (\"all\" versus \"important\") são controladas com um botão. O gerenciador de evento do botão é tão simples que foi definido diretamente no atributo do elemento do botão. O gerenciador de evento alterna o valor de <em>showAll</em> de verdadeiro para falso e vice-versa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setShowAll</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>showAll<span class=\"token punctuation\">)</span></code></pre></div>\n<p>O texto do botão depende do valor do estado <em>showAll</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">show <span class=\"token punctuation\">{</span>showAll <span class=\"token operator\">?</span> <span class=\"token string\">'important'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'all'</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Você pode encontrar o código da nossa aplicação atual na íntegra na branch <i>part2-3</i> <a href=\"https://github.com/fullstack-hy2020/part2-notes/tree/part2-3\">neste repositório GitHub</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercícios 2.6 a 2.10</h3>\n<p>Em nosso primeiro exercício, vamos começar a trabalhar em uma aplicação que será desenvolvida mais tarde em exercícios subsequentes. Em exercícios que fazem parte de conjuntos relacionados, é mais que suficiente retornar a versão final da sua aplicação. Você também pode fazer um commit separado depois de ter terminado cada parte do conjunto de exercícios, mas isso não é obrigatório.</p>\n<p><strong>AVISO</strong>: \"create-react-app\" transformará automaticamente seu projeto em um repositório git, a menos que você crie sua aplicação dentro de um repositório git já existente.<strong>Você muito provavelmente não quer que cada um de seus projetos seja um repositório separado</strong>, então basta executar o comando <em>rm -rf .git</em> na raiz de sua aplicação para aplicar as modificações.</p>\n<h4>2.6: The Phonebook — 1º passo</h4>\n<p>Vamos criar uma lista telefônica bem simples. <i><strong>Nesta parte, vamos adicionar apenas nomes à lista telefônica.</strong></i></p>\n<p>Vamos começar implementando a funcionalidade que adiciona uma pessoa à lista telefônica.</p>\n<p>Você pode usar o código abaixo como ponto de partida para o componente <i>App</i> da sua aplicação:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>persons<span class=\"token punctuation\">,</span> setPersons<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Arto Hellas'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newName<span class=\"token punctuation\">,</span> setNewName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Phonebook<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>input <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>add<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Numbers<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>O estado <em>newName</em> é destinado a controlar o elemento de entrada do formulário.</p>\n<p>Pode ser útil renderizar o estado e outras variáveis, como texto, para fins de depuração. Você pode adicionar temporariamente o seguinte elemento ao componente renderizado:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div>debug: {newName}&lt;/div></code></pre></div>\n<p>Também é importante colocar em prática o que aprendemos no capítulo sobre <a href=\"/ptbr/part1/um_estado_mais_complexo_e_depuracao_de_aplicacoes_react\">depuração de aplicações React</a> da primeira parte. A extensão <a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\">React developer tools</a> é <i>incrivelmente</i> útil para rastrear as alterações que ocorrem no estado da aplicação.</p>\n<p>Depois de concluir este exercício, sua aplicação deve ficar mais ou menos parecida com isto:</p>\n<picture><img src=\"/static/501199c4a6d7a5702a7bdf31998d5a1d/5a190/10e.png\" alt=\"captura de tela do exercício 2.6 finalizado\" srcset=\"/static/501199c4a6d7a5702a7bdf31998d5a1d/772e8/10e.png 200w,\n/static/501199c4a6d7a5702a7bdf31998d5a1d/e17e5/10e.png 400w,\n/static/501199c4a6d7a5702a7bdf31998d5a1d/5a190/10e.png 800w,\n/static/501199c4a6d7a5702a7bdf31998d5a1d/c1b63/10e.png 1200w,\n/static/501199c4a6d7a5702a7bdf31998d5a1d/5df5d/10e.png 1572w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Atente-se ao uso da extensão \"React developer tools\" na imagem acima!</p>\n<p><strong>Obs.:</strong></p>\n<ul>\n<li>Você pode usar o nome da pessoa como um valor da propriedade <i>key</i>; e</li>\n<li>Lembre-se de impedir a ação padrão de envio de formulários HTML (preventDefault)!</li>\n</ul>\n<h4>2.7: The Phonebook — 2º passo</h4>\n<p>Impeça que o usuário adicione nomes que já existam na lista telefônica. JavaScript têm inúmeros <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">métodos</a> adequados para realizar esta tarefa. Tenha em mente <a href=\"https://www.joshbritz.co/posts/why-its-so-hard-to-check-object-equality/\">como funciona a igualdade de objetos</a> em JavaScript.</p>\n<p>Emita um aviso com o comando <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">alert</a> (alerta) quando o usuário tentar fazer isso:</p>\n<p><picture><img src=\"/static/d5be58590c1460090cb1c87adf201886/5a190/11e.png\" alt=\"captura de tela mostrando o exemplo do exercício 2.7\" srcset=\"/static/d5be58590c1460090cb1c87adf201886/772e8/11e.png 200w,\n/static/d5be58590c1460090cb1c87adf201886/e17e5/11e.png 400w,\n/static/d5be58590c1460090cb1c87adf201886/5a190/11e.png 800w,\n/static/d5be58590c1460090cb1c87adf201886/c1b63/11e.png 1200w,\n/static/d5be58590c1460090cb1c87adf201886/2a333/11e.png 1484w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<i>Tradução do alerta em tela: \"Arto Hellas já foi adicionado à lista telefônica\"</i></p>\n<p><strong>Dica:</strong> ao formar strings que contêm valores de variáveis, recomenda-se usar <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\">template strings</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is already added to phonebook</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>Se a variável <em>newName</em> contiver o valor <i>Arto Hellas</i>, a expressão template string retornará a string:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Arto Hellas is already added to phonebook</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>O mesmo pode ser feito de um \"jeito mais Java\" usando o operador de soma (+):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">newName <span class=\"token operator\">+</span> <span class=\"token string\">' is already added to phonebook'</span></code></pre></div>\n<p>Template strings é a opção mais idiomática, além de que seu uso é o indício de um verdadeiro profissional JavaScript.</p>\n<h4>2.8: The Phonebook — 3º passo</h4>\n<p>Expanda sua aplicação permitindo que os usuários adicionem números de telefone à lista telefônica. Você precisará adicionar um segundo elemento de <i>entrada</i> (input) ao formulário (junto com seu próprio gerenciador de evento):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>form<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>name<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>input <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>number<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>input <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>add<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span></code></pre></div>\n<p>Neste ponto, a aplicação pode ficar mais ou menos assim. A imagem também exibe o estado da aplicação com a ajuda da ferramenta <a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\">React developer tools</a>:</p>\n<picture><img src=\"/static/3068a34af61692773a06d60ee93638a9/5a190/12e.png\" alt=\"captura de tela do exercício 2.8\" srcset=\"/static/3068a34af61692773a06d60ee93638a9/772e8/12e.png 200w,\n/static/3068a34af61692773a06d60ee93638a9/e17e5/12e.png 400w,\n/static/3068a34af61692773a06d60ee93638a9/5a190/12e.png 800w,\n/static/3068a34af61692773a06d60ee93638a9/c1b63/12e.png 1200w,\n/static/3068a34af61692773a06d60ee93638a9/29007/12e.png 1600w,\n/static/3068a34af61692773a06d60ee93638a9/f98ee/12e.png 1808w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>2.9*: The Phonebook — 4º passo</h4>\n<p>Implemente um campo de pesquisa que possa ser usado para filtrar a lista de pessoas por nome:</p>\n<picture><img src=\"/static/4b5897029d4c9e2eb61631ca4c1a4f24/5a190/13e.png\" alt=\"captura de tela do exercício 2.9\" srcset=\"/static/4b5897029d4c9e2eb61631ca4c1a4f24/772e8/13e.png 200w,\n/static/4b5897029d4c9e2eb61631ca4c1a4f24/e17e5/13e.png 400w,\n/static/4b5897029d4c9e2eb61631ca4c1a4f24/5a190/13e.png 800w,\n/static/4b5897029d4c9e2eb61631ca4c1a4f24/c1b63/13e.png 1200w,\n/static/4b5897029d4c9e2eb61631ca4c1a4f24/9f9a4/13e.png 1560w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Você pode implementar o campo de pesquisa como um elemento <i>input</i> que é colocado fora do formulário HTML. A lógica de filtragem mostrada na imagem é <i>case insensitive</i>, o que significa que se você pesquisar por <i>arto</i>, também há o retorno de resultados que contêm \"Arto\" com o A maiúsculo.</p>\n<p><strong>Obs.:</strong> Quando se está trabalhando em uma nova funcionalidade, é útil inserir em sua aplicação um \"código de teste\" — como alguns dados fantasiosos de pessoas — desta forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>persons<span class=\"token punctuation\">,</span> setPersons<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Arto Hellas'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">number</span><span class=\"token operator\">:</span> <span class=\"token string\">'040-123456'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Ada Lovelace'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">number</span><span class=\"token operator\">:</span> <span class=\"token string\">'39-44-5323523'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Dan Abramov'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">number</span><span class=\"token operator\">:</span> <span class=\"token string\">'12-43-234345'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Mary Poppendieck'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">number</span><span class=\"token operator\">:</span> <span class=\"token string\">'39-23-6423122'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Isso lhe economiza o trabalho de ter que ficar inserindo dados manualmente na sua aplicação para testar a nova funcionalidade.</p>\n<h4>2.10: The Phonebook — 5º passo</h4>\n<p>Se você implementou sua aplicação em um único componente, refatore-o extraindo e transformando as partes corretas do código em novos componentes. Mantenha o estado da aplicação e todos os gerenciadores de eventos no componente raiz <i>App</i>.</p>\n<p>Já é suficiente extrair <i><strong>três</strong></i> componentes da aplicação. São boas opções para tornar em componentes separados, por exemplo, o filtro de pesquisa, o formulário para adicionar novas pessoas à lista telefônica, um componente que renderiza todas as pessoas da lista telefônica e um componente que renderiza os detalhes de uma única pessoa.</p>\n<p>O componente raiz da aplicação após a refatoração pode ficar parecido com o do exemplo abaixo. O componente raiz refatorado abaixo renderiza apenas os títulos, enquanto que deixa os componentes extraídos cuidarem do resto.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Phonebook<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>Filter <span class=\"token operator\">...</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span>Add a <span class=\"token keyword\">new</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>PersonForm \n        <span class=\"token operator\">...</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span>Numbers<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>Persons <span class=\"token operator\">...</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Obs.:</strong> Você pode ter problemas neste exercício se definir seus componentes \"no lugar errado\". Agora, é definitivamente uma boa ideia revisar o capítulo da seção anterior: <a href=\"/ptbr/part1/um_estado_mais_complexo_e_depuracao_de_aplicacoes_react#nao-defina-componentes-dentro-de-componentes\">Não defina Componentes dentro de Componentes</a>.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/8869c2e065a6ae187c633a378e6fa6be/part-2.svg"},"part":2,"letter":"b","lang":"ptbr"}}},"pageContext":{"part":2,"letter":"b","lang":"ptbr"}},"staticQueryHashes":["3128451518"]}
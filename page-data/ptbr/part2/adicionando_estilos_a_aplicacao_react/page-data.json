{"componentChunkName":"component---src-templates-content-template-js","path":"/ptbr/part2/adicionando_estilos_a_aplicacao_react","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>A aparência atual da nossa aplicação está bastante modesta. No <a href=\"/ptbr/part0/fundamentos_de_aplicacoes_web#exercicios-0-1-a-0-6\">exercício 0.2</a>, o objetivo era passar pelo tutorial <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics\">CSS da Mozilla</a>.</p>\n<p>Vamos dar uma olhada em como podemos adicionar estilos a uma aplicação React. Existem várias maneiras diferentes de fazer isso e veremos os outros métodos mais tarde. Primeiro, adicionaremos o CSS à nossa aplicação da maneira antiga; em um único arquivo sem usar um <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/CSS_preprocessor\">pré-processador CSS</a> (embora isso não seja inteiramente verdade, como aprenderemos mais tarde).</p>\n<p>Vamos criar um novo arquivo chamado <i>index.css</i> no diretório <i>src</i> e vamos adicioná-lo à aplicação importando-o no arquivo <i>index.js</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token string\">'./index.css'</span></code></pre></div>\n<p>Vamos adicionar a seguinte regra CSS ao arquivo <i>index.css</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">h1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As regras CSS consistem em <i>seletores</i> (selectors) e <i>declarações</i> (declarations). O seletor define a quais elementos a regra deve ser aplicada. O seletor acima é <i>h1</i>, que corresponderá a todas as tags de cabeçalho <i>h1</i> em nossa aplicação.</p>\n<p>A declaração define a propriedade <em>color</em> com o valor <i>green</i> (verde).</p>\n<p>Uma regra CSS pode conter um número arbitrário de propriedades. Vamos modificar a regra anterior para tornar o texto cursivo, definindo o estilo da fonte como <i>italic</i> (itálico):</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">h1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token property\">font-style</span><span class=\"token punctuation\">:</span> italic<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Existem muitas maneiras de corresponder a elementos usando <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors\">diferentes tipos de seletores CSS</a>.</p>\n<p>Se quiséssemos direcionar, digamos, cada uma das notas com nossos estilos, poderíamos usar o seletor <i>li</i>, já que todas as notas estão envolvidas em tags <i>li</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Note</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> note<span class=\"token punctuation\">,</span> toggleImportance <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> label <span class=\"token operator\">=</span> note<span class=\"token punctuation\">.</span>important \n    <span class=\"token operator\">?</span> <span class=\"token string\">'make not important'</span> \n    <span class=\"token operator\">:</span> <span class=\"token string\">'make important'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span> \n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleImportance<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Vamos adicionar a seguinte regra à nossa folha de estilo (já que meu conhecimento em web design moderno elegante é próximo a zero, os estilos aqui adicionados não fazem muito sentido):</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">li</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> grey<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 3px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Usar tipos de elementos para definir regras CSS é um tanto problemático. Se nossa aplicação contiver outras tags <i>li</i>, a mesma regra de estilo também será aplicada a elas.</p>\n<p>Se quisermos aplicar nosso estilo especificamente às notas, a melhor opção é usar <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors\">seletores de classe</a>.</p>\n<p>Em HTML comum, as classes são definidas como o valor do atributo <i>class</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>note<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>algum texto...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Em React, temos que usar o atributo <a href=\"https://reactjs.org/docs/dom-elements.html#classname\">className</a> em vez do atributo <i>class</i>. Com isso em mente, façamos as seguintes alterações em nosso componente <i>Note</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Note</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> note<span class=\"token punctuation\">,</span> toggleImportance <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> label <span class=\"token operator\">=</span> note<span class=\"token punctuation\">.</span>important \n    <span class=\"token operator\">?</span> <span class=\"token string\">'make not important'</span> \n    <span class=\"token operator\">:</span> <span class=\"token string\">'make important'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span>li className<span class=\"token operator\">=</span><span class=\"token string\">'note'</span><span class=\"token operator\">></span></span>      <span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span> \n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleImportance<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Os seletores de classe são definidos com a sintaxe <em>.className</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.note</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> grey<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Se você adicionar outros elementos <i>li</i> à aplicação agora, eles não serão afetados pela regra de estilo acima.</p>\n<h3>Uma mensagem de erro aprimorada</h3>\n<p>Anteriormente, implementamos a mensagem de erro que era exibida quando o usuário tentava alternar a importância de uma nota excluída com o método <em>alert</em>. Vamos implementar a mensagem de erro como seu próprio componente React.</p>\n<p>O componente é bastante simples:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Notification</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> message <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>message <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'error'</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Se o valor da prop <em>message</em> for <em>null</em>, nada é renderizado na tela e, em outros casos, a mensagem é renderizada dentro de um elemento div.</p>\n<p>Vamos adicionar um novo pedaço de estado chamado <i>errorMessage</i> ao componente <i>App</i>. Vamos inicializá-lo com alguma mensagem de erro para que possamos testar imediatamente nosso componente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newNote<span class=\"token punctuation\">,</span> setNewNote<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showAll<span class=\"token punctuation\">,</span> setShowAll<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>errorMessage<span class=\"token punctuation\">,</span> setErrorMessage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some error happened...'</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Notes<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Notification message<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>errorMessage<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setShowAll</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>showAll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          show <span class=\"token punctuation\">{</span>showAll <span class=\"token operator\">?</span> <span class=\"token string\">'important'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'all'</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>      \n      <span class=\"token comment\">// ...</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Vamos adicionar uma regra de estilo que sirva para uma mensagem de erro:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.error</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> lightgrey<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-style</span><span class=\"token punctuation\">:</span> solid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Agora estamos prontos para adicionar a lógica para exibir a mensagem de erro. Vamos mudar a função <em>toggleImportanceOf</em> da seguinte maneira:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggleImportanceOf</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">id</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> changedNote <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>note<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">important</span><span class=\"token operator\">:</span> <span class=\"token operator\">!</span>note<span class=\"token punctuation\">.</span>important <span class=\"token punctuation\">}</span>\n\n    noteService\n      <span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> changedNote<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">returnedNote</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id <span class=\"token operator\">?</span> note <span class=\"token operator\">:</span> returnedNote<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token function\">setErrorMessage</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Note '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>note<span class=\"token punctuation\">.</span>content<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">' was already removed from server</span><span class=\"token template-punctuation string\">`</span></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token function\">setErrorMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span></span>        <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Quando o erro acontece, adicionamos uma mensagem de erro descritiva ao estado <em>errorMessage</em>. Ao mesmo tempo, iniciamos um temporizador, que definirá o estado <em>errorMessage</em> como <em>null</em> após 5 (cinco) segundos.</p>\n<p>O resultado fica assim:</p>\n<picture><img src=\"/static/dc474c748d9027b4fbc26a92c867ee99/5a190/26e.png\" alt=\"captura de tela de erro: removido do servidor da aplicação\" srcset=\"/static/dc474c748d9027b4fbc26a92c867ee99/772e8/26e.png 200w,\n/static/dc474c748d9027b4fbc26a92c867ee99/e17e5/26e.png 400w,\n/static/dc474c748d9027b4fbc26a92c867ee99/5a190/26e.png 800w,\n/static/dc474c748d9027b4fbc26a92c867ee99/c1b63/26e.png 1200w,\n/static/dc474c748d9027b4fbc26a92c867ee99/07d7d/26e.png 1478w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>O código para o estado atual da nossa aplicação pode ser encontrado na branch <i>part2-7</i> no <a href=\"https://github.com/fullstack-hy2020/part2-notes/tree/part2-7\">GitHub</a>.</p>\n<h3>Estilos inline</h3>\n<p>React também possibilita escrever estilos diretamente no código com o chamados <a href=\"https://reactjs.org/docs/dom-elements.html#style\">estilos inline</a> (ou \"estilos em linha\").</p>\n<p>A ideia por trás da definição de estilos inline é extremamente simples. É possível fornecer a qualquer componente ou elemento React um conjunto de propriedades CSS como um objeto JavaScript através do atributo <a href=\"https://reactjs.org/docs/dom-elements.html#style\">style</a> (estilo).</p>\n<p>As regras CSS são definidas de forma um tanto diferente em JavaScript se comparadas com as de arquivos CSS comuns. Digamos que quiséssemos dar a um elemento a cor verde e uma fonte itálica de 16 pixels de tamanho. Em CSS, ficaria assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-style</span><span class=\"token punctuation\">:</span> italic<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Mas como se trata de um objeto de estilo inline React, ficaria assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">fontStyle</span><span class=\"token operator\">:</span> <span class=\"token string\">'italic'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">fontSize</span><span class=\"token operator\">:</span> <span class=\"token number\">16</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cada propriedade CSS é definida como uma propriedade separada do objeto JavaScript. Valores numéricos em pixels podem ser definidos com simples números inteiros. Uma das principais diferenças em comparação ao CSS comum é que propriedades CSS com hífen (kebab case) são escritas em camelCase.</p>\n<p>Em seguida, poderíamos adicionar um \"bloco inferior\" à nossa aplicação criando um componente <i>Footer</i> e definindo-o com os seguintes estilos inline:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Footer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> footerStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token literal-property property\">fontStyle</span><span class=\"token operator\">:</span> <span class=\"token string\">'italic'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token literal-property property\">fontSize</span><span class=\"token operator\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>footerStyle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>em<span class=\"token operator\">></span>Note app<span class=\"token punctuation\">,</span> Department <span class=\"token keyword\">of</span> Computer Science<span class=\"token punctuation\">,</span> University <span class=\"token keyword\">of</span> Helsinki <span class=\"token number\">2022</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>em<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Notes<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>Notification message<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>errorMessage<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n      <span class=\"token comment\">// ...  </span>\n\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Footer <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Estilos inline possuem certas limitações. Por exemplo, não é possível usar as chamadas <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\">pseudo-classes</a> diretamente neles.</p>\n<p>Estilos inline e algumas outras maneiras de adicionar estilos aos componentes React vão completamente contra a corrente das antigas convenções. Tradicionalmente, tem sido considerada a melhor prática separar completamente o CSS do conteúdo (HTML) e da funcionalidade (JavaScript). De acordo com essa antiga escola de pensamento, o objetivo era escrever o CSS, o HTML e o JavaScript em arquivos separados.</p>\n<p>A filosofia do React é, na verdade, o oposto disso. Como a separação de CSS, HTML e JavaScript em arquivos separados não parecia ter escalabilidade em aplicativos maiores, o React baseia a divisão do aplicativo ao longo das linhas de suas entidades funcionais lógicas.</p>\n<p>As unidades estruturais que compõem as entidades funcionais da aplicação são os componentes React. Um componente React define o HTML para estruturar o conteúdo, as funções JavaScript para determinar a funcionalidade e também o estilo do componente; tudo em um só lugar. Isso é para criar componentes individuais que sejam o mais independentes e reutilizáveis possível.</p>\n<p>O código da versão final da nossa aplicação pode ser encontrado na branch <i>part2-8</i> no <a href=\"https://github.com/fullstack-hy2020/part2-notes/tree/part2-8\">GitHub</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercícios 2.16 a 2.17</h3>\n<h4>2.16: The Phonebook — 11º passo</h4>\n<p>Use como guia o exemplo da <a href=\"/ptbr/part2/adicionando_estilos_a_aplicacao_react#uma-mensagem-de-erro-aprimorada\">mensagem de erro aprimorada</a> da Parte 2 para exibir uma notificação que dure alguns segundos depois que uma operação bem-sucedida for executada (uma pessoa é adicionada ou um número é alterado):</p>\n<picture><img src=\"/static/da9af454f06489ca6e7453150beda738/5a190/27e.png\" alt=\"captura de tela: &#x27;adicionado com sucesso&#x27; em verde\" srcset=\"/static/da9af454f06489ca6e7453150beda738/772e8/27e.png 200w,\n/static/da9af454f06489ca6e7453150beda738/e17e5/27e.png 400w,\n/static/da9af454f06489ca6e7453150beda738/5a190/27e.png 800w,\n/static/da9af454f06489ca6e7453150beda738/c1b63/27e.png 1200w,\n/static/da9af454f06489ca6e7453150beda738/c0566/27e.png 1544w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>2.17*: The Phonebook — 12º passo</h4>\n<p>Abra sua aplicação em dois navegadores. <strong>Se você excluir uma pessoa no navegador 1</strong> um pouco antes de tentar <i>alterar o número de telefone da pessoa</i> no navegador 2, você receberá a seguinte mensagem de erro:</p>\n<picture><img src=\"/static/be832524a82a387fb3adddda37eaa149/5a190/29b.png\" alt=\"mensagem de erro &#x22;404 not found&#x22; quando se altera a aplicação em múltiplos navegadores\" srcset=\"/static/be832524a82a387fb3adddda37eaa149/772e8/29b.png 200w,\n/static/be832524a82a387fb3adddda37eaa149/e17e5/29b.png 400w,\n/static/be832524a82a387fb3adddda37eaa149/5a190/29b.png 800w,\n/static/be832524a82a387fb3adddda37eaa149/c1b63/29b.png 1200w,\n/static/be832524a82a387fb3adddda37eaa149/52576/29b.png 1412w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Corrija o problema de acordo com o exemplo mostrado em <a href=\"/ptbr/part2/alterando_dados_no_servidor#promessas-e-erros\">promessas e erros</a> na Parte 2. Modifique o exemplo para que uma mensagem seja mostrada ao usuário quando a operação for mal-sucedida. As mensagens exibidas para eventos bem e mal sucedidos devem ser diferentes:</p>\n<picture><img src=\"/static/dfc66f03514b3f013cf19ba1339ba34f/5a190/28e.png\" alt=\"mensagem de erro exibida na tela em vez do console - recurso complementar\" srcset=\"/static/dfc66f03514b3f013cf19ba1339ba34f/772e8/28e.png 200w,\n/static/dfc66f03514b3f013cf19ba1339ba34f/e17e5/28e.png 400w,\n/static/dfc66f03514b3f013cf19ba1339ba34f/5a190/28e.png 800w,\n/static/dfc66f03514b3f013cf19ba1339ba34f/c1b63/28e.png 1200w,\n/static/dfc66f03514b3f013cf19ba1339ba34f/71c1d/28e.png 1536w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p><strong>Observe</strong> que mesmo se você gerenciar (handle) a exceção, a mensagem de erro ainda é impressa no console.</p>\n</div>\n<div class=\"content\">\n<h3>Algumas observações importantes</h3>\n<p>Há alguns exercícios mais desafiadores no final desta parte. Você pode pular os exercícios se eles forem muito complicados, pois nós voltaremos aos mesmos temas mais tarde; porém, vale a pena ler o conteúdo, de qualquer forma.</p>\n<p>Fizemos uma coisa em nossa aplicação que \"mascara\" uma fonte muito típica de erro.</p>\n<p>Definimos o estado <em>notes</em> com um valor inicial de um array vazio:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esse é um valor inicial bem lógico, uma vez que as notas são um conjunto, isto é, há muitas notas que o estado irá armazenar.</p>\n<p>Se o estado estivesse salvando apenas \"uma coisa\", um valor inicial mais adequado seria <em>null</em>, indicando que não há <i>nada</i> no início do estado. Vamos ver o que acontece se usarmos esse valor inicial:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A aplicação quebra:</p>\n<picture><img src=\"/static/77d012a4fac919f86bf4f599f72a7d03/5a190/31a.png\" alt=\"console com erro de tipo: typerror cannot read properties of null\" srcset=\"/static/77d012a4fac919f86bf4f599f72a7d03/772e8/31a.png 200w,\n/static/77d012a4fac919f86bf4f599f72a7d03/e17e5/31a.png 400w,\n/static/77d012a4fac919f86bf4f599f72a7d03/5a190/31a.png 800w,\n/static/77d012a4fac919f86bf4f599f72a7d03/c1b63/31a.png 1200w,\n/static/77d012a4fac919f86bf4f599f72a7d03/b67f3/31a.png 1338w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>A mensagem de erro fornece a razão e a localização do erro. O código que causou o problema é o seguinte:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token comment\">// notesToShow gets the value of notes</span>\n  <span class=\"token keyword\">const</span> notesToShow <span class=\"token operator\">=</span> showAll\n    <span class=\"token operator\">?</span> notes\n    <span class=\"token operator\">:</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">{</span>notesToShow<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span></span>    <span class=\"token operator\">&lt;</span>Note key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> note<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>A mensagem de erro é:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Cannot read properties of null (reading 'map')</code></pre></div>\n<p>A variável <em>notesToShow</em> recebe primeiro o valor do estado <em>notes</em> e depois o código tenta chamar o método <em>map</em> em um objeto inexistente, ou seja, <em>null</em>.</p>\n<p>Qual é a razão disso?</p>\n<p>O hook de efeito (effect hook) utiliza a função <em>setNotes</em> para definir que <em>notes</em> terá as notas que o back-end está retornando:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    noteService\n      <span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialNotes</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>initialNotes<span class=\"token punctuation\">)</span></span>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>No entanto, o problema é que o efeito é executado somente <i>após a primeira renderização</i>.\nE por conta de <em>notes</em> ter o valor inicial <em>null</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token comment\">// ...</span></code></pre></div>\n<p>o código a seguir é executado na primeira renderização:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">notesToShow <span class=\"token operator\">=</span> notes\n\n<span class=\"token comment\">// ...</span>\n\nnotesToShow<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>e isso faz com que a aplicação quebre, já que não podemos chamar o método <em>map</em> no valor <em>null</em>.</p>\n<p>Não há erro quando definimos <em>notes</em> para ser inicialmente um array vazio, já que é permitido chamar o método <em>map</em> em um array vazio.</p>\n<p>Assim, a inicialização do estado \"mascarou\" o problema que é causado pelo fato de que os dados ainda não foram buscados no back-end.</p>\n<p>Outra maneira de contornar o problema é usar a renderização condicional e retornar um valor nulo se o estado do componente não estiver adequadamente inicializado:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></span>  <span class=\"token comment\">// ... </span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    noteService\n      <span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialNotes</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>initialNotes<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// do not render anything if notes is still null</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>notes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> </span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span> </span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n<p>Assim, nada é renderizado na primeira renderização. Quando as notas chegam do servidor, o efeito usa a função <em>setNotes</em> que define o valor do estado <em>notes</em>. Isso faz com que o componente seja renderizado novamente e, na segunda renderização, as notas são exibidas na tela.</p>\n<p>O método baseado na renderização condicional é adequado em casos em que é impossível definir o estado para o qual a renderização inicial seja possível.</p>\n<p>Um outro detalhe que ainda precisamos examinar mais de perto é o segundo parâmetro de useEffect:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    noteService\n      <span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialNotes</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>initialNotes<span class=\"token punctuation\">)</span>  \n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span></code></pre></div>\n<p>O segundo parâmetro de <em>useEffect</em> é utilizado para <a href=\"https://reactjs.org/docs/hooks-reference.html#conditionally-firing-an-effect\">especificar com que frequência o efeito é executado</a>.\nO princípio é que o efeito é sempre executado após a primeira renderização do componente <i>e</i> quando o valor do segundo parâmetro muda.</p>\n<p>Se o segundo parâmetro for um array vazio <em>[]</em>, seu conteúdo nunca muda e o efeito é executado somente após a primeira renderização do componente. Isso é exatamente o que queremos quando estamos inicializando o estado da aplicação a partir do servidor.</p>\n<p>No entanto, há situações em que queremos executar o efeito em outros momentos, por exemplo, quando o estado do componente muda de uma maneira específica.</p>\n<p>Considere a aplicação simples a seguir que consulta as taxas de câmbio da <a href=\"https://www.exchangerate-api.com/\">Exchange rate API</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>rates<span class=\"token punctuation\">,</span> setRates<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>currency<span class=\"token punctuation\">,</span> setCurrency<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'effect run, currency is now'</span><span class=\"token punctuation\">,</span> currency<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// skip if currency is not defined</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currency<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetching exchange rates...'</span><span class=\"token punctuation\">)</span>\n      axios\n        <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://open.er-api.com/v6/latest/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>currency<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setRates</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>rates<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>currency<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onSearch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setCurrency</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onSearch<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token literal-property property\">currency</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>input value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleChange<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>exchange rate<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>pre<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>rates<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>pre<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A interface de usuário da aplicação possui um formulário, onde no campo de entrada é escrito o nome da moeda (currency) desejada. Se a moeda existir, a aplicação renderiza as taxas de câmbio da moeda inserida para outras moedas:</p>\n<picture><img src=\"/static/64e557ce874775859acba65ed012afb4/5a190/32new.png\" alt=\"Navegador exibindo taxas de câmbio com &#x22;eur&#x22; digitado e console dizendo &#x22;buscando as taxas de câmbio...&#x22;\" srcset=\"/static/64e557ce874775859acba65ed012afb4/772e8/32new.png 200w,\n/static/64e557ce874775859acba65ed012afb4/e17e5/32new.png 400w,\n/static/64e557ce874775859acba65ed012afb4/5a190/32new.png 800w,\n/static/64e557ce874775859acba65ed012afb4/c1b63/32new.png 1200w,\n/static/64e557ce874775859acba65ed012afb4/229ad/32new.png 1356w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Quando o botão é clicado, a aplicação pega o nome da moeda inserido no formulário e faz o set no estado <em>currency</em>.</p>\n<p>Quando <em>currency</em> recebe um novo valor, a aplicação busca suas taxas de câmbio da API na função de efeito:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>currency<span class=\"token punctuation\">,</span> setCurrency<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'effect run, currency is now'</span><span class=\"token punctuation\">,</span> currency<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// skip if currency is not defined</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currency<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetching exchange rates...'</span><span class=\"token punctuation\">)</span>\n      axios\n        <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://open.er-api.com/v6/latest/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>currency<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setRates</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>rates<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>currency<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O hook useEffect agora tem <em>[currency]</em> como segundo parâmetro. A função de efeito é, portanto, executada após a primeira renderização e <i>sempre</i> depois que a tabela que é definida no segundo parâmetro <em>[currency]</em> muda. Ou seja, quando o estado <em>currency</em> recebe um novo valor, o conteúdo da tabela muda e a função de efeito é executada.</p>\n<p>O efeito tem esta condição:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currency<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token comment\">// exchange rates are fetched</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>que impede a requisição das taxas de câmbio logo após a primeira renderização, quando a variável <em>currency</em> ainda tem o valor inicial, ou seja, um valor nulo.</p>\n<p>Portanto, se o usuário escrever, por exemplo, <i>eur</i> no campo de pesquisa, a aplicação usa a biblioteca Axios para fazer uma requisição HTTP GET ao endereço <a href=\"https://open.er-api.com/v6/latest/eur\">https://open.er-api.com/v6/latest/eur</a> e armazena a resposta no estado <em>rates</em>.</p>\n<p>Quando o usuário inserir outro valor no campo de pesquisa, por exemplo, <i>usd</i>, a função de efeito é executada novamente e as taxas de câmbio da nova moeda são requisitadas da API.</p>\n<p>A forma apresentada aqui para fazer requisições à API pode parecer um pouco estranha.\nEsta aplicação em específico poderia ter sido completamente construída sem a necessidade de usar o hook useEffect, por meio de requisições feitas à API diretamente na função de gerência de envio do formulário:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onSearch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    axios\n      <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://open.er-api.com/v6/latest/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setRates</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>rates<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>No entanto, existem situações em que essa técnica não funcionaria. Por exemplo, é <i>possível</i> que você encontre uma situação dessas no exercício 2.20, onde o uso do hook useEffect possa fornecer uma solução. Observe que isso depende muito da abordagem selecionada; por exemplo, a solução do modelo não usa esse truque.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercícios 2.18 a 2.20</h3>\n<h4>2.18*: Data for countries — 1º passo</h4>\n<p>A API <a href=\"https://restcountries.com\">https://restcountries.com</a> fornece dados de diferentes países em um formato legível por máquina (machine-readable format), uma chamada API REST.</p>\n<p><i><strong>Nota dos tradutores:</strong> A API recebe consultas somente em inglês.</i></p>\n<p>Crie uma aplicação onde se possa ver os dados de vários países. A aplicação vai provavelmente obter os dados do <i>endpoint</i> <a href=\"https://restcountries.com/v3.1/all\">all</a>.</p>\n<p>Se o serviço não estiver disponível, você pode usar o serviço alternativo em <a href=\"https://studies.cs.helsinki.fi/restcountries/\">https://studies.cs.helsinki.fi/restcountries/</a></p>\n<p>A interface de usuário é muito simples. O país a ser exibido deve ser encontrado através de uma consulta em um campo de pesquisa.</p>\n<p>Se houver muitos países (mais de 10) que correspondam à consulta, é solicitado ao usuário que seja mais específico na consulta:</p>\n<picture><img src=\"/static/d8a3e3b3af8907d0c3dd495ef0d26ba6/5a190/19b1.png\" alt=\"captura de tela com a resposta &#x27;too many matches&#x27;\" srcset=\"/static/d8a3e3b3af8907d0c3dd495ef0d26ba6/772e8/19b1.png 200w,\n/static/d8a3e3b3af8907d0c3dd495ef0d26ba6/e17e5/19b1.png 400w,\n/static/d8a3e3b3af8907d0c3dd495ef0d26ba6/5a190/19b1.png 800w,\n/static/d8a3e3b3af8907d0c3dd495ef0d26ba6/c1b63/19b1.png 1200w,\n/static/d8a3e3b3af8907d0c3dd495ef0d26ba6/2a08f/19b1.png 1422w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Se houver dez ou menos países, porém mais de um, todos os países que correspondem à consulta são exibidos:</p>\n<picture><img src=\"/static/1d4ebf199806ccfe0df529c08e2a0c6d/5a190/19b2.png\" alt=\"captura de tela dos países correspondentes em uma lista\" srcset=\"/static/1d4ebf199806ccfe0df529c08e2a0c6d/772e8/19b2.png 200w,\n/static/1d4ebf199806ccfe0df529c08e2a0c6d/e17e5/19b2.png 400w,\n/static/1d4ebf199806ccfe0df529c08e2a0c6d/5a190/19b2.png 800w,\n/static/1d4ebf199806ccfe0df529c08e2a0c6d/c1b63/19b2.png 1200w,\n/static/1d4ebf199806ccfe0df529c08e2a0c6d/1e093/19b2.png 1376w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Quando houver apenas um país que corresponda à consulta, os dados básicos do país (capital e área, por exemplo), sua bandeira e os idiomas falados no país são exibidos:</p>\n<picture><img src=\"/static/1da341d99aa963449991676f4f6c34b3/5a190/19c3.png\" alt=\"captura de tela da bandeira e dos atributos adicionais\" srcset=\"/static/1da341d99aa963449991676f4f6c34b3/772e8/19c3.png 200w,\n/static/1da341d99aa963449991676f4f6c34b3/e17e5/19c3.png 400w,\n/static/1da341d99aa963449991676f4f6c34b3/5a190/19c3.png 800w,\n/static/1da341d99aa963449991676f4f6c34b3/c1b63/19c3.png 1200w,\n/static/1da341d99aa963449991676f4f6c34b3/2cefc/19c3.png 1400w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p><strong>Obs.:</strong>: Já é suficiente que sua aplicação funcione para a maioria dos países. Alguns países, como o <i>Sudan</i> (Sudão), podem ser difíceis de ajustar, já que o nome do país faz parte do nome de outro país, <i>South Sudan</i> (Sudão do Sul). Você não precisa se preocupar com esses casos extremos.</p>\n<p><strong>AVISO</strong>: \"create-react-app\" transformará automaticamente seu projeto em um repositório git, a menos que você crie sua aplicação dentro de um repositório git já existente.<strong>Você muito provavelmente não quer que cada um de seus projetos seja um repositório separado</strong>, então basta executar o comando <em>rm -rf .git</em> na raiz de sua aplicação para aplicar as modificações.</p>\n<h4>2.19*: Data for countries — 2º passo</h4>\n<p><strong>Ainda há muito o que fazer nesta parte, então não fique preso neste exercício!</strong></p>\n<p>Melhore a aplicação do exercício anterior de modo que quando os nomes de vários países são exibidos na página, haja um botão ao lado do nome do país que, ao ser clicado, exiba as informações desse país:</p>\n<picture><img src=\"/static/b8986829d36bd14bbbd6270e0e8d2edf/5a190/19b4.png\" alt=\"funcionalidade atrelada que exibe botões para cada país\" srcset=\"/static/b8986829d36bd14bbbd6270e0e8d2edf/772e8/19b4.png 200w,\n/static/b8986829d36bd14bbbd6270e0e8d2edf/e17e5/19b4.png 400w,\n/static/b8986829d36bd14bbbd6270e0e8d2edf/5a190/19b4.png 800w,\n/static/b8986829d36bd14bbbd6270e0e8d2edf/c1b63/19b4.png 1200w,\n/static/b8986829d36bd14bbbd6270e0e8d2edf/c1bea/19b4.png 1388w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Neste exercício, é suficiente que sua aplicação funcione para a maioria dos países. Países cujo nome aparece no nome de outro país, como o <i>Sudão</i>, podem ser ignorados.</p>\n<h4>2.20*: Data for countries — 3º passo</h4>\n<p><strong>Ainda há muito o que fazer nesta parte, então não fique preso neste exercício!</strong></p>\n<p>Adicione à funcionalidade que exibe os dados de um único país o relatório meteorológico para a capital desse país. Existem dezenas de provedores de dados meteorológicos. Uma API sugerida é a <a href=\"https://openweathermap.org\">https://openweathermap.org</a>. Observe que pode levar alguns minutos até que a chave gerada da API seja validada.</p>\n<picture><img src=\"/static/5b436dff5ae7a4e1f6e15c7ba95a29be/5a190/19x.png\" alt=\"funcionalidade adicionada que exibe os dados meteorológicos\" srcset=\"/static/5b436dff5ae7a4e1f6e15c7ba95a29be/772e8/19x.png 200w,\n/static/5b436dff5ae7a4e1f6e15c7ba95a29be/e17e5/19x.png 400w,\n/static/5b436dff5ae7a4e1f6e15c7ba95a29be/5a190/19x.png 800w,\n/static/5b436dff5ae7a4e1f6e15c7ba95a29be/c1b63/19x.png 1200w,\n/static/5b436dff5ae7a4e1f6e15c7ba95a29be/87488/19x.png 1282w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Se você usar o Open Weather map, a descrição de como obter os ícones climáticos encontra-se <a href=\"https://openweathermap.org/weather-conditions#Icon-list\">aqui</a>.</p>\n<p><strong>Obs.::</strong> Em alguns navegadores (como o Firefox), a API escolhida pode enviar uma resposta de erro, o que indica que a criptografia HTTPS não é suportada, mesmo que a URL da requisição comece com <em>http://</em>. Esse problema pode ser corrigido concluindo o exercício usando o Chrome.</p>\n<p><strong>Obs.::</strong> Quase todos os serviços meteorológicos exigem que você use uma chave de API. Não salve a chave de API no controle de versão (Git)! Nem programe usando a chave de API em seu código-fonte. Em vez disso, use uma <a href=\"https://create-react-app.dev/docs/adding-custom-environment-variables/\">variável de ambiente</a> (environment variable) para salvar a chave.</p>\n<p>Supondo que a chave de API seja <i>t0p53cr3t4p1k3yv4lu3</i>, quando a aplicação é iniciada desta forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">REACT_APP_API_KEY</span><span class=\"token operator\">=</span>t0p53cr3t4p1k3yv4lu3 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">npm</span> start // Para o Bash <span class=\"token keyword\">do</span> Linux/macOS\n<span class=\"token punctuation\">(</span><span class=\"token variable\">$env</span>:REACT_APP_API_KEY<span class=\"token operator\">=</span><span class=\"token string\">\"t0p53cr3t4p1k3yv4lu3\"</span><span class=\"token punctuation\">)</span> <span class=\"token parameter variable\">-and</span> <span class=\"token punctuation\">(</span>npm start<span class=\"token punctuation\">)</span> // Para o PowerShell <span class=\"token keyword\">do</span> Windows\n<span class=\"token builtin class-name\">set</span> <span class=\"token string\">\"REACT_APP_API_KEY=t0p53cr3t4p1k3yv4lu3\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">npm</span> start // Para o cmd.exe <span class=\"token keyword\">do</span> Windows</code></pre></div>\n<p>é possível acessar o valor da chave através do objeto <em>process.env</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> api_key <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">REACT_APP_API_KEY</span>\n<span class=\"token comment\">// variable api_key has now the value set in startup</span></code></pre></div>\n<p>Observe que, se você criou a aplicação usando <em>npx create-react-app ...</em> e deseja usar um nome diferente para sua variável de ambiente, o nome da variável de ambiente ainda deve começar com <em>REACT_APP_</em>. Também é possível usar um arquivo <code class=\"language-text\">.env</code> em vez de defini-la na linha de comando todas a vezes, criando um arquivo chamado '.env' na raiz do projeto e adicionando o seguinte:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># .env\n\nREACT_APP_API_KEY=t0p53cr3t4p1k3yv4lu3</code></pre></div>\n<p>Observe que você precisará reiniciar o servidor para aplicar as alterações.</p>\n<p>Este foi o último exercício para esta parte do curso, e é hora de enviar seu código para o GitHub e marcar todos os seus exercícios concluídos na guia \"my submissions\" do <a href=\"https://studies.cs.helsinki.fi/stats/courses/fullstackopen\">sistema de envio de exercícios</a>.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/8869c2e065a6ae187c633a378e6fa6be/part-2.svg"},"part":2,"letter":"e","lang":"ptbr"}}},"pageContext":{"part":2,"letter":"e","lang":"ptbr"}},"staticQueryHashes":["3128451518"]}
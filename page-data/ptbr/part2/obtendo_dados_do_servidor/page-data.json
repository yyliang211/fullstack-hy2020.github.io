{"componentChunkName":"component---src-templates-content-template-js","path":"/ptbr/part2/obtendo_dados_do_servidor","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Já estamos trabalhando há um tempo apenas no \"front-end\", ou seja, com as funcionalidades do lado do cliente (navegador). Começaremos a trabalhar no \"back-end\", ou seja, com as funcionalidades do lado do servidor na <a href=\"/ptbr/part3\">Parte 3</a> deste curso. Contudo, agora daremos um passo nessa direção, assim familiarizando-nos com a comunicação do código executado no navegador com o back-end.</p>\n<p>Vamos usar uma ferramenta destinada a ser usada durante a fase de desenvolvimento de software chamada <a href=\"https://github.com/typicode/json-server\">JSON Server</a>, que atuará como nosso servidor.</p>\n<p>Crie um arquivo chamado <i>db.json</i> na raiz do diretório do projeto de notas com o seguinte conteúdo:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"notes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HTML é fácil\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"important\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"O navegador só pode executar JavaScript\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"important\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"GET e POST são os métodos mais importantes do protocolo HTTP\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"important\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>É possível <a href=\"https://github.com/typicode/json-server#getting-started\">instalar</a> globalmente um servidor JSON na sua máquina usando o comando <em>npm install -g json-server</em>. Uma instalação global requer privilégios administrativos, o que significa que não é possível fazer isso em computadores de faculdade, etc.</p>\n<p>Após a instalação, execute o seguinte comando para executar o json-server. O <i>json-server</i> é executado na porta 3000 por padrão; porém, como projetos criados usando o \"create-react-app\" reservam a porta 3000 para si, devemos definir uma porta alternativa — como a porta 3001 — para o json-server. A opção <em>--watch</em> procura automaticamente por quaisquer alterações salvas no arquivo <i>db.json</i>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">json<span class=\"token operator\">-</span>server <span class=\"token operator\">--</span>port <span class=\"token number\">3001</span> <span class=\"token operator\">--</span>watch db<span class=\"token punctuation\">.</span>json</code></pre></div>\n<p>Entretanto, não é necessária uma instalação global. A partir da raiz do diretório da sua aplicação, podemos executar o <i>json-server</i> usando o comando <em>npx</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npx json<span class=\"token operator\">-</span>server <span class=\"token operator\">--</span>port <span class=\"token number\">3001</span> <span class=\"token operator\">--</span>watch db<span class=\"token punctuation\">.</span>json</code></pre></div>\n<p>Vamos acessar o endereço <a href=\"http://localhost:3001/notes\">http://localhost:3001/notes</a> no navegador. Vemos que o <i>json-server</i> serve as notas que escrevemos anteriormente no arquivo em formato JSON:</p>\n<picture><img src=\"/static/54ed5132fd3709a332163fd676e8d4bc/5a190/14new.png\" srcset=\"/static/54ed5132fd3709a332163fd676e8d4bc/772e8/14new.png 200w,\n/static/54ed5132fd3709a332163fd676e8d4bc/e17e5/14new.png 400w,\n/static/54ed5132fd3709a332163fd676e8d4bc/5a190/14new.png 800w,\n/static/54ed5132fd3709a332163fd676e8d4bc/c1b63/14new.png 1200w,\n/static/54ed5132fd3709a332163fd676e8d4bc/29007/14new.png 1600w,\n/static/54ed5132fd3709a332163fd676e8d4bc/49ee2/14new.png 1618w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Se o seu navegador não tiver um formatador para exibir os dados JSON, instale um plugin como o <a href=\"https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc\">JSONVue</a> para facilitar sua vida.</p>\n<p>A partir de agora, a ideia será salvar as notas no servidor, que, neste caso, significa salvá-las no json-server. O código React busca as notas do servidor e as renderiza na tela. Sempre que uma nova nota é adicionada à aplicação, o código React também a envia ao servidor para que a nova nota persista (persist — leia mais sobre persistência de dados <a href=\"https://www.take.net/blog/tecnologia/persistencia-de-dados/\">aqui</a>) na \"memória\".</p>\n<p>O json-server armazena todos os dados no arquivo <i>db.json</i>, que reside no servidor. No mundo real, os dados seriam armazenados em algum tipo de banco de dados. No entanto, o json-server é uma ferramenta muito útil que permite o uso da funcionalidade de um servidor na fase de desenvolvimento sem a necessidade de programar nenhum desses outros softwares.</p>\n<p>Nos familiarizaremos com os princípios de implementação das funcionalidades de um servidor com mais detalhes na <a href=\"/ptbr/part3\">parte 3</a> deste curso.</p>\n<h3>O navegador como ambiente de execução</h3>\n<p>Nossa primeira tarefa é buscar as notas já existentes em nossa aplicação React a partir do endereço <a href=\"http://localhost:3001/notes\">http://localhost:3001/notes</a>.</p>\n<p>Na <a href=\"/ptbr/part0/fundamentos_de_aplicacoes_web#executando-a-logica-da-aplicacao-no-navegador\">projeto-exemplo</a> da Parte 0, já aprendemos uma maneira de buscar dados de um servidor usando JavaScript. O código no exemplo estava buscando os dados usando <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a>, também conhecido como uma \"requisição HTTP\" feita usando um objeto XHR. Esta é uma técnica introduzida em 1999, no qual todos os navegadores têm oferecido suporte a ela já faz um bom tempo.</p>\n<p>Já não é mais recomendado o uso do objeto XHR, e a maioria dos navegadores já suportam amplamente o método <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\">fetch</a> (\"ir buscar\" ou \"buscar\"), que é baseado em chamadas conhecidas como <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">promessas</a> (promises), ao invés do modelo de gerenciamento de eventos utilizado pelo XHR.</p>\n<p>Como lembrete da Parte 0 (que deve ser lembrado <i>de não ser usado</i> sem um motivo plausível), os dados foram buscados usando o XHR da seguinte maneira:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> xhttp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nxhttp<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// gerencia a resposta que é salva nos dados variáveis</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nxhttp<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/data.json'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\nxhttp<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Desde o início, registramos um <i>gerenciador de evento</i> ao objeto <em>xhttp</em> representando a requisição HTTP, que será chamado pelo ambiente de execução JavaScript sempre que o estado do objeto <em>xhttp</em> mudar. Se a mudança no estado significa que a resposta à requisição chegou, então os dados são lidos de acordo com o que foi estabelecido.</p>\n<p>Vale a pena notar que o código no gerenciador de evento é definido antes da requisição ser enviada ao servidor. Mesmo assim, o código dentro do gerenciador de evento será executado em um momento posterior. Portanto, o código não executa sincronicamente \"de cima para baixo\", mas sim <i>assincronamente</i> (asynchronously). JavaScript chama em algum momento o gerenciador de evento que foi registrado para a requisição.</p>\n<p>Uma forma comum de fazer requisições síncronas em Java, por exemplo, funcionaria da seguinte maneira (N.B. (Nota Bene): este código Java não funciona):</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">HTTPRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HTTPRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://studies.cs.helsinki.fi/exampleapp/data.json\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Note</span><span class=\"token punctuation\">></span></span> notes <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nnotes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Em Java, o código é executado linha a linha e é interrompido para esperar pela requisição HTTP, o que significa esperar até o comando <em>request.get(...)</em> ser concluído. Os dados retornados pelo comando, neste caso as notas, são então armazenados em uma variável na qual podemos manipular os dados da maneira que desejarmos.</p>\n<p>Por outro lado, os ambientes de tempo de execução JavaScript, ou \"engines\" (motores), seguem o <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop\">modelo assíncrono</a>. Em princípio, isso requer que todas as <a href=\"https://en.wikipedia.org/wiki/Input/output\">operações IO</a> (com algumas exceções) sejam executadas como não-bloqueantes. Isso significa que a execução do código continua imediatamente após a chamada de uma função IO, sem esperar que ela termine.</p>\n<p>Quando uma operação assíncrona é concluída, ou mais especificamente, algum tempo depois de sua conclusão, o que acontece é que o motor JavaScript chama os gerenciadores de evento registrados na operação.</p>\n<p>Atualmente, os motores JavaScript são <i>single-threaded</i> (linha de execução única), o que significa que não podem executar código em paralelo. Como resultado, na prática, é uma exigência usar um modelo não-bloqueante para a execução de operações IO. Caso contrário, o navegador \"congelaria\" durante a busca de dados em um servidor, por exemplo.</p>\n<p>Outra consequência da natureza single-threaded dos motores JavaScript é que se alguma execução de código levar muito tempo, o navegador ficará preso durante toda a execução. Se adicionássemos o seguinte código no topo de nossa aplicação...</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loop..'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">50000000000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    i<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fim do loop'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>... tudo funcionaria normalmente por 5 segundos. No entanto, quando a função definida como o parâmetro para <em>setTimeout</em> é executada, o navegador fica preso durante toda a execução do longo loop. Mesmo a aba do navegador não pode ser fechada durante a execução do loop, pelo menos não no Chrome.</p>\n<p>Para o navegador permanecer <i>responsivo</i>, ou seja, ser capaz de reagir continuamente às operações do usuário com velocidade suficiente, a lógica do código precisa ser tal que nenhuma única computação tenha de levar tanto tempo para se realizar.</p>\n<p>Existe uma série de materiais sobre o tema disponíveis na internet. Uma apresentação particularmente clara do tópico é a palestra de Philip Roberts chamada <a href=\"https://www.youtube.com/watch?v=8aGhZQkoFbQ\">What the heck is the event loop anyway?</a> (disponível em português).</p>\n<p>É possível executar código paralelizado nos navegadores de hoje em dia com a ajuda dos chamados <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\">web workers</a>. No entanto, o loop de eventos de uma única janela do navegador ainda é realizado como <a href=\"https://medium.com/techtrument/multithreading-javascript-46156179cf9a\">single thread</a>.</p>\n<h3>npm</h3>\n<p>Vamos voltar ao assunto sobre obtenção de dados do servidor.</p>\n<p>Poderíamos usar a função baseada em promessas <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\">fetch</a>, mencionada anteriormente, para puxar (pull) os dados do servidor. Fetch é uma ótima ferramenta. É padronizada e tem suporte em todos os navegadores modernos (exceto o IE [Internet Explorer]).</p>\n<p>Dito isso, usaremos a biblioteca <a href=\"https://github.com/axios/axios\">axios</a> para fazer essa comunicação entre navegador e servidor. Ela funciona como o fetch, mas é um pouco mais agradável de se usar. Outra boa razão para usar o axios é que nos familiarizaremos com a adição de bibliotecas externas em projetos React, conhecidas como <i>pacotes npm</i> (npm packages).</p>\n<p>Hoje em dia, praticamente todos os projetos JavaScript são definidos usando o gerenciador de pacotes do Node, conhecido como <a href=\"https://docs.npmjs.com/getting-started/what-is-npm\">npm</a> (abreviação de \"Node Package Manager\"). Os projetos criados usando \"create-react-app\" também seguem o formato npm. Um indicador claro de que um projeto usa npm é o arquivo <i>package.json</i> localizado na raiz do projeto:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"notes-frontend\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"private\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@testing-library/jest-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^5.16.5\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@testing-library/react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^13.4.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@testing-library/user-event\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^13.5.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^18.2.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^18.2.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react-scripts\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5.0.1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"web-vitals\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.1.4\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts start\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts test\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"eject\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts eject\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslintConfig\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"react-app\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"react-app/jest\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"browserslist\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"production\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\">0.2%\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"not dead\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"not op_mini all\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"development\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"last 1 chrome version\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"last 1 firefox version\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"last 1 safari version\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Neste ponto, o objeto <i>dependencies</i>, que é uma parte do documento <i>package.json</i>, é o que mais nos interessa agora, pois define quais são as <i>dependências</i> ou bibliotecas externas do projeto.</p>\n<p>Agora queremos usar o axios. Teoricamente, poderíamos definir a biblioteca diretamente no arquivo <i>package.json</i>, mas é melhor instalá-la a partir da linha de comando.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install axios</code></pre></div>\n<p><strong>N.B.: os comandos do <em>npm</em> sempre devem ser executados no diretório raiz do projeto</strong>, onde o arquivo <i>package.json</i> pode ser encontrado.</p>\n<p>O axios agora está incluído entre as outras dependências:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"notes-frontend\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"private\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@testing-library/jest-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^5.16.5\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@testing-library/react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^13.4.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@testing-library/user-event\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^13.5.0\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"axios\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.2.2\"</span><span class=\"token punctuation\">,</span></span>    <span class=\"token property\">\"react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^18.2.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^18.2.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react-scripts\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5.0.1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"web-vitals\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.1.4\"</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Além de adicionar o axios às dependências, o comando <em>npm install</em> também <i>baixou</i> o código da biblioteca. Como outras dependências, o código pode ser encontrado no diretório <i>node<em>modules</i> localizado na raiz. É possível notar que o diretório <i>node</em>modules</i> contém uma quantidade significativa de coisas interessantes.</p>\n<p>Vamos fazer mais uma adição. Instale o <i>json-server</i> como uma dependência de desenvolvimento (usado apenas durante o desenvolvimento) executando o comando...</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install json<span class=\"token operator\">-</span>server <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</code></pre></div>\n<p>... e fazendo uma pequena adição ao objeto <i>scripts</i> do arquivo <i>package.json</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts start\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts test\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"eject\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts eject\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"server\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"json-server -p3001 --watch db.json\"</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Agora podemos, convenientemente e sem definições de parâmetros, iniciar o json-server a partir do diretório raiz do projeto com o comando:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm run server</code></pre></div>\n<p>Vamos ficar mais familiarizados com a ferramenta <em>npm</em> na <a href=\"/ptbr/part3\">terceira parte do curso</a>.</p>\n<p><strong>N.B.:</strong> O json-server que foi iniciado anteriormente deve ser encerrado antes de iniciar um novo; caso contrário, haverá problemas:</p>\n<picture><img src=\"/static/7f3c94f76fa1a5a1e55bf4dcd691d3e8/5a190/15b.png\" alt=\"erro: cannot bind to port 3001\" srcset=\"/static/7f3c94f76fa1a5a1e55bf4dcd691d3e8/772e8/15b.png 200w,\n/static/7f3c94f76fa1a5a1e55bf4dcd691d3e8/e17e5/15b.png 400w,\n/static/7f3c94f76fa1a5a1e55bf4dcd691d3e8/5a190/15b.png 800w,\n/static/7f3c94f76fa1a5a1e55bf4dcd691d3e8/c1b63/15b.png 1200w,\n/static/7f3c94f76fa1a5a1e55bf4dcd691d3e8/5df5d/15b.png 1572w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>A mensagem de erro em vermelho nos informa sobre o problema:</p>\n<p><i>Não é possível vincular-se ao número da porta 3001. Por favor, especifique outro número de porta, seja através do argumento --port ou através do arquivo de configuração json-server.json</i></p>\n<p>Como podemos ver, a aplicação não é capaz de se vincular à <a href=\"https://en.wikipedia.org/wiki/Port_(computer_networking)\">porta</a> (port). O motivo é que a porta 3001 já está ocupada pelo json-server iniciado anteriormente.</p>\n<p>Usamos o comando <em>npm install</em> duas vezes, mas com pequenas modificações:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install axios\nnpm install json<span class=\"token operator\">-</span>server <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</code></pre></div>\n<p>Há uma pequena diferença nos parâmetros. O <i>axios</i> é instalado como uma dependência de tempo de execução da aplicação, pois a execução do programa exige a existência da biblioteca. Por outro lado, o <i>json-server</i> foi instalado como uma dependência de desenvolvimento (<em>--save-dev</em>), uma vez que o próprio programa não o requer. Ele é usado para ajudar durante a fase de desenvolvimento do software. Mais há de ser dito sobre diferentes dependências na próxima parte do curso.</p>\n<h3>Axios e promessas (promises)</h3>\n<p>Estamos prontos para usar a biblioteca axios. A partir de agora, supõe-se que o json-server esteja rodando na porta 3001.</p>\n<p><strong>N.B.</strong>: Para executar o json-server e sua aplicação React simultaneamente, é possível que seja necessário usar duas janelas do terminal. Uma para manter o json-server em execução e outra para executar a aplicação React.</p>\n<p>A biblioteca pode ser utilizada da mesma maneira que outras bibliotecas, como React, por exemplo, através de uma declaração <em>import</em> adequada.</p>\n<p>Adicione o seguinte ao arquivo <i>index.js</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> promise2 <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/foobar'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>promise2<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Se você acessar o endereço <a href=\"http://localhost:3000\">http://localhost:3000</a> no navegador, deve ser impresso isso no console:</p>\n<picture><img src=\"/static/4fc5b28367c364237b3f37017125e346/5a190/16new.png\" alt=\"promessas impressas no console\" srcset=\"/static/4fc5b28367c364237b3f37017125e346/772e8/16new.png 200w,\n/static/4fc5b28367c364237b3f37017125e346/e17e5/16new.png 400w,\n/static/4fc5b28367c364237b3f37017125e346/5a190/16new.png 800w,\n/static/4fc5b28367c364237b3f37017125e346/c1b63/16new.png 1200w,\n/static/4fc5b28367c364237b3f37017125e346/5df5d/16new.png 1572w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>O método <em>get</em> do Axios retorna uma <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises\">promessa</a> (promise).</p>\n<p>A documentação no site da Mozilla afirma o seguinte sobre \"promessas\":</p>\n<blockquote>\n<p><i>Uma Promise (promessa) é um objeto que representa a eventual conclusão ou falha de uma operação assíncrona.</i></p>\n</blockquote>\n<p>Em outras palavras, uma promessa é um objeto que representa uma operação assíncrona. Uma promessa pode ter três estados distintos:</p>\n<ol>\n<li>A promessa está <i>pendente</i> (<i>pending</i>): significa que o valor final (uma das operações seguintes) ainda não está disponível.</li>\n<li>A promessa está <i>realizada</i> (<i>fulfilled</i>): significa que a operação foi concluída e o valor final está disponível, o que geralmente é uma operação bem-sucedida. Este estado às vezes também é chamado de <i>resolvido(a)</i> (<i>resolved</i>).</li>\n<li>A promessa está <i>rejeitada</i> (<i>rejected</i>): significa que um erro impediu que o valor final fosse determinado, o que geralmente representa uma operação falha.</li>\n</ol>\n<p>A primeira promessa em nosso exemplo foi <i>realizada</i>, representando uma requisição bem-sucedida <em>axios.get('<a href=\"http://localhost:3001/notes&#x27;\">http://localhost:3001/notes'</a>)</em>. A segunda, no entanto, foi <i>rejeitada</i> e o console nos diz o motivo. Parece que estamos tentando fazer uma requisição HTTP GET a um endereço que não existe.</p>\n<p>Se e quando quisermos acessar o resultado da operação representada pela promessa, devemos registrar um gerenciador de evento para ela. Isso é feito utilizando o método <em>then</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span>\n\npromise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>O seguinte é impresso no console:</p>\n<picture><img src=\"/static/83c299b357ca5f9ebe7540ad572fd701/5a190/17new.png\" alt=\"dados de um objeto json impressos no console\" srcset=\"/static/83c299b357ca5f9ebe7540ad572fd701/772e8/17new.png 200w,\n/static/83c299b357ca5f9ebe7540ad572fd701/e17e5/17new.png 400w,\n/static/83c299b357ca5f9ebe7540ad572fd701/5a190/17new.png 800w,\n/static/83c299b357ca5f9ebe7540ad572fd701/c1b63/17new.png 1200w,\n/static/83c299b357ca5f9ebe7540ad572fd701/29007/17new.png 1600w,\n/static/83c299b357ca5f9ebe7540ad572fd701/bce1e/17new.png 1696w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>O ambiente de tempo de execução JavaScript chama a função callback (função de retorno de chamada) registrada pelo método <em>then</em> fornecendo-lhe um objeto <em>response</em> como parâmetro. O objeto <em>response</em> contém todos os dados essenciais relacionados à resposta de uma requisição HTTP GET, que incluiria os dados retornados <i>data</i>, o <i>código de status</i> e os <i>cabeçalhos</i>.</p>\n<p>Em geral, armazenar o objeto de promessa em uma variável é desnecessário, e é uma prática comum encadear a chamada de método <em>then</em> à chamada de método axios, de modo que haja um seguimento lógico:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>A função callback (função de retorno de chamada) pega os dados contidos dentro da resposta, armazena-os em uma variável e imprime as notas no console.</p>\n<p>Uma maneira mais legível de formatar chamadas de método <i>encadeadas</i> é colocar cada chamada em sua própria linha:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Os dados retornados pelo servidor são texto simples ou texto puro (plain text), que é basicamente apenas uma string longa. A biblioteca axios ainda consegue analisar os dados em um array JavaScript, já que o servidor especificou que o formato de dados é <i>application/json; charset=utf-8</i> (veja a imagem anterior) usando o cabeçalho <i>content-type</i>.</p>\n<p>Podemos finalmente começar a usar os dados obtidos do servidor.</p>\n<p>Vamos tentar requisitar as notas do nosso servidor local e renderizá-las utilizando inicialmente o componente App. Por favor, note que esta abordagem tem muitos problemas, pois estamos renderizando todo o componente <i>App</i> apenas quando recebemos uma resposta de uma operação bem-sucedida:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data\n  ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>App notes<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>notes<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Este método poderia ser aceitável em algumas circunstâncias, mas é um tanto problemático. Em vez disso, vamos mover a busca de dados para o componente <i>App</i>.</p>\n<p>Porém, o que não é imediatamente óbvio é onde o comando <em>axios.get</em> deve ser colocado dentro do componente.</p>\n<h3>Effect-hooks</h3>\n<p>Já usamos <a href=\"https://reactjs.org/docs/hooks-state.html\">hooks de estado</a> que foram introduzidos juntamente com a versão do React <a href=\"https://www.npmjs.com/package/react/v/16.8.0\">16.8.0</a>, que fornecem estado aos componentes React definidos como funções — os chamados <i>componentes funcionais</i>. A versão 16.8.0 também introduz <a href=\"https://reactjs.org/docs/hooks-effect.html\">effect hooks</a> (ou \"ganchos de efeito\" ou \"hooks de efeito\") como uma nova funcionalidade. De acordo com a documentação oficial:</p>\n<blockquote>\n<p><i>O Effect Hook (Hook de Efeito) te permite executar efeitos colaterais em componentes funcionais</i> > <i>Buscar dados, configurar uma subscription (assinatura), e mudar o DOM manualmente dentro dos componentes React são exemplos de efeitos colaterais.</i></p>\n</blockquote>\n<p>Como tal, os hooks de efeito são precisamente a ferramenta certa a ser usada ao buscar dados de um servidor.</p>\n<p>Vamos remover a busca de dados de <i>index.js</i>. Já que vamos buscar as notas do servidor, não há mais necessidade de passar dados como props para o componente <i>App</i>. Então, <i>index.js</i> pode ser simplificado desta forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>O componente <i>App</i> muda da seguinte maneira:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span></span><span class=\"token keyword\">import</span> Note <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Note'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newNote<span class=\"token punctuation\">,</span> setNewNote<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showAll<span class=\"token punctuation\">,</span> setShowAll<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'effect (efeito)'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled (promessa resolvida)'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'render (renderiza)'</span><span class=\"token punctuation\">,</span> notes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token string\">'notes (notas)'</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Também adicionamos algumas impressões úteis no console, que esclarecem a progressão da execução.</p>\n<p>Isto é impresso no console:</p>\n<pre>\nrender (renderiza) 0 notes (notas)\neffect (efeito)\npromise fulfilled (promessa resolvida)\nrender (renderiza) 3 notes (notas)\n</pre>\n<p>Assim, o corpo da função que define o componente é executado e o componente é renderizado pela primeira vez. Neste ponto, <i>render (renderiza) 0 notes (notas)</i> é impresso, o que significa que os dados ainda não foram buscados no servidor.</p>\n<p>Em seguida, a função — ou efeito, no linguajar React — ...</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'effect (efeito)'</span><span class=\"token punctuation\">)</span>\n  axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled (promessa resolvida)'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>... é executada imediatamente após a renderização. A execução da função resulta na impressão de <i>effect (efeito)</i> no console, e o comando <em>axios.get</em> inicia a busca de dados no servidor, bem como registra a seguinte função como um <i>gerenciador de evento</i> para a operação:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled (promessa resolvida)'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Quando os dados chegam do servidor, o ambiente de execução JavaScript chama a função registrada como o gerenciador de evento, o que imprime <i>promise fulfilled (promessa resolvida)</i> no console e armazena as notas recebidas do servidor no estado usando a função <em>setNotes(response.data)</em>.</p>\n<p>Como sempre, uma chamada a uma função de atualização de estado gera a re-renderização do componente. Como resultado, <i>render (renderiza) 3 notes (notas)</i> é impresso no console e as notas buscadas do servidor são renderizadas na tela.</p>\n<p>Por fim, vamos dar uma olhada na definição do hook de efeito como um todo:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'effect (efeito)'</span><span class=\"token punctuation\">)</span>\n  axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled (promessa resolvida)'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Vamos reescrever o código de uma maneira um pouco diferente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hook</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'effect (efeito)'</span><span class=\"token punctuation\">)</span>\n  axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled (promessa resolvida)'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>hook<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Podemos ver claramente que a função <a href=\"https://reactjs.org/docs/hooks-reference.html#useeffect\">useEffect</a> (\"usarEfeito\") leva <i>dois parâmetros</i>. O primeiro é uma função, o próprio <i>effect (efeito)</i>. De acordo com a documentação:</p>\n<blockquote>\n<p><i>Por padrão, useEffect roda depois da primeira renderização e depois de toda atualização, mas é possível escolher rodá-lo somente quando determinados valores tenham mudado.</i></p>\n</blockquote>\n<p>Portanto, por padrão, o efeito é <i>sempre</i> executado após a renderização do componente. No nosso caso, no entanto, só queremos executar o efeito junto à primeira renderização.</p>\n<p>O segundo parâmetro de <em>useEffect</em> é usado para <a href=\"https://reactjs.org/docs/hooks-reference.html#conditionally-firing-an-effect\">especificar com que frequência o efeito é executado</a>. Se o segundo parâmetro é um array vazio <em>[]</em>, então o efeito é executado junto com a primeira renderização do componente.</p>\n<p>Existem muitos casos possíveis de uso para um hook de efeito, além de buscar dados do servidor. Contudo, este uso já é suficiente para nós, por enquanto.</p>\n<p>Pense novamente na sequência de eventos que acabamos de discutir. Qual parte do código é executada? Em que ordem? Com qual frequência? Entender a ordem dos eventos é decisivo!</p>\n<p>Observe que também poderíamos ter escrito o código da função de efeito (effect function) desta forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'effect (efeito)'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">eventHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled (promessa resolvida)'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span>\n  promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>eventHandler<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Uma referência à função gerenciadora de evento é atribuída à variável <em>eventHandler</em>. A promessa retornada pelo método <em>get</em> do Axios é armazenada na variável <em>promise</em>. O registro do callback (retorno de chamada) acontece dando à variável <em>eventHandler</em>, que referencia a função gerenciadora de evento, como parâmetro para o método <em>then</em> da promessa. Em geral, não é necessário atribuir funções e promessas a variáveis, e uma forma mais compacta de representação de ações já é suficiente, como a exibida acima, por exemplo.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'effect (efeito)'</span><span class=\"token punctuation\">)</span>\n  axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled (promessa resolvida)'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ainda temos um problema com nossa aplicação. Ao adicionar novas anotações, elas não são armazenadas no servidor.</p>\n<p>O código para a aplicação, como descrito até agora, pode ser encontrado na íntegra no <a href=\"https://github.com/fullstack-hy2020/part2-notes/tree/part2-4\">github</a>, na branch <i>part2-4</i>.</p>\n<h3>O Ambiente de Tempo de Execução de Desenvolvimento</h3>\n<p>Tornou-se cada vez mais complexa a configuração de toda a aplicação. Vamos revisar o que são e onde acontecem os eventos. A imagem a seguir descreve a composição da aplicação:</p>\n<picture><img src=\"/static/0e3766361ce9d08f0c4fdd39152cf493/5a190/18e.png\" alt=\"diagrama da composição da aplicação React\" srcset=\"/static/0e3766361ce9d08f0c4fdd39152cf493/772e8/18e.png 200w,\n/static/0e3766361ce9d08f0c4fdd39152cf493/e17e5/18e.png 400w,\n/static/0e3766361ce9d08f0c4fdd39152cf493/5a190/18e.png 800w,\n/static/0e3766361ce9d08f0c4fdd39152cf493/77672/18e.png 1060w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>O código JavaScript que compõe nossa aplicação React é executado no navegador. O navegador obtém o JavaScript do <i>servidor de desenvolvimento React</i> (React dev server), que é a aplicação que é executada após a execução do comando <em>npm start</em>. O servidor de desenvolvimento transforma o JavaScript em um formato compreendido pelo navegador. Entre outras coisas, ele costura e junta o JavaScript de diferentes arquivos em um único arquivo. Discutiremos sobre o servidor de desenvolvimento React em mais detalhes na Parte 7 do curso.</p>\n<p>A aplicação React em execução no navegador busca os dados no formato JSON do <i>json-server</i>, que está sendo executado na porta 3001 na máquina. O servidor a partir do qual requisitamos os dados — <i>json-server</i> — obtém seus dados do arquivo <i>db.json</i>.</p>\n<p>Neste ponto do desenvolvimento, calha que todas as partes da aplicação residem na máquina do desenvolvedor, conhecido como \"localhost\". A situação muda quando a aplicação é implementada na internet. Faremos isso na Parte 3.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercício 2.11</h3>\n<h4>2.11: The Phonebook — 6º passo</h4>\n<p>Continuemos com o desenvolvimento da lista telefônica. Armazene o estado inicial da aplicação no arquivo <i>db.json</i>, que deve ser colocado na raiz do projeto.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"persons\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Arto Hellas\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"number\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"040-123456\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Ada Lovelace\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"number\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"39-44-5323523\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Dan Abramov\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"number\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"12-43-234345\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Mary Poppendieck\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"number\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"39-23-6423122\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Inicie o json-server na porta 3001 e verifique se o servidor retorna a lista de pessoas acessando o endereço <a href=\"http://localhost:3001/persons\">http://localhost:3001/persons</a> no navegador.</p>\n<p>Se você receber a seguinte mensagem de erro...</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">events<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">182</span>\n      <span class=\"token keyword\">throw</span> er<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Unhandled 'error' event</span>\n      <span class=\"token operator\">^</span>        <span class=\"token comment\">//* Evento de 'erro' não gerenciado</span>\n\n<span class=\"token literal-property property\">Error</span><span class=\"token operator\">:</span> listen <span class=\"token constant\">EADDRINUSE</span> <span class=\"token number\">0.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token operator\">:</span><span class=\"token number\">3001</span>\n    at Object<span class=\"token punctuation\">.</span><span class=\"token function\">_errnoException</span> <span class=\"token punctuation\">(</span>util<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">1019</span><span class=\"token operator\">:</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n    at <span class=\"token function\">_exceptionWithHostPort</span> <span class=\"token punctuation\">(</span>util<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">1041</span><span class=\"token operator\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>... significa que a porta 3001 já está em uso por outra aplicação; alguma aplicação pode estar usando json-server nesse momento, por exemplo. Feche a outra aplicação ou altere a porta, caso a primeira opção não funcione.</p>\n<p>Modifique a aplicação para que o estado inicial dos dados seja obtido do servidor usando a biblioteca <i>axios</i>. Conclua a busca (fetching) com um <a href=\"https://reactjs.org/docs/hooks-effect.html\">hook de Efeito</a> (Effect hook).</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/8869c2e065a6ae187c633a378e6fa6be/part-2.svg"},"part":2,"letter":"c","lang":"ptbr"}}},"pageContext":{"part":2,"letter":"c","lang":"ptbr"}},"staticQueryHashes":["3128451518"]}
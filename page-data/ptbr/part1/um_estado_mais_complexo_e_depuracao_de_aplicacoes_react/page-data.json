{"componentChunkName":"component---src-templates-content-template-js","path":"/ptbr/part1/um_estado_mais_complexo_e_depuracao_de_aplicacoes_react","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<h3>Um estado complexo (complex state)</h3>\n<p>Em nosso exemplo anterior, o estado da aplicação era simples, pois consistia em apenas um número inteiro. E se a nossa aplicação precisar de um estado mais complexo?</p>\n<p>Na maioria dos casos, a maneira mais fácil e melhor de fazer isso é usando a função <em>useState</em> múltiplas vezes para criar \"pedaços\" separados de estado.</p>\n<p>No código a seguir, criamos dois pedaços de estado para a aplicação, chamados <em>esquerda</em> e <em>direita</em>, ambos com o valor inicial 0:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>esquerda<span class=\"token punctuation\">,</span> setEsquerda<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>direita<span class=\"token punctuation\">,</span> setDireita<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>esquerda<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setEsquerda</span><span class=\"token punctuation\">(</span>esquerda <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        Esquerda\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setDireita</span><span class=\"token punctuation\">(</span>direita <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        Direita\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>direita<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O componente têm acesso às funções <em>setEsquerda</em> e <em>setDireita</em>, que podem ser usadas para atualizar os dois pedaços de estado.</p>\n<p>O estado ou um pedaço de estado do componente pode ser de qualquer tipo. Poderíamos implementar a mesma funcionalidade salvando a contagem de cliques tanto dos botões \"<i>esquerda</i>\" quanto \"<i>direita</i>\" em um único objeto:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">esquerda</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">direita</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nesse caso, a aplicação ficaria assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>cliques<span class=\"token punctuation\">,</span> setCliques<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> \n    <span class=\"token literal-property property\">esquerda</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">direita</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleCliqueEsquerda</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> novosCliques <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n      <span class=\"token literal-property property\">esquerda</span><span class=\"token operator\">:</span> cliques<span class=\"token punctuation\">.</span>esquerda <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \n      <span class=\"token literal-property property\">direita</span><span class=\"token operator\">:</span> cliques<span class=\"token punctuation\">.</span>direita \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">setCliques</span><span class=\"token punctuation\">(</span>novosCliques<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleCliqueDireita</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> novosCliques <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n      <span class=\"token literal-property property\">esquerda</span><span class=\"token operator\">:</span> cliques<span class=\"token punctuation\">.</span>esquerda<span class=\"token punctuation\">,</span> \n      <span class=\"token literal-property property\">direita</span><span class=\"token operator\">:</span> cliques<span class=\"token punctuation\">.</span>direita <span class=\"token operator\">+</span> <span class=\"token number\">1</span> \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">setCliques</span><span class=\"token punctuation\">(</span>novosCliques<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>cliques<span class=\"token punctuation\">.</span>esquerda<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleCliqueEsquerda<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Esquerda<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleCliqueDireita<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Direita<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Agora, o componente tem apenas um único pedaço de estado, e os gerenciadores de eventos precisam cuidar da mudança do <i>estado inteiro da aplicação</i>.</p>\n<p>O formato do gerenciador de evento parece confuso aqui. Quando o botão da esquerda é clicado, a seguinte função é chamada:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleCliqueEsquerda</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> novosCliques <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token literal-property property\">esquerda</span><span class=\"token operator\">:</span> cliques<span class=\"token punctuation\">.</span>esquerda <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \n    <span class=\"token literal-property property\">direita</span><span class=\"token operator\">:</span> cliques<span class=\"token punctuation\">.</span>direita \n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">setCliques</span><span class=\"token punctuation\">(</span>novosCliques<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O objeto a seguir é definido como o novo estado da aplicação:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">esquerda</span><span class=\"token operator\">:</span> cliques<span class=\"token punctuation\">.</span>esquerda <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">direita</span><span class=\"token operator\">:</span> cliques<span class=\"token punctuation\">.</span>direita\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O novo valor da propriedade <i>esquerda</i> agora é o mesmo que o valor de <i>esquerda + 1</i> do estado anterior, e o valor da propriedade <i>direita</i> é o mesmo que o valor da propriedade <i>direita</i> do estado anterior.</p>\n<p>Podemos definir mais claramente o novo objeto de estado usando a (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">sintaxe de espalhamento</a>) (Spread syntax (...)) que foi adicionada à especificação da linguagem no verão de 2018:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleCliqueEsquerda</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> novosCliques <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token operator\">...</span>cliques<span class=\"token punctuation\">,</span> \n    <span class=\"token literal-property property\">esquerda</span><span class=\"token operator\">:</span> cliques<span class=\"token punctuation\">.</span>esquerda <span class=\"token operator\">+</span> <span class=\"token number\">1</span> \n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">setCliques</span><span class=\"token punctuation\">(</span>novosCliques<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleCliqueDireita</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>cliques<span class=\"token punctuation\">,</span> \n    <span class=\"token literal-property property\">direita</span><span class=\"token operator\">:</span> cliques<span class=\"token punctuation\">.</span>direita <span class=\"token operator\">+</span> <span class=\"token number\">1</span> \n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">setCliques</span><span class=\"token punctuation\">(</span>novosCliques<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A sintaxe pode parecer um tanto estranha no começo. Na prática, <em>{ ...cliques }</em> cria um novo objeto que tem cópias de todas as propriedades do objeto <em>cliques</em>. Quando discriminamos uma propriedade específica — por exemplo, <i>direita</i> em <em>{ ...cliques, direita: 1 }</em>, o valor da propriedade <em>direita</em> no novo objeto será 1.</p>\n<p>No exemplo acima, este trecho:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>cliques<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">direita</span><span class=\"token operator\">:</span> cliques<span class=\"token punctuation\">.</span>direita <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>cria uma cópia do objeto <em>cliques</em>, onde o valor da propriedade <em>direita</em> é aumentado em 1.</p>\n<p>Não é necessário atribuir o objeto a uma variável nos gerenciadores de eventos, e podemos simplificar as funções da seguinte maneira:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleCliqueEsquerda</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">setCliques</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>cliques<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">esquerda</span><span class=\"token operator\">:</span> cliques<span class=\"token punctuation\">.</span>esquerda <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleCliqueDireita</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></code></pre></div>\n<p>Alguns leitores podem estar se perguntando o motivo de não termos atualizado o estado diretamente, desta forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleCliqueEsquerda</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  cliques<span class=\"token punctuation\">.</span>esquerda<span class=\"token operator\">++</span>\n  <span class=\"token function\">setCliques</span><span class=\"token punctuation\">(</span>cliques<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A aplicação parece funcionar. Entretanto, <i> em React, é proibido mudar (mutate) diretamente o estado</i>, já que <a href=\"https://stackoverflow.com/a/40309023\">pode resultar em efeitos colaterais inesperados</a>. A mudança de estado sempre tem que ser feita pela definição/atribuição do estado a um novo objeto. Se as propriedades do objeto de estado anterior não forem alteradas, podem simplesmente ser copiadas, o que se faz copiando essas propriedades em um novo objeto e definindo-o como o novo estado.</p>\n<p>Armazenar todo o estado em um único objeto de estado é uma má escolha para esta aplicação, especificamente; não há qualquer benefício aparente, e a aplicação resultante fica muito mais complexa. Neste caso, armazenar os contadores de cliques em pedaços separados de estado é uma escolha muito mais adequada.</p>\n<p>Há situações em que pode ser benéfico armazenar um pedaço de estado da aplicação em uma estrutura de dados mais complexa. <a href=\"https://reactjs.org/docs/hooks-faq.html#should-i-use-one-or-many-state-variables\">A documentação oficial de React</a> contém algumas orientações úteis sobre o assunto.</p>\n<h3>Gerenciando Arrays</h3>\n<p>Vamos adicionar um pedaço de estado à nossa aplicação contendo o array <em>todosOsCliques</em>, que lembra cada clique que ocorreu na aplicação.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>esquerda<span class=\"token punctuation\">,</span> setEsquerda<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>direita<span class=\"token punctuation\">,</span> setDireita<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todosOsCliques<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleCliqueEsquerda</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setTodos</span><span class=\"token punctuation\">(</span>todosOsCliques<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setEsquerda</span><span class=\"token punctuation\">(</span>esquerda <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span> </span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleCliqueDireita</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setDireita</span><span class=\"token punctuation\">(</span>direita <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>esquerda<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleCliqueEsquerda<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Esquerda<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleCliqueDireita<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Direita<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>todosOsCliques<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cada clique é armazenado em um pedaço separado de estado chamado <em>todosOsCliques</em>, que é inicializado como um array vazio:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todosOsCliques<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Quando o botão <i>Esquerda</i> é clicado, adicionamos a letra <i>E</i> ao array <em>todosOsCliques</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleCliqueEsquerda</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTodos</span><span class=\"token punctuation\">(</span>todosOsCliques<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setEsquerda</span><span class=\"token punctuation\">(</span>esquerda <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O pedaço de estado armazenado em <em>todosOsCliques</em> agora é definido para ser um array que contém todos os itens do array anterior mais a letra <i>E</i>. O método <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\">concat</a> (concatenar) adiciona o novo item ao array, que não muda o array existente, mas sim retorna uma <i>nova cópia do array</i> com o item adicionado a ele.</p>\n<p>Como mencionado anteriormente, também é possível em JavaScript adicionar itens a um array com o método <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\">push</a> (Significa, literalmente, \"empurrar\", \"apertar\", \"pressionar\". Porém, nestes termos, o método push() ADICIONA um ou mais elementos ao final de um array e retorna o novo comprimento desse array). Se adicionarmos o item \"empurrando-o\" para o array <em>todosOsCliques</em> e então atualizando o estado, a aplicação ainda aparentará funcionar:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleCliqueEsquerda</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  todosOsCliques<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setTodos</span><span class=\"token punctuation\">(</span>todosOsCliques<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setEsquerda</span><span class=\"token punctuation\">(</span>esquerda <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>No entanto, <strong>não</strong> faça isso. Como mencionado anteriormente, o estado dos componentes em React, tal como <em>todosOsCliques</em>, não devem ser mudados diretamente. Mesmo se mudando o estado parecer funcionar em alguns casos, tal decisão pode levar a erros no código muito difíceis de depurar.</p>\n<p>Vamos olhar mais de perto em como o clique é renderizado na página:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>esquerda<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleCliqueEsquerda<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Esquerda<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleCliqueDireita<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Direita<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>direita<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>todosOsCliques<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Chamamos o método <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join\">join</a> (juntar, conectar) no array <em>todosOsCliques</em> que une todos os itens em uma única string, separados pela string passada como parâmetro da função, que no caso é um espaço vazio.</p>\n<h3>A atualização do estado é assíncrona</h3>\n<p>Vamos expandir a aplicação para que ela mantenha o controle do número total de cliques nos botões no estado <em>total</em>, cujo valor é sempre atualizado quando os botões são pressionados:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>esquerda<span class=\"token punctuation\">,</span> setEsquerda<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>direita<span class=\"token punctuation\">,</span> setDireita<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todosOsCliques<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>total<span class=\"token punctuation\">,</span> setTotal<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleCliqueEsquerda</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTodos</span><span class=\"token punctuation\">(</span>todosOsCliques<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setEsquerda</span><span class=\"token punctuation\">(</span>esquerda <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setTotal</span><span class=\"token punctuation\">(</span>esquerda <span class=\"token operator\">+</span> direita<span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleCliqueDireita</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setDireita</span><span class=\"token punctuation\">(</span>direita <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setTotal</span><span class=\"token punctuation\">(</span>esquerda <span class=\"token operator\">+</span> direita<span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>esquerda<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleCliqueEsquerda<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Esquerda<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleCliqueDireita<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Direita<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>todosOsCliques<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Total <span class=\"token punctuation\">{</span>total<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A solução não funciona corretamente:</p>\n<picture><img src=\"/static/42a47b8a474a342a236ef0d153be3caa/5a190/33.png\" alt=\"o navegador mostrando 2 left|right 1, RLL total 2\" srcset=\"/static/42a47b8a474a342a236ef0d153be3caa/772e8/33.png 200w,\n/static/42a47b8a474a342a236ef0d153be3caa/e17e5/33.png 400w,\n/static/42a47b8a474a342a236ef0d153be3caa/5a190/33.png 800w,\n/static/42a47b8a474a342a236ef0d153be3caa/04784/33.png 1174w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Por alguma razão, o total de cliques nos botões está sempre um clique atrás do valor real.</p>\n<p>Vamos adicionar alguns comandos <code class=\"language-text\">console.log</code> ao gerenciador de eventos:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleCliqueEsquerda</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTodos</span><span class=\"token punctuation\">(</span>todosOsCliques<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clique esquerdo anterior'</span><span class=\"token punctuation\">,</span> esquerda<span class=\"token punctuation\">)</span></span>    <span class=\"token function\">setEsquerda</span><span class=\"token punctuation\">(</span>esquerda <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clique esquerdo posterior'</span><span class=\"token punctuation\">,</span> esquerda<span class=\"token punctuation\">)</span></span>    <span class=\"token function\">setTotal</span><span class=\"token punctuation\">(</span>esquerda <span class=\"token operator\">+</span> direita<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O console revela o problema:</p>\n<picture><img src=\"/static/a6c05c374c755e4a30d89756ed617da6/5a190/32.png\" alt=\"o console das ferramentas do desenvolvedor exibe left before 4 and left after 4\" srcset=\"/static/a6c05c374c755e4a30d89756ed617da6/772e8/32.png 200w,\n/static/a6c05c374c755e4a30d89756ed617da6/e17e5/32.png 400w,\n/static/a6c05c374c755e4a30d89756ed617da6/5a190/32.png 800w,\n/static/a6c05c374c755e4a30d89756ed617da6/c1b63/32.png 1200w,\n/static/a6c05c374c755e4a30d89756ed617da6/8b936/32.png 1368w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Embora um novo valor tenha sido definido para <em>esquerda</em> chamando <em>setEsquerda(esquerda + 1)</em>, o valor antigo ainda está lá, apesar da atualização! Por causa disso, a tentativa de contar o número de cliques nos botões produz um resultado menor do que o correto:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTotal</span><span class=\"token punctuation\">(</span>esquerda <span class=\"token operator\">+</span> direita<span class=\"token punctuation\">)</span> </code></pre></div>\n<p>O motivo para isso é que uma atualização de estado no React acontece <a href=\"https://reactjs.org/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous\">assincronicamente</a> (asynchronously), ou seja, não imediatamente, mas \"em algum momento\" antes que o componente seja renderizado novamente.</p>\n<p>Podemos consertar a aplicação da seguinte forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleCliqueEsquerda</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTodos</span><span class=\"token punctuation\">(</span>todosOsCliques<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> atualizaEsquerda <span class=\"token operator\">=</span> esquerda <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token function\">setEsquerda</span><span class=\"token punctuation\">(</span>atualizaEsquerda<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setTotal</span><span class=\"token punctuation\">(</span>atualizaEsquerda <span class=\"token operator\">+</span> direita<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Assim, o número de cliques nos botões é agora, de forma definitiva, baseado no número correto de cliques no botão esquerdo.</p>\n<h3>Renderização Condicional</h3>\n<p>Vamos modificar nossa aplicação para que a renderização do histórico de cliques seja gerenciada por um novo componente chamado <i>Historico</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Historico</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>todosOsCliques<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        Clique em um dos botões para usar a aplicação<span class=\"token operator\">!</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      Histórico de cliques nos botões<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>todosOsCliques<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>esquerda<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleCliqueEsquerda<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Esquerda<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleCliqueDireita<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Direita<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>direita<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Historico todosOsCliques<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>todosOsCliques<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Agora, o comportamento do componente depende se algum dos botões foi clicado ou não. Se não, ou seja, o array <em>todosOsCliques</em> estando vazio, o componente renderiza um elemento \"div\" com algumas instruções:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Clique em um dos botões para usar a aplicação<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p>E em todos os outros casos, o componente renderiza o histórico de cliques:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n  Histórico de cliques nos botões<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>todosOsCliques<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p>O componente <i>Historico</i> renderiza elementos React completamente diferentes dependendo do estado da aplicação. Isso é chamado de <i>renderização condicional</i> (conditional rendering).</p>\n<p>React também oferece muitas outras formas de fazer <a href=\"https://reactjs.org/docs/conditional-rendering.html\">renderização condicional</a>. Veremos isso na prática na <a href=\"/ptbr/part2\">Parte 2</a>.</p>\n<p>Vamos fazer mais uma modificação a nossa aplicação, refatorando-a para usar o componente <em>Botao</em> que definimos anteriormente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Historico</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>todosOsCliques<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        Clique em um dos botões para usar a aplicação<span class=\"token operator\">!</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      Histórico de cliques nos botões<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>todosOsCliques<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Botao</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> handleClique<span class=\"token punctuation\">,</span> texto <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClique<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">{</span>texto<span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">)</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>esquerda<span class=\"token punctuation\">,</span> setEsquerda<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>direita<span class=\"token punctuation\">,</span> setDireita<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todosOsCliques<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleCliqueEsquerda</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTodos</span><span class=\"token punctuation\">(</span>todosOsCliques<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setEsquerda</span><span class=\"token punctuation\">(</span>esquerda <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleCliqueDireita</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setDireita</span><span class=\"token punctuation\">(</span>direita <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>esquerda<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Botao handleClique<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleCliqueEsquerda<span class=\"token punctuation\">}</span> texto<span class=\"token operator\">=</span><span class=\"token string\">'Esquerda'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Botao handleClique<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleCliqueDireita<span class=\"token punctuation\">}</span> texto<span class=\"token operator\">=</span><span class=\"token string\">'Direita'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">{</span>direita<span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Historico todosOsCliques<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>todosOsCliques<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span></code></pre></div>\n<h3>React antigo</h3>\n<p>Neste curso, usamos o <a href=\"https://reactjs.org/docs/hooks-state.html\">state hook</a> (\"gancho de estado\") para adicionar estado aos nossos componentes React, que faz parte das versões mais recentes da biblioteca e está disponível a partir da versão <a href=\"https://www.npmjs.com/package/react/v/16.8.0\">16.8.0</a> em diante. Antes da adição dos hooks, não havia maneira de adicionar estado a componentes funcionais. Componentes que precisavam de estado tinham que ser definidos como componentes de <a href=\"https://reactjs.org/docs/react-component.html\">classe</a>, usando a sintaxe de classe JavaScript.</p>\n<p>Neste curso, fizemos a decisão um pouco radical de usar exclusivamente hooks desde o primeiro dia, para garantir que estamos aprendendo as variações atuais e futuras de React. Embora os componentes funcionais sejam o futuro da biblioteca, ainda é importante aprender a sintaxe de classe, já que existem bilhões de linhas de código React legado que você pode acabar fazendo manutenção algum dia. O mesmo se aplica à documentação e exemplos de React que você pode encontrar na internet.</p>\n<p>Vamos aprender mais sobre componentes de classe React mais tarde no curso.</p>\n<h3>Depuração de aplicações React</h3>\n<p>Grande parte do tempo de um desenvolvedor é gasto na depuração e na leitura de códigos existentes. De vez em quando, conseguimos escrever uma ou duas linhas de código novo, mas grande parte do nosso tempo é gasto tentando descobrir por que algo está quebrado ou como algo funciona. Boas práticas e ferramentas de depuração são extremamente importantes por esta razão.</p>\n<p>Felizmente para nós, React é uma biblioteca extremamente amigável para com os desenvolvedores quando se trata de depuração.</p>\n<p>Antes de continuarmos, vamos nos lembrar de uma das regras mais importantes do desenvolvimento web.</p>\n<h4>A primeira regra do desenvolvimento web</h4>\n<blockquote>\n<p> <strong>Mantenha o Console do navegador aberto o tempo todo.</strong></p>\n<p>A guia <i>Console</i> em particular deve estar sempre aberta, a menos que haja uma razão específica para visualizar outra guia.</p>\n</blockquote>\n<p>Mantenha tanto o seu código quanto a página web abertos juntos <strong>o tempo todo</strong>.</p>\n<p>Se e quando seu código não compilar e seu navegador brilhar igual uma árvore de Natal:</p>\n<picture><img src=\"/static/f23ab2e844120e0ba8cb57f4f98dd82d/5a190/6x.png\" alt=\"captura de tela do código\" srcset=\"/static/f23ab2e844120e0ba8cb57f4f98dd82d/772e8/6x.png 200w,\n/static/f23ab2e844120e0ba8cb57f4f98dd82d/e17e5/6x.png 400w,\n/static/f23ab2e844120e0ba8cb57f4f98dd82d/5a190/6x.png 800w,\n/static/f23ab2e844120e0ba8cb57f4f98dd82d/c1b63/6x.png 1200w,\n/static/f23ab2e844120e0ba8cb57f4f98dd82d/1134b/6x.png 1470w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>não escreva nenhuma linha de código a mais, mas encontre e corrija <strong>imediatamente</strong> o problema. Ainda não aconteceu na história da programação de o código que não estivesse compilando começasse a funcionar após a adição de mais linhas de código. Duvido que tal evento ocorra durante este curso também.</p>\n<p>A depuração (<em>debug</em>) \"old-school\", baseada na impressão no Console, é sempre uma das melhores opções. Se o componente</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Botao</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> handleClique<span class=\"token punctuation\">,</span> texto <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClique<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>texto<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>não estiver funcionando como desejado, é útil começar a imprimir suas variáveis ​​no console. Para que isso funcione, devemos transformar nossa função na forma menos compactada e receber todo o objeto \"props\" sem desestruturá-lo de forma imediata:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Botao</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n<span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> handleClique<span class=\"token punctuation\">,</span> texto <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClique<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>texto<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Isso revelará imediatamente se, por exemplo, um dos atributos foi escrito incorretamente ao usar o componente.</p>\n<p><strong>Obs.:</strong> Quando você usar <em>console.log</em> para depuração, não combine <em>objetos (objects)</em> do jeito Java de se fazer usando o operador de adição. Em vez de escrever</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'o valor de props é '</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">)</span></code></pre></div>\n<p>separe as coisas que você deseja registrar no console com uma vírgula:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'o valor de props é'</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Se você usar o jeito Java de concatenar uma string com um objeto, aparecerá uma mensagem de log muito pouco informativa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">o valor de props é <span class=\"token punctuation\">[</span>object Object<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Registrar a saída no console não é de maneira alguma a única forma de depurar nossas aplicações. Você pode pausar a execução do código da sua aplicação no <em>depurador (debugger)</em> no Console do Desenvolvedor do Chrome, escrevendo o comando <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a> em qualquer lugar do seu código.</p>\n<p>A execução será pausada assim que chegar a um ponto onde o comando <em>debugger</em> for executado:</p>\n<picture><img src=\"/static/4a4bced189180676ff4019f459be833e/5a190/7a.png\" alt=\"debugger pausado na Ferramenta do Desenvolvedor\" srcset=\"/static/4a4bced189180676ff4019f459be833e/772e8/7a.png 200w,\n/static/4a4bced189180676ff4019f459be833e/e17e5/7a.png 400w,\n/static/4a4bced189180676ff4019f459be833e/5a190/7a.png 800w,\n/static/4a4bced189180676ff4019f459be833e/c1b63/7a.png 1200w,\n/static/4a4bced189180676ff4019f459be833e/29007/7a.png 1600w,\n/static/4a4bced189180676ff4019f459be833e/37c35/7a.png 1810w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Ao ir para a guia <i>Console</i>, é fácil inspecionar o estado atual das variáveis:</p>\n<picture><img src=\"/static/5ba1388f4d17134dcfc62fbeb2251421/5a190/8a.png\" alt=\"captura de tela de inspeção de console\" srcset=\"/static/5ba1388f4d17134dcfc62fbeb2251421/772e8/8a.png 200w,\n/static/5ba1388f4d17134dcfc62fbeb2251421/e17e5/8a.png 400w,\n/static/5ba1388f4d17134dcfc62fbeb2251421/5a190/8a.png 800w,\n/static/5ba1388f4d17134dcfc62fbeb2251421/c1b63/8a.png 1200w,\n/static/5ba1388f4d17134dcfc62fbeb2251421/5bd27/8a.png 1432w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Uma vez que a causa do erro é descoberta, é possível remover o comando <em>debugger</em> e atualizar a página.</p>\n<p>O depurador também nos permite executar nosso código linha por linha com os controles encontrados na parte direita da guia <i>Fontes (Sources)</i>.</p>\n<p>Você também pode acessar o depurador sem o comando <em>debugger</em>, adicionando pontos de interrupção na guia <i>Fontes (Sources)</i>. Inspecionar os valores das variáveis do componente pode ser feito na seção <em>Escopo (Scope)</em>:</p>\n<picture><img src=\"/static/c8c143bb940ecd99aea4dc4a1c0239f2/5a190/9a.png\" alt=\"exemplo de ponto de interrupção nas ferramentas do desenvolvedor\" srcset=\"/static/c8c143bb940ecd99aea4dc4a1c0239f2/772e8/9a.png 200w,\n/static/c8c143bb940ecd99aea4dc4a1c0239f2/e17e5/9a.png 400w,\n/static/c8c143bb940ecd99aea4dc4a1c0239f2/5a190/9a.png 800w,\n/static/c8c143bb940ecd99aea4dc4a1c0239f2/c1b63/9a.png 1200w,\n/static/c8c143bb940ecd99aea4dc4a1c0239f2/29007/9a.png 1600w,\n/static/c8c143bb940ecd99aea4dc4a1c0239f2/95fa1/9a.png 1816w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>É extremamente recomendado adicionar a extensão <a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\">React developer tools</a> ao Chrome. Ele adiciona uma nova guia <em>Components</em> às ferramentas de desenvolvedor. A nova guia de ferramentas de desenvolvedor pode ser usada para inspecionar os diferentes elementos React na aplicação, juntamente com seu estado e props:</p>\n<picture><img src=\"/static/868d25a33097ce816e22a31376f5743e/5a190/10ea.png\" alt=\"captura de tela da extensão de ferramentas de desenvolvedor React\" srcset=\"/static/868d25a33097ce816e22a31376f5743e/772e8/10ea.png 200w,\n/static/868d25a33097ce816e22a31376f5743e/e17e5/10ea.png 400w,\n/static/868d25a33097ce816e22a31376f5743e/5a190/10ea.png 800w,\n/static/868d25a33097ce816e22a31376f5743e/c1b63/10ea.png 1200w,\n/static/868d25a33097ce816e22a31376f5743e/29007/10ea.png 1600w,\n/static/868d25a33097ce816e22a31376f5743e/fb937/10ea.png 1820w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>O estado do componente <em>App</em> é definido assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>esquerda<span class=\"token punctuation\">,</span> setEsquerda<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>direita<span class=\"token punctuation\">,</span> setDireita<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todosOsCliques<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>As ferramentas do desenvolvedor mostram o estado dos hooks na ordem de sua definição:</p>\n<picture><img src=\"/static/c7716caaa5b3f3b3b5687e05e188b88f/5a190/11ea.png\" alt=\"estado dos hooks nas ferramentas do desenvolvedor React\" srcset=\"/static/c7716caaa5b3f3b3b5687e05e188b88f/772e8/11ea.png 200w,\n/static/c7716caaa5b3f3b3b5687e05e188b88f/e17e5/11ea.png 400w,\n/static/c7716caaa5b3f3b3b5687e05e188b88f/5a190/11ea.png 800w,\n/static/c7716caaa5b3f3b3b5687e05e188b88f/c1b63/11ea.png 1200w,\n/static/c7716caaa5b3f3b3b5687e05e188b88f/29007/11ea.png 1600w,\n/static/c7716caaa5b3f3b3b5687e05e188b88f/764d7/11ea.png 1782w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>O primeiro <i>State</i> (Estado) contém o valor do estado <i>esquerda</i>; o próximo contém o valor do estado <i>direita</i> e o último contém o valor do estado <i>todosOsCliques</i>.</p>\n<h3>Regras dos Hooks</h3>\n<p>Há algumas limitações e regras que devemos seguir para garantir que a nossa aplicação use corretamente as funções de estado baseadas em hooks.</p>\n<p>A função <em>useState</em> (\"usarEstado\", assim como a função <em>useEffect</em>, ou \"usarEfeito\", introduzida mais tarde neste curso) <i>não deve ser chamada</i> dentro de um loop, uma expressão condicional ou qualquer lugar que não seja uma função que define um componente. Assim deve ser para garantir que os hooks sejam sempre chamados na mesma ordem e, se isso não acontecer, a aplicação se apresentará erros.</p>\n<p>Resumindo, hooks só podem ser chamados de dentro do corpo de uma função que define um componente React:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Desta forma funciona!</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>idade<span class=\"token punctuation\">,</span> setIdade<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>nome<span class=\"token punctuation\">,</span> setNome<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Juha Tauriainen'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> idade <span class=\"token operator\">></span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Desta forma não funciona!</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>foobar<span class=\"token punctuation\">,</span> setFoobar<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> idade<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Não faça deste jeito também!</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>formaCorreta<span class=\"token punctuation\">,</span> setFormaCorreta<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">bemRuim</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Isso também não é permitido!</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> setX<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Revisão sobre Gerenciamento de Eventos (<em>Event Handling</em>)</h3>\n<p>O gerenciamento de eventos se mostrou um tópico difícil em iterações anteriores neste curso.</p>\n<p>Por essa razão, revisaremos o tópico.</p>\n<p>Vamos supor que estejamos desenvolvendo essa aplicação simples com o seguinte componente <i>App</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>valor<span class=\"token punctuation\">,</span> setValor<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>valor<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">></span>zerar<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Queremos que o clique do botão reinicialize o estado armazenado na variável <em>valor</em>.</p>\n<p>Para fazer com que o botão reaja a um evento de clique, precisamos adicionar um <i>gerenciador de evento</i> a ele.</p>\n<p>Os gerenciadores de eventos devem sempre ser uma função ou uma referência a uma função. O botão não funcionará se o gerenciador de evento for definido como uma variável de outro tipo.</p>\n<p>Se definíssemos o gerenciador de evento como uma string:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token string\">\"lixo...\"</span><span class=\"token operator\">></span>botão<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>o React nos avisaria sobre isso no console:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">index<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">2178</span> <span class=\"token literal-property property\">Warning</span><span class=\"token operator\">:</span> Expected <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">onClick</span><span class=\"token template-punctuation string\">`</span></span> listener to be a <span class=\"token keyword\">function</span><span class=\"token punctuation\">,</span> instead got a value <span class=\"token keyword\">of</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">string</span><span class=\"token template-punctuation string\">`</span></span> type<span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">in</span> <span class=\"token function\">button</span> <span class=\"token punctuation\">(</span>at index<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">in</span> <span class=\"token function\">div</span> <span class=\"token punctuation\">(</span>at index<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">in</span> <span class=\"token function\">App</span> <span class=\"token punctuation\">(</span>at index<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">27</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>A mensagem de erro diz: index.js:2178 Aviso: Esperava-se que o ouvinte <code class=\"language-text\">onClick</code> fosse uma função, mas obteve-se um valor do tipo <code class=\"language-text\">string</code>.</p>\n<p>O seguinte também não funcionaria:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>valor <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>botão<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>Tentamos definir o gerenciador de evento como <em>valor + 1</em>, o que simplesmente retorna o resultado da operação. React nos avisará sobre isso no console:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">index<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">2178</span> <span class=\"token literal-property property\">Warning</span><span class=\"token operator\">:</span> Expected <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">onClick</span><span class=\"token template-punctuation string\">`</span></span> listener to be a <span class=\"token keyword\">function</span><span class=\"token punctuation\">,</span> instead got a value <span class=\"token keyword\">of</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">number</span><span class=\"token template-punctuation string\">`</span></span> type<span class=\"token punctuation\">.</span></code></pre></div>\n<p>A mensagem de erro diz: index.js:2178 Aviso: Esperava-se que o ouvinte <code class=\"language-text\">onClick</code> fosse uma função, mas obteve-se um valor do tipo <code class=\"language-text\">number</code>.</p>\n<p>Este também não funcionaria:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>valor <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>botão<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>O gerenciador de evento não é uma função, mas uma <strong>atribuição de variável</strong>, e React, mais uma vez, emitirá um aviso no console. Esta tentativa também é falha no sentido de que nunca devemos mudar diretamente o estado em React.</p>\n<p>Vejamos o próximo exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clicou no botão'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  botão\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>A mensagem é impressa no console assim que o componente é renderizado, mas nada acontece quando clicamos no botão. Por que não funciona mesmo quando nosso gerenciador de evento contém a função <em>console.log</em>?</p>\n<p>O problema aqui é que nosso gerenciador de evento é definido como uma <i>chamada de função</i>, o que significa que o gerenciador de evento é atribuído ao valor retornado da função, que no caso de <em>console.log</em> é <i>undefined</i> (indefinido).</p>\n<p>A função <em>console.log</em> é chamada quando o componente é renderizado e, por esse motivo, é impresso uma vez no console.</p>\n<p>A tentativa a seguir também não funciona:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>botão<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>Novamente, tentamos definir uma chamada de função como o gerenciador de evento. Isso não funciona. Essa tentativa específica também causa outro problema: quando o componente é renderizado, a função <em>setValue(0)</em> é executada, o que por sua vez faz com que o componente seja renderizado novamente. A re-renderização, por conseguinte, chama <em>setValue(0)</em> novamente, resultando em uma recursão infinita.</p>\n<p>A execução de uma chamada de função específica quando o botão é clicado pode ser realizada da seguinte maneira:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clicou no botão'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  botão\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>Agora, o gerenciador de evento é uma função definida com a sintaxe de uma <em>arrow function</em>, isto é, <code class=\"language-text\">() => console.log('clicou no botão')</code>. Quando o componente é renderizado, nenhuma função é chamada e apenas a referência à <em>arrow function</em> é definida como o gerenciador de evento. A chamada da função ocorre apenas quando o botão é clicado.</p>\n<p>Podemos implementar a reinicialização do estado em nossa aplicação com essa mesma técnica:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>botão<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>O gerenciador de evento agora é a função <code class=\"language-text\">() => setValue(0)</code>.</p>\n<p>Definir gerenciadores de eventos diretamente no atributo do botão nem sempre é a melhor opção a se aplicar.</p>\n<p>Você verá frequentemente gerenciadores de eventos definidos em um lugar separado. Na versão seguinte de nossa aplicação, definimos uma função que então é atribuída à variável <em>handleClique</em> no corpo da função do componente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>valor<span class=\"token punctuation\">,</span> setValor<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClique</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clicou no botão'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>valor<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClique<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>botão<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Agora, a variável <em>handleClique</em> está atribuída a uma referência à função. A referência é passada ao botão como o atributo <i>onClick</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClique<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>botão<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>Naturalmente, nossa função gerenciadora de eventos pode ser composta por múltiplos comandos. Nestes casos, usamos a sintaxe de chaves mais longa para <em>arrow functions</em>: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>valor<span class=\"token punctuation\">,</span> setValor<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClique</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clicou no botão'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setValor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>valor<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClique<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>botão<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Uma função que retorna outra função</h3>\n<p>Outra maneira de definir um gerenciador de evento é usar uma <i>função que retorna outra função</i>.</p>\n<p>Provavelmente, você não precisará usar funções que retornam funções em nenhum dos exercícios deste curso. Se o tópico parecer confuso demais, você pode pular esta seção por enquanto e retornar a ela mais tarde.</p>\n<p>Vamos fazer as seguintes alterações em nosso código:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>valor<span class=\"token punctuation\">,</span> setValor<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ola</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">gerenciador</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Olá, mundo!'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> gerenciador</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>valor<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">ola</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>botão<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O código funciona corretamente, apesar de parecer complicado. </p>\n<p>O gerenciador de evento agora está definido como uma chamada de função:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">ola</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>botão<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>Anteriormente, afirmamos que um gerenciador de evento não pode ser uma chamada de função e que precisa ser ou uma função ou uma referência a uma função. Então, por que uma chamada de função funciona neste caso?</p>\n<p>Quando o componente é renderizado, a seguinte função é executada:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ola</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">gerenciador</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Olá, mundo!'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> gerenciador\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O <i>valor de retorno</i> da função é outra função que é atribuída à variável <em>gerenciador</em>.</p>\n<p>Quando o React renderiza a linha:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">ola</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>botão<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>Ele atribui o valor de retorno de <em>ola()</em> ao atributo onClick. Essencialmente, a linha se transforma em:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Olá, mundo!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  botão\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>Como a função <em>ola</em> retorna uma função, o gerenciador de evento passa, agora, a ser uma função.</p>\n<p>Qual é o objetivo deste conceito?</p>\n<p>Vamos mudar um pouco o código:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>valor<span class=\"token punctuation\">,</span> setValor<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ola</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">quem</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">gerenciador</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Olá'</span><span class=\"token punctuation\">,</span> quem<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> gerenciador</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>valor<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">ola</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mundo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>botão<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">ola</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>botão<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">ola</span><span class=\"token punctuation\">(</span><span class=\"token string\">'função'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>botão<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Agora, a aplicação têm três botões com gerenciadores de eventos definidos pela função <em>ola</em> que aceita um único parâmetro.</p>\n<p>O primeiro botão é definido como:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">ola</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mundo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>botão<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>O gerenciador de evento é criado <i>executando</i> a chamada da função <em>ola('mundo')</em>. A chamada da função retorna a função:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Olá'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mundo'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O segundo botão é definido como:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">ola</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>botão<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>A chamada da função <em>ola('react')</em> que cria o gerenciador de evento retorna:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Olá'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ambos os botões obtêm seus gerenciadores de eventos individualizados.</p>\n<p>Funções que retornam funções podem ser utilizadas na definição de funcionalidades genéricas que podem ser personalizadas com parâmetros. A função <em>ola</em> que cria os gerenciadores de eventos pode ser analisada como uma fábrica que produz gerenciadores de eventos personalizados destinados a saudar usuários.</p>\n<p>Nossa definição atual é um tanto verbosa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ola</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">quem</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">gerenciador</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Olá'</span><span class=\"token punctuation\">,</span> quem<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> gerenciador\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Vamos excluir as variáveis de ajuda e retornar diretamente a função criada:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ola</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">quem</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Olá'</span><span class=\"token punctuation\">,</span> quem<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Por conta de nossa função <em>ola</em> ser composta por um único comando de retorno, podemos omitir as chaves e usar a sintaxe mais compacta para funções de seta:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ola</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">quem</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Olá'</span><span class=\"token punctuation\">,</span> quem<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Por fim, vamos escrever todas as setas na mesma linha:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ola</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">quem</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Olá'</span><span class=\"token punctuation\">,</span> quem<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Podemos usar o mesmo \"macete\" para definir gerenciadores de eventos que definem o estado do componente para um determinado valor. Vamos fazer as seguintes alterações em nosso código:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>valor<span class=\"token punctuation\">,</span> setValor<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n  \n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setNoValor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">novoValor</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'setValor atual'</span><span class=\"token punctuation\">,</span> novoValor<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Imprime o novo valor no console</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setValor</span><span class=\"token punctuation\">(</span>novoValor<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>valor<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">setNoValor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>mil<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">setNoValor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>zerar<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">setNoValor</span><span class=\"token punctuation\">(</span>valor <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>incrementar<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Quando o componente é renderizado, é criado o botão <i>mil</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">setNoValor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>mil<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>O gerenciador de evento é definido como o valor retornado de <em>setNoValor(1000)</em>, que é a seguinte função:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'setValor atual'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setValor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O botão de incremento é declarado da seguinte forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">setNoValor</span><span class=\"token punctuation\">(</span>valor <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>incrementar<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>O gerenciador de evento é criado pela chamada da função <em>setNoValor(valor + 1)</em>, que recebe como parâmetro o valor atual da variável de estado <em>valor</em> incrementado em 1 (um). Se o conteúdo de <em>valor</em> fosse 10, então o gerenciador de evento criado seria a seguinte função:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'setValor atual'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setValor</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Não é necessário usar funções que retornam funções para alcançar esta funcionalidade. Vamos retornar a função <em>setNoValor</em>, responsável por atualizar o estado, como uma função normal:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>valor<span class=\"token punctuation\">,</span> setValor<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setNoValor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">novoValor</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'setValor atual'</span><span class=\"token punctuation\">,</span> novoValor<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setValor</span><span class=\"token punctuation\">(</span>novoValor<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>valor<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setNoValor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        mil\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setNoValor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        zerar\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setNoValor</span><span class=\"token punctuation\">(</span>valor <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        incrementar\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Agora, podemos definir o gerenciador de evento como uma função que chama a função <em>setNoValor</em> com um parâmetro apropriado. O gerenciador de evento utilizado para redefinir o estado da aplicação seria:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setNoValor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>zerar<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>Escolher entre as duas formas apresentadas de definir seus gerenciadores de eventos é, em grande parte, uma questão de gosto.</p>\n<h3>Passando Gerenciadores de Evento para Componentes-filho</h3>\n<p>Vamos extrair o botão para seu próprio componente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Botao</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>handleClique<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>texto<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>O componente obtém a função de gerência de evento da propriedade <em>handleClique</em>, e o texto do botão da propriedade <em>texto</em>. Vamos usar o novo componente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>valor<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Botao handleClique<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">setNoValor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> texto<span class=\"token operator\">=</span><span class=\"token string\">\"mil\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Botao handleClique<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">setNoValor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> texto<span class=\"token operator\">=</span><span class=\"token string\">\"zerar\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Botao handleClique<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">setNoValor</span><span class=\"token punctuation\">(</span>valor <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> texto<span class=\"token operator\">=</span><span class=\"token string\">\"incrementar\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Usar o componente <i>Botao</i> é simples, embora tenhamos que nos certificar de usar os nomes corretos de atributo ao passar props para o componente.</p>\n<p><picture><img src=\"/static/8ba6f921659bba13c9312f470007828e/5a190/12e.png\" alt=\"captura de tela do código de nomes de atributos corretos\" srcset=\"/static/8ba6f921659bba13c9312f470007828e/772e8/12e.png 200w,\n/static/8ba6f921659bba13c9312f470007828e/e17e5/12e.png 400w,\n/static/8ba6f921659bba13c9312f470007828e/5a190/12e.png 800w,\n/static/8ba6f921659bba13c9312f470007828e/c1b63/12e.png 1200w,\n/static/8ba6f921659bba13c9312f470007828e/133ae/12e.png 1424w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<i>Nota dos tradutores: ao longo do texto, apresentamos os códigos contendo termos traduzidos para o português, os quais não aparecem na imagem acima, pois esta traz o código escrito com os termos em inglês.</i></p>\n<h3>Não defina Componentes dentro de Componentes</h3>\n<p>Vamos começar a exibir o valor da aplicação em seu componente <i>Exibir</i>.</p>\n<p>Vamos mudar a aplicação definindo um novo componente dentro do componente <i>App</i>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Este é o lugar correto para definir um componente</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Botao</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>handleClique<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>texto<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>valor<span class=\"token punctuation\">,</span> setValor<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setNoValor</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">novoValor</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'setValor atual'</span><span class=\"token punctuation\">,</span> novoValor<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setValor</span><span class=\"token punctuation\">(</span>novoValor<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Não defina um componente dentro de outro componente</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Exibir</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>valor<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Exibir valor<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>valor<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Botao handleClique<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setNoValor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> texto<span class=\"token operator\">=</span><span class=\"token string\">\"mil\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Botao handleClique<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setNoValor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> texto<span class=\"token operator\">=</span><span class=\"token string\">\"zerar\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Botao handleClique<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setNoValor</span><span class=\"token punctuation\">(</span>valor <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> texto<span class=\"token operator\">=</span><span class=\"token string\">\"incrementar\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A aplicação ainda parece funcionar, porém, <strong>não implemente componentes desta forma!</strong>\nNunca defina componentes dentro de outros componentes. O método não oferece nenhum benefício e leva a muitos problemas desagradáveis. Os maiores problemas acontecem devido ao React tratar um componente definido dentro de outro componente como um novo componente em cada renderização. Isso torna impossível para o React otimizar o componente.</p>\n<p>Em vez disso, vamos mover a função do componente <i>Exibir</i> para o seu lugar correto, que fica fora da função do componente <i>App</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Exibir</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>valor<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Botao</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>handleClique<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>texto<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>valor<span class=\"token punctuation\">,</span> setValor<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setNoValor</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">novoValor</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'setValor atual'</span><span class=\"token punctuation\">,</span> novoValor<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setValor</span><span class=\"token punctuation\">(</span>novoValor<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Exibir valor<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>valor<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Botao handleClique<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setNoValor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> texto<span class=\"token operator\">=</span><span class=\"token string\">\"mil\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Botao handleClique<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setNoValor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> texto<span class=\"token operator\">=</span><span class=\"token string\">\"zerar\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Botao handleClique<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setNoValor</span><span class=\"token punctuation\">(</span>valor <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> texto<span class=\"token operator\">=</span><span class=\"token string\">\"incrementar\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Leitura Recomendada</h3>\n<p>A internet está cheia de material relacionado à biblioteca React. No entanto, usamos o novo estilo de programação em React para o qual a grande maioria do material encontrado online está desatualizado.</p>\n<p>Estes links talvez possam lhe ser úteis:</p>\n<ul>\n<li>Vale a pena dar uma olhada em algum momento na <a href=\"https://reactjs.org/docs/hello-world.html\">documentação oficial React</a>, embora a maior parte dela só se torne relevante mais para frente no curso. Além disso, tudo relacionado a componentes baseados em classe é irrelevante para nós;</li>\n<li>Alguns cursos no <a href=\"https://egghead.io\">Egghead.io</a>, como o <a href=\"https://egghead.io/courses/start-learning-react\">Start learning React</a>, são de altíssima qualidade; e o recentemente atualizado <a href=\"https://egghead.io/courses/the-beginner-s-guide-to-reactjs\">Beginner's Guide to React</a> também é relativamente bom; ambos os cursos introduzem conceitos que também serão introduzido no decorrer deste curso. <strong>Obs.: O primeiro curso usa componentes de classe, mas o segundo usa a nova abordagem baseada em funções.</strong></li>\n</ul>\n<h3>Juramento do Programador Web</h3>\n<p>Programar é difícil, e é por isso que eu usarei todos os meios possíveis para ser mais fácil:</p>\n<ul>\n<li>Eu manterei meu Console do navegador aberto o tempo todo;</li>\n<li>Eu vou progredir aos poucos, passo a passo;</li>\n<li>Eu escreverei muitas instruções <em>console.log</em> para ter certeza de que estou entendendo como o código se comporta e para me ajudar a identificar os erros;</li>\n<li>Se meu código não funcionar, não escreverei mais nenhuma linha no código. Em vez disso, começarei a excluir o código até que funcione ou retornarei ao estado em que tudo ainda estava funcionando; e</li>\n<li>Quando eu pedir ajuda no canal do Discord ou Telegram do curso ou em outro lugar, formularei minhas perguntas de forma adequada. Veja <a href=\"/ptbr/part0/informacoes_gerais#como-pedir-ajuda-no-discord-telegam\">aqui</a> como pedir ajuda.</li>\n</ul>\n</div>\n<div class=\"tasks\">\n<h3>Exercícios 1.6 a 1.14</h3>\n<p>Envie suas soluções aos exercícios dando \"push\" para seu repositório no GitHub e, em seguida, marque os exercícios concluídos na guia \"my submissions\" no <a href=\"https://studies.cs.helsinki.fi/stats/courses/fullstackopen\">sistema de envio de exercícios</a>.</p>\n<p>Lembre-se: envie <strong>todos</strong> os exercícios de uma parte <strong>de uma única vez</strong>; isto é, envie todas as suas soluções de uma vez para seu repositório. Uma vez que você tenha enviado suas soluções para uma parte, <strong>não é mais possível enviar mais exercícios para essa parte</strong>.</p>\n<p><i> Alguns dos exercícios funcionam na mesma aplicação. Nestes casos, é suficiente enviar apenas a versão final da aplicação. Se desejar, você pode fazer um \"commit\" após cada exercício concluído, mas isso não é obrigatório.</i></p>\n<p><strong>AVISO</strong>: \"create-react-app\" transformará automaticamente seu projeto em um repositório git, a menos que você crie sua aplicação dentro de um repositório git já existente. <strong>Você muito provavelmente não quer que cada um de seus projetos seja um repositório separado</strong>, então basta executar o comando <em>rm -rf .git</em> na raiz de sua aplicação para aplicar as modificações.</p>\n<p>Algumas vezes você terá que executar na raiz do projeto o comando abaixo:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> node_modules/ <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">npm</span> i</code></pre></div>\n<p>Se e <i>quando</i> você encontrar uma mensagem de erro</p>\n<blockquote>\n<p><i>Objects are not valid as a React child</i></p>\n</blockquote>\n<p>lembre-se do que foi explicado <a href=\"/ptbr/part1/introducao_a_biblioteca_react#nao-renderize-objetos\">aqui</a>.</p>\n<p><i><strong>Obs.:</strong> o conteúdo dos exercícios foram deixados no idioma original da tradução (inglês) por questões de conveniência, visto a revisão que os mantenedores do curso devem fazer no código enviado ao sistema de avaliação da Universidade de Helsinque. Desta forma, escreva suas aplicações utilizando os mesmos termos usados nas variáveis, componentes, etc que estão em inglês.</i></p>\n<h4> 1.6: unicafe — 1º passo</h4>\n<p>Como a maioria das empresas, o restaurante universitário da Universidade de Helsinque, <a href=\"https://www.unicafe.fi\">Unicafe</a>, coleta o feedback de seus clientes. Sua tarefa é implementar uma aplicação web que colete o feedback dos clientes. Existem apenas três opções para feedback: <i>good</i> (bom), <i>neutral</i> (neutro) e <i>bad</i> (ruim).</p>\n<p>A aplicação deve exibir o número total de feedbacks coletados para cada categoria. Sua aplicação final pode ficar assim:</p>\n<picture><img src=\"/static/d4fe767d6d8eb46f1dd21334f5f9e46e/5a190/13e.png\" alt=\"captura de tela das opções de feedback\" srcset=\"/static/d4fe767d6d8eb46f1dd21334f5f9e46e/772e8/13e.png 200w,\n/static/d4fe767d6d8eb46f1dd21334f5f9e46e/e17e5/13e.png 400w,\n/static/d4fe767d6d8eb46f1dd21334f5f9e46e/5a190/13e.png 800w,\n/static/d4fe767d6d8eb46f1dd21334f5f9e46e/c1b63/13e.png 1200w,\n/static/d4fe767d6d8eb46f1dd21334f5f9e46e/5faa8/13e.png 1444w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Note que sua aplicação precisa funcionar apenas durante uma única sessão de navegação.  É permitido que, assim que você atualizar a página, o feedback coletado desapareça.</p>\n<p>É aconselhável usar a mesma estrutura que é usada no material e no exercício anterior. O arquivo <i>index.js</i> fica assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span>\n\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Você pode usar o código abaixo como ponto de partida para o arquivo <i>App.js</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// salve os cliques de cada botão em seu próprio estado</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>good<span class=\"token punctuation\">,</span> setGood<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>neutral<span class=\"token punctuation\">,</span> setNeutral<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>bad<span class=\"token punctuation\">,</span> setBad<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      Programe aqui<span class=\"token operator\">!</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<h4>1.7: unicafe — 2º passo</h4>\n<p>Expanda sua aplicação para que ela mostre mais estatísticas sobre o feedback coletado: o número total de feedback coletados, a pontuação média (good: 1, neutral: 0, bad: -1) e a porcentagem de feedback positivo.</p>\n<picture><img src=\"/static/0a5d15ae9f055a15cb469b9c9223df41/5a190/14e.png\" alt=\"captura de tela do feedback positivo, médio e percentual\" srcset=\"/static/0a5d15ae9f055a15cb469b9c9223df41/772e8/14e.png 200w,\n/static/0a5d15ae9f055a15cb469b9c9223df41/e17e5/14e.png 400w,\n/static/0a5d15ae9f055a15cb469b9c9223df41/5a190/14e.png 800w,\n/static/0a5d15ae9f055a15cb469b9c9223df41/c1b63/14e.png 1200w,\n/static/0a5d15ae9f055a15cb469b9c9223df41/ccf0c/14e.png 1428w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>1.8: unicafe — 3º passo</h4>\n<p>Refatore sua aplicação de maneira que a exibição de estatísticas seja extraída para seu próprio componente <i>Statistics</i>. O estado da aplicação deve permanecer no componente raiz <i>App</i>.</p>\n<p>Lembre-se de que componentes não devem ser definidos dentro de outros componentes:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// lugar adequado para definir um componente</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Statistics</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>good<span class=\"token punctuation\">,</span> setGood<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>neutral<span class=\"token punctuation\">,</span> setNeutral<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>bad<span class=\"token punctuation\">,</span> setBad<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// não defina um componente dentro de outro componente</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Statistics</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>1.9: unicafe — 4º passo</h4>\n<p>Modifique sua aplicação para exibir as estatísticas somente após o feedback ter sido coletado.</p>\n<picture><img src=\"/static/b453d7533ae85dcaf3eccf342a353c58/5a190/15e.png\" alt=\"nenhum feedback dado texto screenshot\" srcset=\"/static/b453d7533ae85dcaf3eccf342a353c58/772e8/15e.png 200w,\n/static/b453d7533ae85dcaf3eccf342a353c58/e17e5/15e.png 400w,\n/static/b453d7533ae85dcaf3eccf342a353c58/5a190/15e.png 800w,\n/static/b453d7533ae85dcaf3eccf342a353c58/c1b63/15e.png 1200w,\n/static/b453d7533ae85dcaf3eccf342a353c58/ccf0c/15e.png 1428w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>1.10: unicafe — 5º etapa</h4>\n<p>Continuemos refatorando a aplicação. Extraia esses dois componentes:</p>\n<ul>\n<li><i>Button</i> para definir os botões usados para enviar feedback; e</li>\n<li><i>StatisticLine</i> para exibir uma única estatística, por exemplo, a pontuação média.</li>\n</ul>\n<p>Deixando claro: o componente <i>StatisticLine</i> sempre exibe uma única estatística, o que significa que a aplicação usa vários componentes para renderizar todas as estatísticas:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Statistics</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/// ...</span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>StatisticLine text<span class=\"token operator\">=</span><span class=\"token string\">\"good\"</span> value <span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>StatisticLine text<span class=\"token operator\">=</span><span class=\"token string\">\"neutral\"</span> value <span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>StatisticLine text<span class=\"token operator\">=</span><span class=\"token string\">\"bad\"</span> value <span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O estado da aplicação deve ser mantido no componente raiz <i>App</i>.</p>\n<h4>1.11*: unicafe — 6º passo</h4>\n<p>Exiba as estatísticas em uma <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Tables/Basics\">tabela HTML</a>, para que sua aplicação pareça mais ou menos assim:</p>\n<picture><img src=\"/static/a74acccc17aafb02b3801ffa1fcc0fdc/5a190/16e.png\" alt=\"captura de tela da tabela de estatísticas\" srcset=\"/static/a74acccc17aafb02b3801ffa1fcc0fdc/772e8/16e.png 200w,\n/static/a74acccc17aafb02b3801ffa1fcc0fdc/e17e5/16e.png 400w,\n/static/a74acccc17aafb02b3801ffa1fcc0fdc/5a190/16e.png 800w,\n/static/a74acccc17aafb02b3801ffa1fcc0fdc/c1b63/16e.png 1200w,\n/static/a74acccc17aafb02b3801ffa1fcc0fdc/c65fa/16e.png 1434w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Lembre-se de manter seu console aberto o tempo todo. Se você ver este aviso no seu console</p>\n<picture><img src=\"/static/d6f948307449c2673f28f1077ef4d789/5a190/17a.png\" alt=\"aviso do console\" srcset=\"/static/d6f948307449c2673f28f1077ef4d789/772e8/17a.png 200w,\n/static/d6f948307449c2673f28f1077ef4d789/e17e5/17a.png 400w,\n/static/d6f948307449c2673f28f1077ef4d789/5a190/17a.png 800w,\n/static/d6f948307449c2673f28f1077ef4d789/c1b63/17a.png 1200w,\n/static/d6f948307449c2673f28f1077ef4d789/10ab7/17a.png 1552w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>faça o necessário para fazer o aviso desaparecer. Tente colar a mensagem de erro em um buscador (Google, Bing, etc) se ficar preso.</p>\n<p><i>A origem típica de um erro <code class=\"language-text\">Unchecked runtime.lastError: Could not establish connection. Receiving end does not exist.</code> vem de alguma extensão do Chrome. Vá até <code class=\"language-text\">chrome://extensions/</code> e desative uma por uma e atualize a página da aplicação React; o erro deve por fim desaparecer.</i></p>\n<p><strong>Certifique-se de que, a partir de agora, você não verá mais avisos no seu console!</strong></p>\n<h4>1.12*: anecdotes — 1º passo</h4>\n<p>O mundo da engenharia de software é cheio de <a href=\"http://www.comp.nus.edu.sg/~damithch/pages/SE-quotes.htm\">anedotas</a> que distilam verdades atemporais de nosso campo em frases curtas.</p>\n<p>Expanda a aplicação a seguir, adicionando um botão que, ao ser clicado, exiba uma anedota aleatória da área da engenharia de software:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> anecdotes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'Se fazer algo dói, faça isso com mais frequência.'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Contratar mão de obra para um projeto de software que já está atrasado, faz com que se atrase mais ainda!'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Os primeiros 90% do código correspondem aos primeiros 10% do tempo de desenvolvimento... Os outros 10% do código correspondem aos outros 90% do tempo de desenvolvimento.'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Qualquer tolo escreve código que um computador consegue entender. Bons programadores escrevem código que humanos conseguem entender.'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Otimização prematura é a raiz de todo o mal.'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Antes de mais nada, depurar é duas vezes mais difícil do que escrever o código. Portanto, se você escrever o código da forma mais inteligente possível, você, por definição, não é inteligente o suficiente para depurá-lo.'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Programar sem o uso extremamente intenso do console.log é o mesmo que um médico se recusar a usar raio-x ou testes sanguíneos ao diagnosticar pacientes.'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'A única maneira de ir rápido é ir bem.'</span>\n  <span class=\"token punctuation\">]</span>\n   \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>selected<span class=\"token punctuation\">,</span> setSelected<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>anecdotes<span class=\"token punctuation\">[</span>selected<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>O conteúdo do arquivo <i>index.js</i> é o mesmo dos exercícios anteriores.</p>\n<p>Descubra como gerar números aleatórios (<em>random numbers</em>) em JavaScript, por exemplo, pesquisando na internet ou lendo o <a href=\"https://developer.mozilla.org\">Mozilla Developer Network</a>. Lembre-se de que você pode testar a criação de números aleatórios diretamente no console do seu navegador, por exemplo.</p>\n<p>Sua aplicação no estado final pode ficar mais ou menos assim:</p>\n<picture><img src=\"/static/8577fa00fc4d946e2322de9b2707c89c/5a190/18a.png\" alt=\"anedota aleatória com botão &#x22;próximo&#x22;\" srcset=\"/static/8577fa00fc4d946e2322de9b2707c89c/772e8/18a.png 200w,\n/static/8577fa00fc4d946e2322de9b2707c89c/e17e5/18a.png 400w,\n/static/8577fa00fc4d946e2322de9b2707c89c/5a190/18a.png 800w,\n/static/8577fa00fc4d946e2322de9b2707c89c/c1b63/18a.png 1200w,\n/static/8577fa00fc4d946e2322de9b2707c89c/82c1e/18a.png 1398w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p><strong>AVISO</strong>: \"create-react-app\" transformará automaticamente seu projeto em um repositório git, a menos que você crie sua aplicação dentro de um repositório git já existente. <strong>Você muito provavelmente não quer que cada um de seus projetos seja um repositório separado</strong>, então basta executar o comando <em>rm -rf .git</em> na raiz de sua aplicação para aplicar as modificações.</p>\n<h4>1.13*: anecdotes — 2º passo</h4>\n<p>Amplie sua aplicação para que você possa votar na anedota exibida.</p>\n<picture><img src=\"/static/06f95cb43a18bd6429174200a8d17cff/5a190/19a.png\" alt=\"aplicação de anedotas com botão de votos adicionado\" srcset=\"/static/06f95cb43a18bd6429174200a8d17cff/772e8/19a.png 200w,\n/static/06f95cb43a18bd6429174200a8d17cff/e17e5/19a.png 400w,\n/static/06f95cb43a18bd6429174200a8d17cff/5a190/19a.png 800w,\n/static/06f95cb43a18bd6429174200a8d17cff/c1b63/19a.png 1200w,\n/static/06f95cb43a18bd6429174200a8d17cff/e8814/19a.png 1392w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p><strong>Obs.:</strong> armazene os votos de cada anedota em um array ou objeto no estado do componente. Lembre-se de que a forma correta de atualizar o estado armazenado em estruturas de dados complexas, como objetos e arrays, é fazer uma cópia do estado.</p>\n<p>Você pode criar uma cópia de um objeto assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> pontos <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> copia <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>pontos <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// incrementa o valor da propriedade 2 (dois) por 1 (um)</span>\ncopia<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>     </code></pre></div>\n<p>Ou uma cópia de um array assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> pontos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> copia <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>pontos<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// incrementa o valor na posição 2 (dois) por 1 (um)</span>\ncopia<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>     </code></pre></div>\n<p>Utilizar um array pode ser a escolha mais simples neste caso. Uma pesquisa na Internet vai te mostrar muitas formas de como <a href=\"https://stackoverflow.com/questions/20222501/how-to-create-a-zero-filled-javascript-array-of-arbitrary-length/22209781\">criar um array preenchido com zeros com um comprimento arbitrário</a>.</p>\n<h4>1.14*: anecdotes — 3º passo</h4>\n<p>Agora, implemente a versão final da aplicação que exibe a anedota com o maior número de votos:</p>\n<picture><img src=\"/static/3e8638efbbbbcabac7bb79466ab3a5f6/5a190/20a.png\" alt=\"anedota com o maior número de votos\" srcset=\"/static/3e8638efbbbbcabac7bb79466ab3a5f6/772e8/20a.png 200w,\n/static/3e8638efbbbbcabac7bb79466ab3a5f6/e17e5/20a.png 400w,\n/static/3e8638efbbbbcabac7bb79466ab3a5f6/5a190/20a.png 800w,\n/static/3e8638efbbbbcabac7bb79466ab3a5f6/c1b63/20a.png 1200w,\n/static/3e8638efbbbbcabac7bb79466ab3a5f6/29007/20a.png 1600w,\n/static/3e8638efbbbbcabac7bb79466ab3a5f6/b2b2c/20a.png 1708w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Se múltiplas anedotas estiverem empatadas no primeiro lugar, exiba apenas uma delas.</p>\n<p>Este foi o último exercício para esta parte do curso, e é hora de enviar seu código para o GitHub e marcar todos os seus exercícios concluídos na guia \"my submissions\" do <a href=\"https://studies.cs.helsinki.fi/stats/courses/fullstackopen\">sistema de envio de exercícios</a>.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/83f1c8a7795e9e8eaffaec29b1ee79b1/part-1.svg"},"part":1,"letter":"d","lang":"ptbr"}}},"pageContext":{"part":1,"letter":"d","lang":"ptbr"}},"staticQueryHashes":["3128451518"]}
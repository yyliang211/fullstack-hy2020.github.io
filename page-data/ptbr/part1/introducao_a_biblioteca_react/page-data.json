{"componentChunkName":"component---src-templates-content-template-js","path":"/ptbr/part1/introducao_a_biblioteca_react","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Agora, começaremos a nos familiarizar com provavelmente o tópico mais importante deste curso, a biblioteca <a href=\"https://reactjs.org/\">React</a>. Vamos começar criando uma aplicação React simples, conhecendo os conceitos-chave de React.</p>\n<p>A maneira mais simples de começar é usando uma ferramenta chamada <a href=\"https://github.com/facebook/create-react-app\">create-react-app</a>. É possível (mas não necessário) instalar o <i>create-react-app</i> em sua máquina se a ferramenta <i>npm</i> instalada junto com o Node estiver na versão <i>5.3</i>, pelo menos.</p>\n<p><i>Durante o curo, você também pode utilizar a nova ferramenta frontend chamada <a href=\"https://vitejs.dev/\">Vite</a>, se desejar. O create-react-app ainda é a ferramenta recomendada pelo time do React e é por isso que continua sendo a ferramenta padrão para configurar um projeto React neste curso. Leia <a href=\"https://github.com/reactjs/reactjs.org/pull/5487#issuecomment-1409720741\">aqui</a> como o time React enxerga o futuro das ferramentas React.</i></p>\n<p>Vamos criar uma aplicação chamada <i>part1</i> e navegar até o seu diretório.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx create-react-app part1\n<span class=\"token builtin class-name\">cd</span> part1</code></pre></div>\n<p>A aplicação é executada da seguinte forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> start</code></pre></div>\n<p>Por padrão, a aplicação é executada no localhost, porta 3000, no endereço <a href=\"http://localhost:3000\">http://localhost:3000</a>.</p>\n<p>Seu navegador padrão deve ser automaticamente aberto. Abra <strong>imediatamente</strong> o console do navegador. Além disso, abra um editor de texto para que você possa ver o código e a página web ao mesmo tempo na tela:</p>\n<picture><img src=\"/static/182fc3f16b4e18cf968de9bbd7efa653/5a190/1e.png\" alt=\"código e navegador lado a lado\" srcset=\"/static/182fc3f16b4e18cf968de9bbd7efa653/772e8/1e.png 200w,\n/static/182fc3f16b4e18cf968de9bbd7efa653/e17e5/1e.png 400w,\n/static/182fc3f16b4e18cf968de9bbd7efa653/5a190/1e.png 800w,\n/static/182fc3f16b4e18cf968de9bbd7efa653/c1b63/1e.png 1200w,\n/static/182fc3f16b4e18cf968de9bbd7efa653/29007/1e.png 1600w,\n/static/182fc3f16b4e18cf968de9bbd7efa653/21e8f/1e.png 1684w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>O código da aplicação reside no diretório <i>src</i>. Vamos simplificar o código padrão para que o conteúdo do arquivo index.js fique assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span>\n\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>E o arquivo <i>App.js</i> fique assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Olá<span class=\"token punctuation\">,</span> mundo<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>Os arquivos <i>App.css</i>, <i>App.test.js</i>, <i>index.css</i>, <i>logo.svg</i>, <i>setupTests.js</i> e <i>reportWebVitals.js</i> podem ser excluídos, pois não são necessários em nossa aplicação neste momento.</p>\n<h3>Componente</h3>\n<p>O arquivo <i>App.js</i> agora define um componente <a href=\"https://reactjs.org/docs/components-and-props.html\">React</a> com o nome <i>App</i>. O comando na linha final do arquivo <i>index.js</i></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>renderiza seu conteúdo dentro do elemento <i>div</i>, definido no arquivo <i>public/index.html</i>, com o valor de <i>id</i> 'root'.</p>\n<p>Por padrão, o arquivo <i>public/index.html</i> não contém nenhum marcador HTML que seja visível para nós no navegador:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ptbr<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n      conteúdo não mostrado ...\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>noscript</span><span class=\"token punctuation\">></span></span>You need to enable JavaScript to run this app.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>noscript</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Você pode até tentar adicionar algum HTML ao arquivo, no entanto, ao usar React, todo o conteúdo que precisa ser renderizado é geralmente definido como \"componentes React\".</p>\n<p>Vamos dar uma olhada mais de perto no código que define o componente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Olá<span class=\"token punctuation\">,</span> mundo<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Como você provavelmente já adivinhou, o componente será renderizado como uma tag <i>div</i>, que envolve uma tag <i>p</i> contendo o texto <i>\"Olá, mundo!\"</i>.</p>\n<p>Tecnicamente, o componente é definido como uma função JavaScript. O código a seguir também é uma função (que não recebe nenhum parâmetro):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Olá<span class=\"token punctuation\">,</span> mundo<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>A função é, então, atribuída a uma (variável) constante <i>App</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> App <span class=\"token operator\">=</span> <span class=\"token operator\">...</span></code></pre></div>\n<p>Existem algumas maneiras de definir funções em JavaScript. Aqui usaremos as <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">funções de seta</a> (arrow functions), que são descritas em uma versão mais recente de JavaScript conhecida como <a href=\"http://es6-features.org/#Constants\">ECMAScript 6</a>, também chamada de ES6.</p>\n<p>Por conta da função consistir em apenas uma única expressão, usamos uma notação abreviada, que representa este trecho de código:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Olá<span class=\"token punctuation\">,</span> mundo<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Em outras palavras, a função retorna o valor da expressão.</p>\n<p>A função que define o componente pode conter qualquer tipo de código JavaScript. Modifique seu componente da seguinte maneira:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Olá do componente!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Olá<span class=\"token punctuation\">,</span> mundo<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>E observe o que acontece no console do navegador:</p>\n<picture><img src=\"/static/4a9dce49d75016ac6b0a1ef1671816b3/5a190/30.png\" alt=\"console do navegador com uma seta mostrando o log com a mensagem &#x22;Hello from component&#x22;\" srcset=\"/static/4a9dce49d75016ac6b0a1ef1671816b3/772e8/30.png 200w,\n/static/4a9dce49d75016ac6b0a1ef1671816b3/e17e5/30.png 400w,\n/static/4a9dce49d75016ac6b0a1ef1671816b3/5a190/30.png 800w,\n/static/4a9dce49d75016ac6b0a1ef1671816b3/c1b63/30.png 1200w,\n/static/4a9dce49d75016ac6b0a1ef1671816b3/29007/30.png 1600w,\n/static/4a9dce49d75016ac6b0a1ef1671816b3/c6720/30.png 1922w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>A primeira regra do desenvolvimento web front-end:</p>\n<blockquote>\n<p><i> Mantenha o console aberto o tempo todo.</i></p>\n</blockquote>\n<p>Vamos repetir juntos: <i>Prometo manter o console aberto o tempo todo</i> durante este curso e pelo resto da minha vida quando estiver desenvolvendo para a web.</p>\n<p>Também é possível renderizar conteúdo dinâmico dentro de um componente.</p>\n<p>Modifique o componente da seguinte maneira:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> hoje <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n  <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hoje<span class=\"token punctuation\">,</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Olá<span class=\"token punctuation\">,</span> mundo<span class=\"token operator\">!</span> Hoje é <span class=\"token punctuation\">{</span>hoje<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">}</span> mais <span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">}</span> é <span class=\"token punctuation\">{</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Qualquer código JavaScript dentro das chaves é avaliado e o resultado desta avaliação é incorporado no lugar definido no HTML produzido pelo componente.</p>\n<p>Note que você não deve remover a linha no final do componente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>A exportação não é mostrada na maioria dos exemplos do material do curso. Sem a exportação, o componente e a aplicação inteira desmoronam.</p>\n<p>Você se lembrou da sua promessa de deixar o console aberto? O que foi impresso?</p>\n<h3>JSX</h3>\n<p>Parece que os componentes React estão retornando marcações HTML. No entanto, não é esse o caso. A maior parte da estrutura de componentes React é escrita usando <a href=\"https://reactjs.org/docs/introducing-jsx.html\">JSX</a> (JavaScript Syntax Extension [Extensão de Sintaxe para JavaScript]). Embora o JSX pareça com HTML, estamos lidando com uma maneira de escrever JavaScript. Por baixo dos panos, o JSX retornado por componentes React é compilado em JavaScript.</p>\n<p>Depois da compilação, nossa aplicação fica assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> hoje <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n  <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n  <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Olá, mundo! Hoje é '</span><span class=\"token punctuation\">,</span> hoje<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> <span class=\"token string\">' mais '</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token string\">' é '</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A compilação é gerenciada pelo <a href=\"https://babeljs.io/repl/\">Babel</a>. Projetos criados com <em>create-react-app</em> são configurados para compilar automaticamente. Vamos aprender mais sobre esse tópico na <a href=\"/ptbr/part7\">Parte 7</a> deste curso.</p>\n<p>Também é possível escrever React como \"JavaScript puro\" sem usar JSX. Embora não seja recomendável.</p>\n<p>Na prática, o JSX é muito parecido com HTML com a diferença de que, com o JSX, é possível inserir facilmente conteúdo dinâmico escrevendo código JavaScript dentro de chaves. A ideia do JSX é bastante semelhante a muitas linguagens de modelos, como Thymeleaf usado junto ao Java Spring, que são usadas em servidores.</p>\n<p>JSX é \"semelhante a <a href=\"https://developer.mozilla.org/en-US/docs/Web/XML/XML_introduction\">XML</a>\" (Extensible Markup Language [Linguagem de Marcação Extensível]), o que significa que todas as tags precisam ser fechadas. Por exemplo, uma nova linha é um elemento vazio, que em HTML pode ser escrito da seguinte maneira:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Mas ao escrever em JSX, a tag precisa ser fechada:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<h3>Múltiplos componentes</h3>\n<p>Vamos modificar o arquivo <i>App.js</i> da seguinte forma (obs.: a exportação na parte inferior é omitida nestes <i>exemplos</i>, tanto agora quanto no futuro. Ela ainda é necessária para que o código funcione):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Olá<span class=\"token punctuation\">,</span> mundo<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Olá a todos<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Hello <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Definimos um novo componente <i>Hello</i> e o usamos dentro do componente <i>App</i>. Naturalmente, um componente pode ser usado várias vezes:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Olá a todos<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Hello <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Hello <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Hello <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Escrever componentes em React é fácil, e utilizando combinação de componentes mesmo uma aplicação mais complexa pode ser mantida de forma organizada. De fato, uma das filosofias fundamentais do React é criar aplicações a partir de muitos componentes que são especializados e reutilizáveis.</p>\n<p>Outra forte convenção é a ideia de um componente <i>root</i> chamado <i>App</i> no topo da árvore de componentes da aplicação. No entanto, como aprenderemos na <a href=\"/ptbr/part6\">Parte 6</a>, há situações em que o componente <i>App</i> não é exatamente a raiz (root), mas é envolto em um componente utilitário apropriado.</p>\n<h3>props: passando dados para componentes</h3>\n<p>É possível passar dados para componentes usando as chamadas <a href=\"https://reactjs.org/docs/components-and-props.html\">props</a> (properties [propriedades]).</p>\n<p>Vamos modificar o componente <i>Hello</i> da seguinte maneira:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Olá <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Agora, a função que define o componente tem um parâmetro \"props\". Como argumento, o parâmetro recebe um objeto, que possui campos correspondentes a todas as \"props\" que o usuário do componente define.</p>\n<p>As props são definidas da seguinte forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Olá a todos<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Hello nome<span class=\"token operator\">=</span><span class=\"token string\">'George'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Hello nome<span class=\"token operator\">=</span><span class=\"token string\">'Daisy'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>É possível haver um número arbitrário de props e seus valores podem ser strings \"hard-coded\" (dados ou estruturas em um código que não podem ser alterados sem modificar manualmente o programa) ou resultados de expressões JavaScript. Se o valor da prop é obtido usando JavaScript, ele deve ser envolvido em chaves.</p>\n<p>Vamos modificar o código para que o componente <i>Hello</i> use duas props:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">        Olá <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> você tem <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>idade<span class=\"token punctuation\">}</span> anos</span>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> nome <span class=\"token operator\">=</span> <span class=\"token string\">'Peter'</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> idade <span class=\"token operator\">=</span> <span class=\"token number\">10</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Olá a todos<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Hello nome<span class=\"token operator\">=</span><span class=\"token string\">'Maya'</span> idade<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">26</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Hello nome<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>nome<span class=\"token punctuation\">}</span> idade<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>idade<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As props enviadas pelo componente <i>App</i> são os valores das variáveis, isto é, o resultado da avaliação da expressão de soma e de uma string comum.</p>\n<p>O componente <i>Hello</i> também registra o valor do objeto props no console.</p>\n<p>Eu espero genuinamente que seu console esteja aberto. Se não estiver, lembre-se do que você prometeu:</p>\n<blockquote>\n<p> <i>Eu prometo manter o console aberto o tempo todo durante este curso e pelo resto da minha vida quando estiver desenvolvendo para a web.</i></p>\n</blockquote>\n<p>Desenvolvimento de software é difícil. Fica ainda mais difícil se não estiver usando todas as ferramentas possíveis, como o console web e a impressão de depuração com <em>console.log</em>. Profissionais usam ambos <i>o tempo todo</i>, e não há razão alguma para que um iniciante não adote o uso desses métodos maravilhosos que tornam a vida muito mais fácil.</p>\n<h3>Alguns lembretes</h3>\n<p>O React foi configurado para gerar mensagens de erro bastante claras. Mesmo assim, você deve, pelo menos no começo, avançar com <strong>passos bem curtos</strong> e tendo certeza de que cada mudança funciona como desejado.</p>\n<p><strong>O console deve estar sempre aberto</strong>. Se o navegador relatar erros, não é aconselhável continuar escrevendo mais código, esperando por milagres. Em vez disso, você deve tentar entender a causa do erro e, por exemplo, voltar ao estado anterior de funcionamento:</p>\n<picture><img src=\"/static/d6976fc68cf1d476dfdad2730e4614d5/5a190/2a.png\" alt=\"captura de tela de um erro prop indefinido\" srcset=\"/static/d6976fc68cf1d476dfdad2730e4614d5/772e8/2a.png 200w,\n/static/d6976fc68cf1d476dfdad2730e4614d5/e17e5/2a.png 400w,\n/static/d6976fc68cf1d476dfdad2730e4614d5/5a190/2a.png 800w,\n/static/d6976fc68cf1d476dfdad2730e4614d5/c1b63/2a.png 1200w,\n/static/d6976fc68cf1d476dfdad2730e4614d5/29007/2a.png 1600w,\n/static/d6976fc68cf1d476dfdad2730e4614d5/922e6/2a.png 2140w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Como já mencionamos, é possível e recompensador escrever comandos <em>console.log()</em> (que imprimem no console) ao programar em React.</p>\n<p>Além disso, tenha em mente que <strong>os nomes de componentes React devem estar com a primeira letra em maiúsculo</strong>. Se você tentar definir um componente da seguinte forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">footer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      Aplicação de Saudações criado por <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">'https://github.com/mluukkai'</span><span class=\"token operator\">></span>mluukkai<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>E usá-lo desta forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Olá a todos<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Hello nome<span class=\"token operator\">=</span><span class=\"token string\">'Maya'</span> idade<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">26</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>footer <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A página não vai exibir o conteúdo definido dentro do componente Footer e, em vez disso, React cria apenas um elemento <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer\">footer</a> vazio, ou seja, o elemento HTML incorporado em vez do elemento React personalizado com o mesmo nome. Se você mudar a primeira letra do nome do componente para maiúsculo, o React cria um elemento <i>div</i> definido no componente Footer, que é renderizado na página.</p>\n<p>Note que o conteúdo de um componente React (normalmente) precisa conter <strong>um elemento raiz (root)</strong>. Se, por exemplo, tentarmos definir o componente <i>App</i> sem o elemento <i>div</i> externo:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Olá a todos<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Hello nome<span class=\"token operator\">=</span><span class=\"token string\">'Maya'</span> idade<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">26</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Footer <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>o resultado é uma mensagem de erro.</p>\n<picture><img src=\"/static/0bc70a29176d14bf02ca3155ead24c2b/5a190/3c.png\" alt=\"captura de tela de múltiplos erros de elementos-raiz\" srcset=\"/static/0bc70a29176d14bf02ca3155ead24c2b/772e8/3c.png 200w,\n/static/0bc70a29176d14bf02ca3155ead24c2b/e17e5/3c.png 400w,\n/static/0bc70a29176d14bf02ca3155ead24c2b/5a190/3c.png 800w,\n/static/0bc70a29176d14bf02ca3155ead24c2b/c1b63/3c.png 1200w,\n/static/0bc70a29176d14bf02ca3155ead24c2b/52ab5/3c.png 1420w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Usar um elemento raiz não é a única opção viável. Um <i>array</i> (vetor) de componentes também é uma solução válida:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Olá a todos<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">&lt;</span>Hello nome<span class=\"token operator\">=</span><span class=\"token string\">'Maya'</span> idade<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">26</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">&lt;</span>Footer <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Porém, definir o componente raiz da aplicação não é algo particularmente sábio a se fazer, e deixa o código com uma aparência um pouco feia.</p>\n<p>Por conta do elemento raiz ser compulsório, temos elementos div \"extras\" na árvore DOM. Isso pode ser evitado usando <a href=\"https://reactjs.org/docs/fragments.html#short-syntax\">fragmentos</a>, ou seja, envolvendo os elementos a serem retornados pelo componente com um elemento vazio:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> nome <span class=\"token operator\">=</span> <span class=\"token string\">'Peter'</span>\n  <span class=\"token keyword\">const</span> idade <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Olá a todos<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Hello nome<span class=\"token operator\">=</span><span class=\"token string\">'Maya'</span> idade<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">26</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Hello nome<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>nome<span class=\"token punctuation\">}</span> idade<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>idade<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Footer <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Agora, a aplicação compila com sucesso, e a DOM gerada pelo React não contém mais o elemento \"div\" extra.</p>\n<h3>Não renderize objetos</h3>\n<p>Considere uma aplicação que imprime os nomes e idades de nossos amigos na tela:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> amigos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> \n      <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">nome</span><span class=\"token operator\">:</span> <span class=\"token string\">'Peter'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">idade</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">nome</span><span class=\"token operator\">:</span> <span class=\"token string\">'Maya'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">idade</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>amigos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>amigos<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>No entanto, nada aparece na tela. Venho tentando encontrar o problema no código há 15 minutos, mas não consigo descobrir onde o problema poderia estar.</p>\n<p>Eu finalmente lembro da promessa que fizemos:</p>\n<blockquote>\n<p><i>Eu prometo manter o console aberto o tempo todo durante este curso e e pelo resto da minha vida quando estiver desenvolvendo para a web.</i></p>\n</blockquote>\n<p>O console grita em vermelho:</p>\n<picture><img src=\"/static/fdcc65efff174e0c0ce15bf636c4cd1c/5a190/34new.png\" srcset=\"/static/fdcc65efff174e0c0ce15bf636c4cd1c/772e8/34new.png 200w,\n/static/fdcc65efff174e0c0ce15bf636c4cd1c/e17e5/34new.png 400w,\n/static/fdcc65efff174e0c0ce15bf636c4cd1c/5a190/34new.png 800w,\n/static/fdcc65efff174e0c0ce15bf636c4cd1c/c1b63/34new.png 1200w,\n/static/fdcc65efff174e0c0ce15bf636c4cd1c/29007/34new.png 1600w,\n/static/fdcc65efff174e0c0ce15bf636c4cd1c/cc6fe/34new.png 1860w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>O núcleo do problema é que: <i>Objetos não são válidos como elementos-filho React</i>, isto é, a aplicação tenta renderizar <i>objetos</i> e falha novamente.</p>\n<p>O código tenta renderizar as informações de um amigo da seguinte maneira:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>amigos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></code></pre></div>\n<p>E isso causa um problema, porque o item a ser renderizado dentro das chaves é um objeto.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">nome</span><span class=\"token operator\">:</span> <span class=\"token string\">'Peter'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">idade</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Em React, elementos individuais renderizadas dentro das chaves devem ser valores primitivos, como números ou strings.</p>\n<p>A solução é a seguinte:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> amigos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> \n      <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">nome</span><span class=\"token operator\">:</span> <span class=\"token string\">'Peter'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">idade</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">nome</span><span class=\"token operator\">:</span> <span class=\"token string\">'Maya'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">idade</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>amigos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>amigos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>idade<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>amigos<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>amigos<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>idade<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>O nome do amigo é renderizado separadamente dentro das chaves:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>amigos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Também a idade:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>amigos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>idade<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Após corrigir o erro, limpe as mensagens de erro do console clicando em 🚫 e, em seguida, recarregue o conteúdo da página e garanta que não haja mensagens de erro exibidas.</p>\n<p>Uma adição ao lembrete anterior: React também permite que arrays sejam renderizados se conterem valores elegíveis para renderização (como números ou strings). Então, o seguinte programa funcionaria, embora o resultado não seja o que desejamos:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> amigos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'Peter'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Maya'</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>amigos<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nesta parte, nem vale a pena tentar usar a renderização direta de tabelas. Voltaremos a discutir isso na próxima parte.</p>\n</div>\n<div class=\"tasks\">\n  <h3>Exercícios 1.1 a 1.2</h3>\n<p>Os exercícios são enviados via GitHub, marcando os exercícios como concluídos na guia \"my submissions\" do <a href=\"https://studies.cs.helsinki.fi/stats/courses/fullstackopen\">sistema de envio de exercícios</a>.</p>\n<p>Os exercícios são enviados <strong>uma parte de cada vez</strong>. Quando você tiver enviado os exercícios para uma parte, não poderá mais enviar nenhum exercício não feito para essa parte.</p>\n<p>Note que nesta parte há <a href=\"/ptbr/part1/um_estado_mais_complexo_e_depuracao_de_aplicacoes_react#exercicios-1-6-a-1-14\">mais exercícios</a> além dos encontrados abaixo. <i>Não envie seus exercícios</i> até que você tenha concluído todos os exercícios desta parte.</p>\n<p>É possível colocar todos os exercícios em um mesmo repositório ou usar múltiplos repositórios diferentes. Se você enviar exercícios de diferentes partes para o mesmo repositório, dê nomes apropriados às suas pastas.</p>\n<p>Uma boa maneira de nomear as pastas no seu repositório de envio é a seguinte:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">part0\npart1\n  courseinfo\n  unicafe\n  anecdotes\npart2\n  phonebook\n  countries</code></pre></div>\n<p>Veja este <a href=\"https://github.com/fullstack-hy2020/example-submission-repository\">exemplo de repositório de submissão</a>!</p>\n<p>Para cada parte do curso, há um diretório, que se ramifica em diretórios contendo uma série de exercícios, como \"unicafe\" para a Parte 1.</p>\n<p>Para cada aplicação web em uma série de exercícios, é recomendado que você envie todos os arquivos relacionados a essa aplicação, exceto o diretório <i>node_modules</i>.</p>\n<p><i><strong>Obs.:</strong> o conteúdo dos exercícios foram deixados no idioma original da tradução (inglês) por questões de conveniência, visto a revisão que os mantenedores do curso devem fazer no código enviado ao sistema de avaliação da Universidade de Helsinque. Desta forma, escreva suas aplicações utilizando os mesmos termos usados nas variáveis, componentes, etc que estão em inglês.</i></p>\n  <h4>1.1: course information — 1º passo</h4>\n<p><i>A aplicação que começaremos a trabalhar neste exercício será desenvolvida em alguns dos exercícios seguintes. Neste e em outros conjuntos de exercícios futuros neste curso, é suficiente enviar apenas o estado final da aplicação. Se desejar, também pode criar um commit para cada exercício da série, mas é algo totalmente opcional.</i></p>\n<p>Use \"create-react-app\" para inicializar uma nova aplicação. Modifique o arquivo <i>index.js</i> para que fique desta forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span>\n\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>E <i>App.js</i> para:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> course <span class=\"token operator\">=</span> <span class=\"token string\">'Desenvolvimento de aplicação Half Stack'</span>\n  <span class=\"token keyword\">const</span> part1 <span class=\"token operator\">=</span> <span class=\"token string\">'Fundamentos da biblioteca React'</span>\n  <span class=\"token keyword\">const</span> exercises1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n  <span class=\"token keyword\">const</span> part2 <span class=\"token operator\">=</span> <span class=\"token string\">'Usando props para passar dados'</span>\n  <span class=\"token keyword\">const</span> exercises2 <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n  <span class=\"token keyword\">const</span> part3 <span class=\"token operator\">=</span> <span class=\"token string\">'Estado de um componente'</span>\n  <span class=\"token keyword\">const</span> exercises3 <span class=\"token operator\">=</span> <span class=\"token number\">14</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>course<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>part1<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>exercises1<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>part2<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>exercises2<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>part3<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>exercises3<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Number <span class=\"token keyword\">of</span> exercises <span class=\"token punctuation\">{</span>exercises1 <span class=\"token operator\">+</span> exercises2 <span class=\"token operator\">+</span> exercises3<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>E remova arquivos extras (App.css, App.test.js, index.css, logo.svg, setupTests.js, reportWebVitals.js).</p>\n<p>Infelizmente, toda a aplicação está no mesmo componente. Refatore o código para que consista em três novos componentes: <i>Header</i>, <i>Content</i> e <i>Total</i>. Todos os dados ainda residem no componente <i>App</i>, que passa os dados necessários a cada componente usando <i>props</i>. <i>Header</i> cuida da renderização do nome do curso, <i>Content</i> renderiza as partes e o número de exercícios e <i>Total</i> renderiza o número total de exercícios.</p>\n<p>Defina os novos componentes no arquivo <i>App.js</i>.</p>\n<p>O corpo do componente <i>App</i> ficará desta forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// definições \"const\"</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Header course<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>course<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Content <span class=\"token operator\">...</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Total <span class=\"token operator\">...</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>ATENÇÃO I</strong> Não tente programar todos os componentes simultaneamente, pois isso quase que certamente fará com que a aplicação desmorone. Avance em pequenos passos. Programe primeiro o componente <i>Header</i>, por exemplo, e somente quando estiver funcionando corretamente, prossiga para o próximo componente.</p>\n<p>O progresso cuidadoso e que avança em pequenos passos pode parecer lento, porém, na verdade, é <i> de longe o caminho mais rápido</i> para o progresso. O famoso desenvolvedor de software Robert \"Uncle Bob\" Martin afirmou:</p>\n<blockquote>\n<p><i>\"A única maneira de ir rápido é ir bem.\"</i></p>\n</blockquote>\n<p>Ou seja, de acordo com Martin, o progresso cuidadoso, passo a passo, é, ainda, a única maneira de ir rápido.</p>\n<p><strong>ATENÇÃO II</strong> \"create-react-app\" faz automaticamente com que o projeto se torne um repositório git, a menos que a aplicação seja criada dentro de um repositório já existente. É muito provável que você <strong>não queira</strong> que o projeto se torne um repositório, então execute o comando <em>rm -rf .git</em> na raiz do projeto.</p>\n<h4>1.2: course information — 2º passo</h4>\n<p>Refatore o componente <i>Content</i> de tal forma que ele não renderize os nomes das partes ou seus números de exercícios por si mesmo. Em vez disso, somente renderiza três componentes <i>Part</i>, cada um dos quais renderiza o nome e o número de exercícios de uma parte.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Content <span class=\"token operator\">=</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Part <span class=\"token operator\">...</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Part <span class=\"token operator\">...</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Part <span class=\"token operator\">...</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>No momento, nossa aplicação passa informações de uma maneira bastante primitiva, já que está baseada em variáveis individuais. Vamos corrigir isso na <a href=\"/ptbr/part2\">Parte 2</a>.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/83f1c8a7795e9e8eaffaec29b1ee79b1/part-1.svg"},"part":1,"letter":"a","lang":"ptbr"}}},"pageContext":{"part":1,"letter":"a","lang":"ptbr"}},"staticQueryHashes":["3128451518"]}
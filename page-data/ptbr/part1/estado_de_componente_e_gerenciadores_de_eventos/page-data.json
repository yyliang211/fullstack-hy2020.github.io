{"componentChunkName":"component---src-templates-content-template-js","path":"/ptbr/part1/estado_de_componente_e_gerenciadores_de_eventos","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Vamos voltar a trabalhar com React.</p>\n<p>Comecemos com um novo exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n        Olá <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> você tem <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>idade<span class=\"token punctuation\">}</span> anos<span class=\"token punctuation\">.</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> nome <span class=\"token operator\">=</span> <span class=\"token string\">'Peter'</span>\n  <span class=\"token keyword\">const</span> idade <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Olá a todos<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Hello nome<span class=\"token operator\">=</span><span class=\"token string\">\"Maya\"</span> idade<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">26</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Hello nome<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>nome<span class=\"token punctuation\">}</span> idade<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>idade<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Funções auxiliares de componentes</h3>\n<p>Vamos expandir nosso componente <i>Hello</i> para que ele adivinhe o ano de nascimento da pessoa que está sendo saudada:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">anoDeNascimento</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> anoDeHoje <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> anoDeHoje <span class=\"token operator\">-</span> props<span class=\"token punctuation\">.</span>idade</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n        Olá <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>nome<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> você tem <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>idade<span class=\"token punctuation\">}</span> anos<span class=\"token punctuation\">.</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Então<span class=\"token punctuation\">,</span> você nasceu provavelmente em <span class=\"token punctuation\">{</span><span class=\"token function\">anoDeNascimento</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A lógica para achar o ano de nascimento é separada em uma função que é chamada quando o componente é renderizado.</p>\n<p>A idade da pessoa não precisa ser passada como parâmetro para a função, já que ela pode acessar diretamente todas as propriedades que são passadas para o componente.</p>\n<p>Se examinarmos nosso código atual de perto, vamos perceber que a função \"auxiliadora\" é definida dentro de outra função que define o comportamento de nosso componente. Em Java, definir uma função dentro de outra é algo complexo e incômodo, portanto, não é algo muito comum. Em JavaScript, entretanto, definir funções dentro de funções é uma técnica amplamente usada.</p>\n<h3>Desestruturação (Destructuring)</h3>\n<p>Antes de avançarmos, vamos dar uma olhada em uma pequena, porém útil, funcionalidade da linguagem JavaScript que foi adicionada na especificação ES6, que nos permite <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">desestruturar</a> (<em>destructuring assignment</em> [atribuição via desestruturação]) valores de objetos e arrays por atribuição.</p>\n<p>Em nosso código anterior, tivemos que referenciar os dados passados para nosso componente como <em>props.nome</em> e <em>props.idade</em>. Dessas duas expressões, tivemos que repetir <em>props.idade</em> duas vezes em nosso código.</p>\n<p>Já que <i>props</i> é um objeto...</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">nome</span><span class=\"token operator\">:</span> <span class=\"token string\">'Arto Hellas'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">idade</span><span class=\"token operator\">:</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>... podemos simplificar nosso componente atribuindo os valores das propriedades diretamente em duas variáveis <em>nome</em> e <em>idade</em> que podemos utilizar em nosso código:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> nome <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>nome</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> idade <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>idade</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">anoDeNascimento</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> idade\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Olá <span class=\"token punctuation\">{</span>nome<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> você tem <span class=\"token punctuation\">{</span>idade<span class=\"token punctuation\">}</span> anos<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></span>      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Então<span class=\"token punctuation\">,</span> você nasceu provavelmente em <span class=\"token punctuation\">{</span><span class=\"token function\">anoDeNascimento</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note que também utilizamos a sintaxe mais compacta para as <em>arrow functions</em> ao definir a função <em>anoDeNascimento</em>. Como mencionado anteriormente, se uma <em>arrow function</em> consiste em uma única expressão, então o corpo da função não precisa ser escrito dentro de chaves. Nesta forma mais compacta, a função simplesmente retorna o resultado da única expressão.</p>\n<p>Resumindo, as duas definições de função mostradas abaixo são equivalentes:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">anoDeNascimento</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> idade\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">anoDeNascimento</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> idade\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A desestruturação torna a atribuição de variáveis ainda mais fácil, já que podemos usá-la para extrair e reunir os valores das propriedades de um objeto em variáveis separadas:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> nome<span class=\"token punctuation\">,</span> idade <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props</span>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">anoDeNascimento</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> idade\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Olá <span class=\"token punctuation\">{</span>nome<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> você tem <span class=\"token punctuation\">{</span>idade<span class=\"token punctuation\">}</span> anos<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Então<span class=\"token punctuation\">,</span> você provavelmente nasceu em <span class=\"token punctuation\">{</span><span class=\"token function\">anoDeNascimento</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Se o objeto que estamos desestruturando tem os valores...</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">nome</span><span class=\"token operator\">:</span> <span class=\"token string\">'Arto Hellas'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">idade</span><span class=\"token operator\">:</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>... a expressão <em>const { nome, idade } = props</em> atribui os valores 'Arto Hellas' para <em>nome</em> e 35 para <em>idade</em>.</p>\n<p>Podemos levar a desestruturação um passo adiante:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> nome<span class=\"token punctuation\">,</span> idade <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">anoDeNascimento</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> idade\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n        Olá <span class=\"token punctuation\">{</span>nome<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> você tem <span class=\"token punctuation\">{</span>idade<span class=\"token punctuation\">}</span> anos<span class=\"token punctuation\">.</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Então<span class=\"token punctuation\">,</span> você provavelmente nasceu em <span class=\"token punctuation\">{</span><span class=\"token function\">anoDeNascimento</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As props que são passadas para o componente agora são diretamente desestruturadas nas variáveis <em>nome</em> e <em>idade</em>.</p>\n<p>Isso significa que, em vez de atribuir o objeto props inteiro a uma variável chamada <i>props</i> e, em seguida, atribuir suas propriedades às variáveis <em>nome</em> e <em>idade</em>...</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> nome<span class=\"token punctuation\">,</span> idade <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props</code></pre></div>\n<p>... nós atribuímos os valores das propriedades diretamente para variáveis ​​por meio da desestruturação do objeto props que é passado como parâmetro à função do componente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> nome<span class=\"token punctuation\">,</span> idade <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></code></pre></div>\n<h3>Re-renderização da página</h3>\n<p>Até agora, todas as nossas aplicações foram escritas de tal forma que sua aparência permanece a mesma após a renderização inicial. E se quiséssemos criar um contador onde o valor aumentasse em função do tempo ou com um clique em um botão?</p>\n<p>Vamos começar com o seguinte. O arquivo <i>App.js</i> fica assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>contador<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>contador<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>E o arquivo <i>index.js</i> fica desta forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span>\n\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n\n<span class=\"token keyword\">let</span> contador <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>App contador<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>contador<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>É dado ao componente \"App\" o valor do contador via a prop <em>contador</em>. Este componente renderiza o valor na tela. O que acontece quando o valor de <em>contador</em> muda? Mesmo se adicionarmos o seguinte...</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">contador <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></code></pre></div>\n<p>... o componente não será re-renderizado. Podemos fazer com que o componente seja re-renderizado chamando o método <em>render</em> uma segunda vez, por exemplo, da seguinte maneira:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> contador <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">recarregar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>App contador<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>contador<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">recarregar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncontador <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n<span class=\"token function\">recarregar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncontador <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n<span class=\"token function\">recarregar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>O comando de re-renderização foi embalado dentro da função <em>recarregar</em> para diminuir a quantidade de código copiado e colado.</p>\n<p>Agora, o componente <i>renderiza três vezes</i>: primeiro com o valor 1; depois 2 e finalmente 3. Porém, os valores 1 e 2 são exibidos na tela por um período tão curto de tempo que não podem nem ser notados.</p>\n<p>Podemos implementar uma funcionalidade um pouco mais interessante re-renderizando e incrementando o contador a cada segundo usando <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval\">setInterval</a> (\"definir intervalo\"):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">recarregar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  contador <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Fazer repetidas chamadas ao método <em>render</em> não é a forma recomendada de re-renderização de componentes. A seguir, apresentaremos uma forma melhor para fazer essa re-renderização.</p>\n<h3>Componente \"Stateful\" (ou Componente com Estado)</h3>\n<p>Todos os nossos componentes até agora foram simples no sentido de que não continham nenhum estado que pudesse mudar durante o ciclo de vida do componente.</p>\n<p>Então, vamos adicionar um \"estado\" ao componente <i>App</i> com a ajuda do <a href=\"https://reactjs.org/docs/hooks-state.html\">state hook</a> (Grosso modo, \"gancho de estado\", isto é, são funções que permitem a você “ligar-se” aos recursos de estado (state) e ciclo de vida do React a partir de componentes funcionais) do React.</p>\n<p>A aplicação será alterada da seguinte forma. O código de <i>index.js</i> retorna para:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span>\n\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>E o código de <i>App.js</i> muda para o seguinte:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> contador<span class=\"token punctuation\">,</span> setContador <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setContador</span><span class=\"token punctuation\">(</span>contador <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token number\">1000</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>contador<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>Na primeira linha, o arquivo importa a função <em>useState:</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></code></pre></div>\n<p>O corpo da função que define o componente começa com a chamada da função:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> contador<span class=\"token punctuation\">,</span> setContador <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>A chamada da função adiciona <i>estado</i> (state) ao componente e o renderiza inicializado com o valor 0 (zero). A função retorna um array que contém dois itens. Atribuímos os itens às variáveis <em>contador</em> e <em>setContador</em> usando a sintaxe de atribuição via desestruturação mostrada anteriormente.</p>\n<p>A variável <em>contador</em> é atribuída ao valor inicial de <i>estado</i>, que é zero. A variável <em>setContador</em> é atribuída a uma função que será usada para <i>modificar o estado</i>.</p>\n<p>A aplicação chama a função <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\">setTimeout</a> (\"definir intervalo\") e passa dois parâmetros: uma função para incrementar o estado do contador e um tempo de espera de 1000 milissegundos, que é o mesmo que 1 segundo:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setContador</span><span class=\"token punctuation\">(</span>contador <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1000</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>A função passada como primeiro parâmetro na função <em>setTimeout</em> é executada 1 segundo depois de ser executada a função <em>setContador</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setContador</span><span class=\"token punctuation\">(</span>contador <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Quando a função de modificação de estado <em>setContador</em> é chamada, <i>o React re-renderiza o componente</i>, o que significa que o corpo da função do componente é reexecutado:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> contador<span class=\"token punctuation\">,</span> setContador <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setContador</span><span class=\"token punctuation\">(</span>contador <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1000</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>contador<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A segunda vez que a função do componente é executada, ela chama a função <em>useState</em> e retorna o novo valor do estado: 1. Executar o corpo da função novamente também faz uma nova chamada de função para <em>setTimeout</em>, que executa o tempo de espera de um segundo e incrementa novamente o estado do <em>contador</em>. Por conta do valor da variável <em>contador</em> ser 1, incrementar o valor em 1 é essencialmente a mesma coisa de uma expressão que define o valor de <em>contador</em> para 2.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setContador</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Enquanto isso, o antigo valor de <em>contador</em> — \"1\" — é renderizado na tela.</p>\n<p>Toda vez que o <em>setContador</em> modifica o estado, ele faz com que o componente seja renderizado novamente. O valor do estado será incrementado novamente após um segundo, e esse evento continuará a se repetir enquanto a aplicação estiver em execução.</p>\n<p>Se o componente não for renderizado quando você acha que deveria, ou se for renderizado no \"momento errado\", é possível depurar a aplicação registrando os valores das variáveis do componente no console. Se fizermos as seguintes adições ao nosso código:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> contador<span class=\"token punctuation\">,</span> setContador <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setContador</span><span class=\"token punctuation\">(</span>contador <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1000</span>\n  <span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'renderizando...'</span><span class=\"token punctuation\">,</span> contador<span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>contador<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>É fácil seguir e acompanhar as chamadas feitas à função de renderização do componente <i>App</i>:</p>\n<picture><img src=\"/static/eb93a613b875efbcb9e28207f96593f5/5a190/4e.png\" alt=\"captura de tela da função de renderização nas Ferramentas de Desenvolvimento\" srcset=\"/static/eb93a613b875efbcb9e28207f96593f5/772e8/4e.png 200w,\n/static/eb93a613b875efbcb9e28207f96593f5/e17e5/4e.png 400w,\n/static/eb93a613b875efbcb9e28207f96593f5/5a190/4e.png 800w,\n/static/eb93a613b875efbcb9e28207f96593f5/c1b63/4e.png 1200w,\n/static/eb93a613b875efbcb9e28207f96593f5/c655d/4e.png 1586w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>O console do seu navegador estava aberto? Se não estava, prometa que essa foi a última vez que precisou ser lembrado disso.</p>\n<h3>Gerenciamento de eventos (Event handling)</h3>\n<p>Na <a href=\"/ptbr/part0\">Parte 0</a>, falamos rapidamente sobre os <i>gerenciadores de eventos</i>, que são registrados para serem chamados quando eventos específicos ocorrem várias vezes. A interação de um usuário com os diferentes elementos de uma página web pode causar uma coleção de vários tipos de eventos a serem acionados.</p>\n<p>Vamos mudar a aplicação para que o aumento do contador aconteça quando um usuário clicar em um botão, que é implementado com o elemento <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button\">button</a> (botão).</p>\n<p>Os elementos de botão suportam os chamados <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\">mouse events</a> (Eventos de Mouse), dos quais <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/click\">click</a> é o evento mais comum. O evento click em um botão também pode ser acionado com o teclado ou com uma tela touch screen, apesar de serem \"<i>evento de mouse</i>\".</p>\n<p>Em React, registra-se uma <a href=\"https://reactjs.org/docs/handling-events.html\">event handler function</a> (função gerenciadora de eventos) para o evento <i>click</i> desta forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> contador<span class=\"token punctuation\">,</span> setContador <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  \n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClique</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clicado'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>contador<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClique<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        mais<span class=\"token operator\">+</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Definimos o valor do atributo <i>onClick</i> do botão como uma referência à função <em>handleClique</em> definida no código. </p>\n<p>A cada clique no botão <i>mais+</i>, a função <em>handleClique</em> é chamada, o que significa que a cada evento de clique uma mensagem <i>clicado</i> será registrada no console do navegador.</p>\n<p>A função gerenciadora de eventos também pode ser definida diretamente na atribuição de valor do atributo \"onClick\":</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> contador<span class=\"token punctuation\">,</span> setContador <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>contador<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clicado'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span>        mais<span class=\"token operator\">+</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ao mudar a função gerenciadora de eventos para a seguinte forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setContador</span><span class=\"token punctuation\">(</span>contador <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  mais<span class=\"token operator\">+</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>atingimos o comportamento desejado, ou seja, o valor de <em>contador</em> é incrementado em 1 <i>e</i> o componente é re-renderizado.</p>\n<p>Vamos também adicionar um botão para redefinir o contador:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> contador<span class=\"token punctuation\">,</span> setContador <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>contador<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setContador</span><span class=\"token punctuation\">(</span>contador <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        mais<span class=\"token operator\">+</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setContador</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span> </span><span class=\"gatsby-highlight-code-line\">        zerar</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nossa aplicação está pronta!</p>\n<h3>Um gerenciador de evento é uma função</h3>\n<p>Definimos os gerenciadores de eventos para os nossos botões, onde declaramos seus atributos <i>onClick</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setContador</span><span class=\"token punctuation\">(</span>contador <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span> \n  mais<span class=\"token operator\">+</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>E se tentássemos definir os gerenciadores de eventos de uma forma mais simples? O que aconteceria?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">setContador</span><span class=\"token punctuation\">(</span>contador <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span> \n  mais<span class=\"token operator\">+</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>Quebraria completamente nossa aplicação:</p>\n<picture><img src=\"/static/f594ec2c3a6f97ebe8333b18704119ad/5a190/5c.png\" alt=\"captura de tela de erro de re-renderizadores\" srcset=\"/static/f594ec2c3a6f97ebe8333b18704119ad/772e8/5c.png 200w,\n/static/f594ec2c3a6f97ebe8333b18704119ad/e17e5/5c.png 400w,\n/static/f594ec2c3a6f97ebe8333b18704119ad/5a190/5c.png 800w,\n/static/f594ec2c3a6f97ebe8333b18704119ad/c1b63/5c.png 1200w,\n/static/f594ec2c3a6f97ebe8333b18704119ad/c4451/5c.png 1450w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>O que está acontecendo? Um gerenciador de evento deve ser uma <i>função</i> ou uma <i>referência de função</i>. Quando escrevemos:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">setContador</span><span class=\"token punctuation\">(</span>contador <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span></code></pre></div>\n<p>O gerenciador de evento é, neste caso, uma <i>chamada de função</i> (<em>function call</em>). Em muitos casos isso pode até estar ok, mas não nesta situação específica. No começo, o valor da variável <i>contador</i> é 0. Quando React renderiza o componente pela primeira vez, ele executa a chamada de função <em>setContador(0+1)</em>, e muda o valor do estado do componente para 1.\nIsso fará com que o componente seja re-renderizado, React executará a chamada da função setContador novamente e o estado mudará levando a outra re-renderização...</p>\n<p>Vamos definir os gerenciadores de eventos como fizemos antes:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setContador</span><span class=\"token punctuation\">(</span>contador <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span> \n  mais<span class=\"token operator\">+</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>Agora, o atributo do botão que define o que acontece quando o botão é clicado — <i>onClick</i> — tem o valor <em>() => setContador(contador + 1)</em>.\nA função setContador é chamada somente quando um usuário clica no botão. </p>\n<p>Em geral, definir gerenciadores de eventos dentro de templates JSX não é uma boa ideia.\nAqui está ok, porque nossos gerenciadores de eventos são bem simples. </p>\n<p>De qualquer jeito, vamos colocar os gerenciadores de eventos em funções separadas: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> contador<span class=\"token punctuation\">,</span> setContador <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">aumentarEmUm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setContador</span><span class=\"token punctuation\">(</span>contador <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  </span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">zerarContador</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setContador</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>contador<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>aumentarEmUm<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span>        mais<span class=\"token operator\">+</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>zerarContador<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span>        zerar\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Aqui, os gerenciadores de eventos foram definidos corretamente. O valor do atributo <i>onClick</i> é uma variável que contém referência a uma função:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>aumentarEmUm<span class=\"token punctuation\">}</span><span class=\"token operator\">></span> \n  mais<span class=\"token operator\">+</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<h3>Passagem de Estado para Componentes-filho</h3>\n<p>Recomenda-se escrever componentes React pequenos e reutilizáveis ​​em toda a aplicação, e até mesmo em projetos. Vamos refatorar nossa aplicação para que seja composta por três componentes menores: um componente para exibir o contador e dois componentes para os botões.</p>\n<p>Vamos implementar primeiro um componente <i>Exibir</i>, que é responsável pela exibição do valor do contador.</p>\n<p>Uma boa prática em React é <a href=\"https://reactjs.org/docs/lifting-state-up.html\">elevar o estado</a> (<em>lift the state up</em>) na hierarquia de componentes. A documentação diz:</p>\n<blockquote>\n<p><i>Com frequência, a modificação de um dado tem que ser refletida em vários componentes. Recomendamos elevar o estado compartilhado ao elemento pai comum mais próximo.</i></p>\n</blockquote>\n<p>Vamos colocar o estado da aplicação no componente <i>App</i> e passá-lo para o componente <i>Exibir</i> através de <i>props</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Exibir</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>contador<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O uso do componente é direto, objetivo, já que precisamos apenas passar o estado do <em>contador</em> para ele:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> contador<span class=\"token punctuation\">,</span> setContador <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">aumentarEmUm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setContador</span><span class=\"token punctuation\">(</span>contador <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">zerarContador</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setContador</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Exibir contador<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>contador<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></span>      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>aumentarEmUm<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        mais<span class=\"token operator\">+</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>zerarContador<span class=\"token punctuation\">}</span><span class=\"token operator\">></span> \n        zerar\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tudo ainda está funcionando. Quando os botões são clicados e o <i>App</i> é re-renderizado, todos os seus filhos, incluindo o componente <i>Exibir</i>, também são re-renderizados.</p>\n<p>Agora, vamos criar um componente <i>Botao</i> para os botões da nossa aplicação. Temos que passar o gerenciador de evento, bem como o título do botão, através das props do componente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Botao</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>texto<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O nosso componente <i>App</i> fica assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> contador<span class=\"token punctuation\">,</span> setContador <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">aumentarEmUm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setContador</span><span class=\"token punctuation\">(</span>contador <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">diminuirEmUm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setContador</span><span class=\"token punctuation\">(</span>contador <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> </span>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">zerarContador</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setContador</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Exibir contador<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>contador<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Botao</span><span class=\"gatsby-highlight-code-line\">        onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>aumentarEmUm<span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">        texto<span class=\"token operator\">=</span><span class=\"token string\">'mais+'</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Botao</span><span class=\"gatsby-highlight-code-line\">        onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>zerarContador<span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">        texto<span class=\"token operator\">=</span><span class=\"token string\">'zerar'</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">/</span><span class=\"token operator\">></span>     </span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Botao</span><span class=\"gatsby-highlight-code-line\">        onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>diminuirEmUm<span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">        texto<span class=\"token operator\">=</span><span class=\"token string\">'menos-'</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Por conta de agora termos disponível um componente <i>Botao</i> facilmente reutilizável, também implementamos uma nova funcionalidade em nossa aplicação, adicionando um botão que pode ser usado para decrementar o contador.</p>\n<p>O gerenciador de evento é passado para o componente <i>Botao</i> através da prop <em>onClick</em>. O nome da prop em si não é algo tão significativo, mas a escolha do nome que colocamos não foi de todo aleatória. O próprio <a href=\"https://reactjs.org/tutorial/tutorial.html\">tutorial oficial do React</a> sugere essa convenção.</p>\n<h3>Alterações no estado causam re-renderização</h3>\n<p>Vamos revisar, mais uma vez, os princípios mais importantes de como uma aplicação funciona.</p>\n<p>Quando a aplicação inicia, o código em <em>App</em> é executado. Este código usa um hook <a href=\"https://reactjs.org/docs/hooks-reference.html#usestate\">useState</a> para criar o estado da aplicação, definindo um valor inicial da variável <em>contador</em>.\nEste componente contém o componente <em>Exibir</em> — que exibe o valor do contador, 0 — e três componentes <em>Botao</em>. Os botões possuem gerenciadores de eventos, que são usados para mudar o estado do contador.</p>\n<p>Quando um dos botões é clicado, o gerenciador de evento é executado. O gerenciador de evento muda o estado do componente <em>App</em> com a função <em>setContador</em>.\n<strong>Chamar uma função que muda o estado faz com que o componente seja re-renderizado.</strong></p>\n<p>Então, se um usuário clicar no botão <i>mais+</i>, o gerenciador de evento do botão muda o valor de <em>contador</em> para 1, e o componente <em>App</em> é re-renderizado.\nIsso faz com que seus subcomponentes <em>Exibir</em> e <em>Botao</em> também sejam re-renderizados.\n<em>Exibir</em> recebe o novo valor do contador, 1, como props. Os componentes <em>Botao</em> recebem gerenciadores de eventos que podem ser usados para mudar o estado do contador.</p>\n<p>Para ter certeza de que você entendeu como o programa funciona, vamos adicionar algumas declarações <em>console.log</em> a ele:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> contador<span class=\"token punctuation\">,</span> setContador <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'renderizando com o valor do contador em'</span><span class=\"token punctuation\">,</span> contador<span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">aumentarEmUm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aumentando, valor anterior'</span><span class=\"token punctuation\">,</span> contador<span class=\"token punctuation\">)</span></span>    <span class=\"token function\">setContador</span><span class=\"token punctuation\">(</span>contador <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">diminuirEmUm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'diminuindo, valor anterior'</span><span class=\"token punctuation\">,</span> contador<span class=\"token punctuation\">)</span></span>    <span class=\"token function\">setContador</span><span class=\"token punctuation\">(</span>contador <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">zerarContador</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zerando, valor anterior'</span><span class=\"token punctuation\">,</span> contador<span class=\"token punctuation\">)</span></span>    <span class=\"token function\">setContador</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Exibir contador<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>contador<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Botao handleClique<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>aumentarEmUm<span class=\"token punctuation\">}</span> texto<span class=\"token operator\">=</span><span class=\"token string\">\"mais+\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Botao handleClique<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>zerarContador<span class=\"token punctuation\">}</span> texto<span class=\"token operator\">=</span><span class=\"token string\">\"zerar\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Botao handleClique<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>diminuirEmUm<span class=\"token punctuation\">}</span> texto<span class=\"token operator\">=</span><span class=\"token string\">\"menos-\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n<p>Vejamos agora o que é renderizado no console quando os botões \"mais+\", \"zerar\" e \"menos-\" são clicados:</p>\n<picture><img src=\"/static/35d71af37aa6a0940a684a368b0f9eb8/5a190/31.png\" alt=\"navegador mostrando o console com a renderização de valores em destaque\" srcset=\"/static/35d71af37aa6a0940a684a368b0f9eb8/772e8/31.png 200w,\n/static/35d71af37aa6a0940a684a368b0f9eb8/e17e5/31.png 400w,\n/static/35d71af37aa6a0940a684a368b0f9eb8/5a190/31.png 800w,\n/static/35d71af37aa6a0940a684a368b0f9eb8/c1b63/31.png 1200w,\n/static/35d71af37aa6a0940a684a368b0f9eb8/29007/31.png 1600w,\n/static/35d71af37aa6a0940a684a368b0f9eb8/cea38/31.png 1644w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Nunca tente adivinhar o que o seu código faz. É melhor usar <em>console.log</em> e <i>ver com seus próprios olhos</i> o que ele faz.</p>\n<h3>Refatorando os Componentes</h3>\n<p>O componente que exibe o valor do contador é o seguinte:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Exibir</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>contador<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O componente só usa o campo <em>contador</em> de suas <i>props</i>.\nIsso significa que podemos simplificar o componente usando <a href=\"/ptbr/part1/estado_do_componente_gerenciadores_de_eventos#desestruturacao-destructuring\">desestruturação</a>, desta forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Exibir</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> contador <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>contador<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A função que define o componente contém apenas a instrução de retorno, então\npodemos definir a função usando a forma mais compacta das <em>arrow functions</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Exibir</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> contador <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>contador<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p>Também podemos simplificar o componente <i>Botao</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Botao</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>texto<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Podemos usar a desestruturação para obter apenas os campos necessários de <i>props</i> e usar a forma mais compacta de arrow functions:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Botao</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> texto <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>texto<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Podemos simplificar ainda mais o componente Botao, fazendo com que a declaração de retorno caiba em apenas uma linha:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Botao</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> texto <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>texto<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>Porém, tenha cuidado para não simplificar demais seus componentes, porque pode ficar mais difícil lidar com a complexidade do código à medida em que ele for crescendo em tamanho.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/83f1c8a7795e9e8eaffaec29b1ee79b1/part-1.svg"},"part":1,"letter":"c","lang":"ptbr"}}},"pageContext":{"part":1,"letter":"c","lang":"ptbr"}},"staticQueryHashes":["3128451518"]}
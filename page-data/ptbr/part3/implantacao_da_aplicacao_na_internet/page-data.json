{"componentChunkName":"component---src-templates-content-template-js","path":"/ptbr/part3/implantacao_da_aplicacao_na_internet","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Em seguida, vamos conectar o front-end que fizemos na <a href=\"/ptbr/part2\">Parte 2</a> ao nosso próprio back-end.</p>\n<p>Na parte anterior, o front-end permitia requisições da lista de notas do json-server que tínhamos como back-end, a partir do endereço <a href=\"http://localhost:3001/notes\">http://localhost:3001/notes</a>.\nA estrutura de URL do nosso back-end agora é um pouco diferente, pois as notas podem ser encontradas em <a href=\"http://localhost:3001/api/notes\">http://localhost:3001/api/notes</a>. Vamos alterar o atributo <strong>baseUrl</strong> no <i>src/services/notes.js</i> assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> baseUrl <span class=\"token operator\">=</span> <span class=\"token string\">'http://localhost:3001/api/notes'</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span> getAll<span class=\"token punctuation\">,</span> create<span class=\"token punctuation\">,</span> update <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Porém, agora a requisição GET do front-end para <a href=\"http://localhost:3001/api/notes\">http://localhost:3001/api/notes</a> não funciona por algum motivo:</p>\n<picture><img src=\"/static/da88e17cb078c89a6e7ba30d61fab0e6/5a190/3ae.png\" alt=\"requisição GET mostrando erro nas ferramentas do desenvolvedor\" srcset=\"/static/da88e17cb078c89a6e7ba30d61fab0e6/772e8/3ae.png 200w,\n/static/da88e17cb078c89a6e7ba30d61fab0e6/e17e5/3ae.png 400w,\n/static/da88e17cb078c89a6e7ba30d61fab0e6/5a190/3ae.png 800w,\n/static/da88e17cb078c89a6e7ba30d61fab0e6/c1b63/3ae.png 1200w,\n/static/da88e17cb078c89a6e7ba30d61fab0e6/29007/3ae.png 1600w,\n/static/da88e17cb078c89a6e7ba30d61fab0e6/6e29b/3ae.png 1610w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>O que está acontecendo aqui? Podemos acessar o back-end através do navegador e do postman sem problemas.</p>\n<h3>Política de Mesma Origem e CORS</h3>\n<p>O problema é uma coisa chamada <code class=\"language-text\">Política de Mesma Origem</code>. A origem de uma URL é definida pela combinação do protocolo (<i>protocol</i>, também conhecido como esquema (<i>scheme</i>)), do nome do host e da porta (<i>port</i>).</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">http://example.com:80/index.html\n  \nprotocol: http\nhost: example.com\nport: 80</code></pre></div>\n<p>Quando você visita um site (ou seja, <a href=\"http://catwebsites.com\">http://catwebsites.com</a>), o navegador emite uma requisição para o servidor em que o site (catwebsites.com) está hospedado. A resposta enviada pelo servidor é um arquivo HTML que pode conter uma ou mais referências a recursos/ativos externos hospedados no mesmo servidor que <i>catwebsites.com</i> está hospedado ou em um site diferente. Quando o navegador vê referência(s) a uma URL no HTML de origem, ele emite uma requisição. Se a requisição for feita usando a URL na qual o HTML de origem foi obtido, o navegador processa a resposta sem problemas. No entanto, se o recurso for obtido usando uma URL que não compartilha a mesma origem (esquema, host, porta) que o HTML de origem, o navegador deverá verificar o cabeçalho de resposta <em>Access-Control-Allow-origin</em> (CORS). Se ele contiver <em>*</em> ou a URL do HTML de origem, o navegador processará a resposta, caso contrário, o navegador se recusará a processá-la e lançará um erro.</p>\n<p>A <strong>Política de Mesma Origem</strong> é um mecanismo de segurança implementado pelos navegadores para impedir sequestro de sessão (session hijacking), entre outras vulnerabilidades de segurança.</p>\n<p>Para permitir requisições legítimas de várias origens (requisições a URLs que não compartilham a mesma origem), a W3C criou um mecanismo chamado <strong>CORS</strong> (Cross-Origin Resource Sharing [Compartilhamento de Recursos de Origem Cruzada]). De acordo com a <a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\">Wikipedia</a>:</p>\n<blockquote>\n<p><i>Cross-Origin Resource Sharing ou CORS é um mecanismo que permite que recursos restritos em uma página web sejam recuperados por outro domínio fora do domínio ao qual pertence o recurso que será recuperado. Uma página web pode integrar livremente recursos de diferentes origens, como imagens, folhas de estilo, scripts, iframes e vídeos. Certas \"requisições de domínio cruzado\", em particular as requisições Ajax, são proibidas por padrão pela política de segurança de mesma origem.</i></p>\n</blockquote>\n<p>O problema é que, por padrão, o código JavaScript de uma aplicação que é executada em um navegador só pode se comunicar com um servidor na mesma <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">origem</a> (origin).\nComo nosso servidor está em <em>localhost, porta 3001</em>, enquanto nosso front-end está em <em>localhost, porta 3000</em>, eles não possuem a mesma origem.</p>\n<p>Lembre-se de que a <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">Política de Mesma Origem</a> (same-origin policy) e CORS não são específicos de React ou Node. São princípios universais referentes à operação segura de aplicações web.</p>\n<p>Podemos permitir requisições de outras <i>origens</i> usando o <i>middleware</i> <a href=\"https://github.com/expressjs/cors\">cors</a> do Node.</p>\n<p>No repositório do seu back-end, instale o <i>cors</i> com o comando...</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> cors</code></pre></div>\n<p>... use o <i>middleware</i> e permita requisições de todas as origens:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> cors <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cors'</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>E o front-end funciona! No entanto, a funcionalidade para alternar a importância das notas ainda não foi implementada no back-end.</p>\n<p>Você pode ler mais sobre o CORS na página da <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">Mozilla</a>.</p>\n<p>A configuração de nosso aplicação agora é a seguinte:</p>\n<picture><img src=\"/static/2aa09f5e7969cf4ec229aceb70abfa26/664c8/100.png\" alt=\"diagrama da aplicação React e do navegador\" srcset=\"/static/2aa09f5e7969cf4ec229aceb70abfa26/772e8/100.png 200w,\n/static/2aa09f5e7969cf4ec229aceb70abfa26/e17e5/100.png 400w,\n/static/2aa09f5e7969cf4ec229aceb70abfa26/664c8/100.png 524w\" sizes=\"(max-width: 524px) 100vw, 524px\"></picture>\n<p>A aplicação React sendo executada no navegador agora obtém os dados do servidor node/express que é executado em <em>localhost:3001</em>.</p>\n<h3>A Aplicação na Internet</h3>\n<p>Agora que toda <i>stack</i> está pronta, vamos mover nossa aplicação para a internet.</p>\n<p>Há um número cada vez maior de serviços que podem ser usados para hospedar uma aplicação na internet. Serviços voltados a desenvolvedores (developer-friendly services), como o PaaS (Platform as a Service [Plataforma como Serviço]), cuidam da instalação do ambiente de execução (Node.js, por exemplo) e também podem fornecer vários serviços, como bancos de dados.</p>\n<p>Durante uma década, <a href=\"http://heroku.com\">Heroku</a> dominou a cena PaaS. Infelizmente, o plano gratuito do Heroku acabou em 27 de novembro de 2022. Muitos desenvolvedores ficaram tristes com isso, especialmente estudantes. O Heroku ainda é uma opção viável se você estiver disposto a gastar algum dinheiro. Eles também têm <a href=\"https://www.heroku.com/students\">um programa para estudantes</a> que fornece alguns créditos gratuitos.</p>\n<p>Agora estamos apresentando dois serviços: <a href=\"https://fly.io/\">Fly.io</a> e <a href=\"https://render.com/\">Render</a>, ambos possuem um plano gratuito (limitado). O Fly.io é nosso serviço de hospedagem \"oficial\", pois pode ser usado com certeza também nas Partes 11 e 13 do curso. O Render será bom pelo menos para as outras partes deste curso.</p>\n<p>Observe que, apesar de usar apenas o plano gratuito, o Fly.io <i>pode</i> exigir que você insira suas informações de cartão de crédito. No momento, o Render pode ser usado sem um cartão de crédito.</p>\n<p>O Render pode ser um pouco mais fácil de usar, pois não requer a instalação de nenhum software em sua máquina.</p>\n<p>Também existem outras opções gratuitas de hospedagem que funcionam bem para este curso, para todas as partes exceto a Parte 11 (CI/CD), que tem um exercício complicado de se fazer em outras plataformas.</p>\n<p>Alguns participantes do curso também usaram estes serviços:</p>\n<ul>\n<li><a href=\"https://railway.app/\">Railway</a></li>\n<li><a href=\"https://www.cyclic.sh/\">Cyclic</a></li>\n<li><a href=\"https://replit.com\">Replit</a></li>\n<li><a href=\"https://codesandbox.io\">CodeSandBox</a></li>\n</ul>\n<p>Se você conhece outros serviços bons e fáceis de usar para hospedar NodeJS, por favor, nos avise!</p>\n<p>Tanto para o Fly.io quanto para o Render, precisamos mudar, no final do arquivo <i>index.js</i>, a definição da porta que nossa aplicação usa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3001</span></span>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Agora estamos usando a porta definida na <a href=\"https://en.wikipedia.org/wiki/Environment_variable\">variável de ambiente</a> <em>PORT</em> ou a porta 3001 se a variável de ambiente <em>PORT</em> estiver indefinida. O Fly.io e o Render configuram a porta da aplicação com base nessa variável de ambiente.</p>\n<h4>Fly.io</h4>\n<p><i>Note que pode ser preciso fornecer seu número de cartão de crédito para o Fly.io, mesmo se estiver usando apenas o plano gratuito!</i> Na verdade, houve relatos conflitantes sobre isso. Fato é que alguns alunos deste curso estão usando o Fly.io sem informar as informações do cartão de crédito. No momento, <a href=\"https://render.com/\">Render</a> pode ser usado sem um cartão de crédito.</p>\n<p>Por padrão, todos recebem duas máquinas virtuais gratuitas que podem ser usadas para executar duas aplicações ao mesmo tempo.</p>\n<p>Se você decidir usar o <a href=\"https://fly.io/\">Fly.io</a>, comece instalando seu executável <em>flyctl</em> seguindo <a href=\"https://fly.io/docs/hands-on/install-flyctl/\">este guia</a>. Após isso, você deve <a href=\"https://fly.io/docs/hands-on/sign-up/\">criar uma conta Fly.io</a>.</p>\n<p>Comece por <a href=\"https://fly.io/docs/hands-on/sign-in/\">autenticar-se</a> via linha de comando com o comando:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">fly auth login</code></pre></div>\n<p><em>Observação:</em> se o comando <em>fly</em> não funcionar em sua máquina, você pode tentar a versão mais longa <em>flyctl</em>. Por exemplo, ambas as formas do comando funcionam no MacOS.</p>\n<p><i>Se você não conseguir fazer o <em>flyctl</em> funcionar em sua máquina, é possível experimentar o Render (veja a próxima seção), que não requer nada a ser instalado em sua máquina.</i></p>\n<p>Inicializa-se uma aplicação executando o seguinte comando no diretório raiz do aplicação:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">fly launch</code></pre></div>\n<p>Dê um nome à aplicação ou deixe que o Fly.io gere um automaticamente. Escolha uma região onde a aplicação será executada. Não crie um banco de dados Postgres e não crie um banco de dados Upstash Redis, pois eles não são necessários.</p>\n<p>A última pergunta é \"Você gostaria de implantar agora? (Would you like to deploy now?)\". Devemos responder \"não\" porque ainda não estamos prontos.</p>\n<p>Fly.io cria um arquivo <i>fly.toml</i> na raiz da sua aplicação onde a mesma é configurada. Para colocar a aplicação em funcionamento, <i>talvez</i> precisemos fazer uma pequena adição na parte [env] da configuração:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>env<span class=\"token punctuation\">]</span>\n  PORT <span class=\"token operator\">=</span> <span class=\"token string\">\"8080\"</span> <span class=\"token comment\"># adicione isto</span>\n\n<span class=\"token punctuation\">[</span>experimental<span class=\"token punctuation\">]</span>\n  auto_rollback <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>services<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n  http_checks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  internal_port <span class=\"token operator\">=</span> <span class=\"token number\">8080</span> \n  processes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"app\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Agora definimos na parte [env] que a variável de ambiente <em>PORT</em> obterá a porta correta (definida na parte [services]) onde a aplicação deve criar o servidor. Observe que a definição pode já estar lá, mas às vezes ela falta.</p>\n<p>Agora estamos prontos para implantar (deploy) a aplicação nos servidores Fly.io. Isso é feito com o seguinte comando:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">fly deploy</code></pre></div>\n<p>Se tudo correr bem, a aplicação deverá estar em funcionamento. Você pode abri-la no navegador com o comando</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">fly apps <span class=\"token function\">open</span></code></pre></div>\n<p>Depois da configuração inicial, quando o código da aplicação for atualizado, poderá ser implantada na produção com o comando:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">fly deploy</code></pre></div>\n<p>Um comando particularmente importante é <em>fly logs</em>. Este comando pode ser usado para visualizar os logs do servidor. É melhor manter os logs sempre visíveis!</p>\n<p><strong>Atenção:</strong> Em alguns casos (a causa é até agora desconhecida) executar comandos Fly.io, especialmente no Windows WSL, causou problemas. Se o seguinte comando simplesmente travar:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">flyctl <span class=\"token function\">ping</span> <span class=\"token parameter variable\">-o</span> personal</code></pre></div>\n<p>seu computador não consegue, por algum motivo, se conectar ao Fly.io. Se isso acontecer com você, <a href=\"https://github.com/fullstack-hy2020/misc/blob/master/fly_io_problem.md\">aqui</a> encontra-se uma possível maneira de resolver o problema.</p>\n<p>Se a saída do comando abaixo se parecer com isto:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ flyctl <span class=\"token function\">ping</span> <span class=\"token parameter variable\">-o</span> personal\n<span class=\"token number\">35</span> bytes from fdaa:0:8a3d::3 <span class=\"token punctuation\">(</span>gateway<span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">seq</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">65</span>.1ms\n<span class=\"token number\">35</span> bytes from fdaa:0:8a3d::3 <span class=\"token punctuation\">(</span>gateway<span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">seq</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">28</span>.5ms\n<span class=\"token number\">35</span> bytes from fdaa:0:8a3d::3 <span class=\"token punctuation\">(</span>gateway<span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">seq</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">29</span>.3ms\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>então não há problemas de conexão!</p>\n<h4>Render</h4>\n<p>Este serviço pressupõe que o <a href=\"https://dashboard.render.com/\">login</a> tenha sido feito com uma conta do GitHub.</p>\n<p>Depois de fazer login, vamos criar um novo \"Web Service\":</p>\n<picture><img src=\"/static/918351e5ad479c327ac578c0743a0811/5a190/r1.png\" alt=\"imagem mostrando a opção para criar um novo Web Service\" srcset=\"/static/918351e5ad479c327ac578c0743a0811/772e8/r1.png 200w,\n/static/918351e5ad479c327ac578c0743a0811/e17e5/r1.png 400w,\n/static/918351e5ad479c327ac578c0743a0811/5a190/r1.png 800w,\n/static/918351e5ad479c327ac578c0743a0811/c1b63/r1.png 1200w,\n/static/918351e5ad479c327ac578c0743a0811/29007/r1.png 1600w,\n/static/918351e5ad479c327ac578c0743a0811/5ab15/r1.png 2446w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>O repositório da aplicação é então conectado ao Render:</p>\n<picture><img src=\"/static/75040aae9bcb08b7aa53fd201ed900a9/5a190/r2.png\" alt=\"imagem mostrando o repositório da aplicação no Render\" srcset=\"/static/75040aae9bcb08b7aa53fd201ed900a9/772e8/r2.png 200w,\n/static/75040aae9bcb08b7aa53fd201ed900a9/e17e5/r2.png 400w,\n/static/75040aae9bcb08b7aa53fd201ed900a9/5a190/r2.png 800w,\n/static/75040aae9bcb08b7aa53fd201ed900a9/c1b63/r2.png 1200w,\n/static/75040aae9bcb08b7aa53fd201ed900a9/29007/r2.png 1600w,\n/static/75040aae9bcb08b7aa53fd201ed900a9/966c1/r2.png 1694w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>A conexão parece exigir que o repositório da aplicação seja público.</p>\n<p>A seguir, definiremos as configurações básicas. Se a aplicação <i>não</i> estiver na raiz do repositório, o <i>diretório raiz</i> precisa receber um valor apropriado:</p>\n<picture><img src=\"/static/8411e07f2b7ee2665f61341b7253e49f/5a190/r3.png\" alt=\"imagem mostrando o campo Root Directory como sendo opcional\" srcset=\"/static/8411e07f2b7ee2665f61341b7253e49f/772e8/r3.png 200w,\n/static/8411e07f2b7ee2665f61341b7253e49f/e17e5/r3.png 400w,\n/static/8411e07f2b7ee2665f61341b7253e49f/5a190/r3.png 800w,\n/static/8411e07f2b7ee2665f61341b7253e49f/c1b63/r3.png 1200w,\n/static/8411e07f2b7ee2665f61341b7253e49f/29007/r3.png 1600w,\n/static/8411e07f2b7ee2665f61341b7253e49f/97a96/r3.png 2400w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Depois disso, a aplicação é iniciada no Render. O painel informa o estado da aplicação e a URL onde ela está sendo executada:</p>\n<picture><img src=\"/static/4a478e6ef9229324ff606f2ada7b0b46/5a190/r4.png\" alt=\"no canto esquerdo superior da imagem é possível verificar o estado da aplicação e a sua URL\" srcset=\"/static/4a478e6ef9229324ff606f2ada7b0b46/772e8/r4.png 200w,\n/static/4a478e6ef9229324ff606f2ada7b0b46/e17e5/r4.png 400w,\n/static/4a478e6ef9229324ff606f2ada7b0b46/5a190/r4.png 800w,\n/static/4a478e6ef9229324ff606f2ada7b0b46/c1b63/r4.png 1200w,\n/static/4a478e6ef9229324ff606f2ada7b0b46/29007/r4.png 1600w,\n/static/4a478e6ef9229324ff606f2ada7b0b46/60ab9/r4.png 2450w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>De acordo com a <a href=\"https://render.com/docs/deploys\">documentação</a>, cada confirmação no GitHub deve fazer o redeploy (re-implantar) a aplicação. Por alguma razão, isso nem sempre funciona.</p>\n<p>Felizmente, também é possível fazer o redeploy da aplicação manualmente:</p>\n<picture><img src=\"/static/b87d1b6ab7339294ad1f00453155e733/5a190/r5.png\" alt=\"menu com a opção para fazer o deploy novamente em destaque\" srcset=\"/static/b87d1b6ab7339294ad1f00453155e733/772e8/r5.png 200w,\n/static/b87d1b6ab7339294ad1f00453155e733/e17e5/r5.png 400w,\n/static/b87d1b6ab7339294ad1f00453155e733/5a190/r5.png 800w,\n/static/b87d1b6ab7339294ad1f00453155e733/c1b63/r5.png 1200w,\n/static/b87d1b6ab7339294ad1f00453155e733/29007/r5.png 1600w,\n/static/b87d1b6ab7339294ad1f00453155e733/79538/r5.png 2530w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Também é possível ver os logs da aplicação no painel:</p>\n<picture><img src=\"/static/798d2488fb450327abf2b6729faaaeec/5a190/r7.png\" alt=\"Guia logs no canto esquerdo em destaque. No lado direito, os los da aplicação\" srcset=\"/static/798d2488fb450327abf2b6729faaaeec/772e8/r7.png 200w,\n/static/798d2488fb450327abf2b6729faaaeec/e17e5/r7.png 400w,\n/static/798d2488fb450327abf2b6729faaaeec/5a190/r7.png 800w,\n/static/798d2488fb450327abf2b6729faaaeec/c1b63/r7.png 1200w,\n/static/798d2488fb450327abf2b6729faaaeec/29007/r7.png 1600w,\n/static/798d2488fb450327abf2b6729faaaeec/b5c8e/r7.png 2194w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Observamos nos logs que a aplicação foi iniciada na porta 10000. O código da aplicação obtém a porta correta por meio da variável de ambiente PORT, portanto, é essencial que o arquivo <i>index.js</i> tenha sido atualizado da seguinte maneira:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3001</span></span>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Build de produção do front-end</h3>\n<p>Até agora, rodamos o código do React em <i>modo de desenvolvimento</i>. No modo de desenvolvimento, a aplicação é configurada para exibir mensagens de erro claras, renderizar imediatamente as mudanças de código para o navegador, e assim por diante.</p>\n<p>Quando a aplicação é implantada (deployed), é necessário criar um <a href=\"https://reactjs.org/docs/optimizing-performance.html#use-the-production-build\">build de produção</a>, ou seja, uma versão da aplicação otimizada para produção.</p>\n<p>Um build de produção de aplicações gerado com <i>create-react-app</i> pode ser criado com o comando <a href=\"https://github.com/facebookincubator/create-react-app#npm-run-build-or-yarn-build\">npm run build</a>.</p>\n<p>Vamos executar esse comando a partir do <i>diretório raiz do projeto front-end de notas</i> que desenvolvemos na <a href=\"/ptbr/part2\">Parte 2</a>.</p>\n<p>Isso cria um diretório chamado <i>build</i> (que contém o único arquivo HTML da nossa aplicação, <i>index.html</i>) que contém o diretório <i>static</i>. Uma versão <a href=\"https://en.wikipedia.org/wiki/Minification_(programming)\">minificada</a> do código JavaScript da nossa aplicação será gerada no diretório <i>static</i>. Embora o código da aplicação esteja em vários arquivos, todo o JavaScript será minificado em um arquivo. Todo o código de todas as dependências da aplicação também será minificado neste único arquivo.</p>\n<p>O código minificado não é muito legível. O início do código se parece com isso: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">!</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">function</span> <span class=\"token function\">r</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> n<span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">,</span>i<span class=\"token operator\">=</span>r<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>l<span class=\"token operator\">=</span>r<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">=</span>r<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>s<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>c<span class=\"token operator\">&lt;</span>i<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>f<span class=\"token operator\">=</span>i<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>o<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;&amp;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>o<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>n <span class=\"token keyword\">in</span> l<span class=\"token punctuation\">)</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>l<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">&amp;&amp;</span><span class=\"token function\">p</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">return</span> u<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>a<span class=\"token operator\">||</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token keyword\">function</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> e<span class=\"token punctuation\">,</span>r<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>r<span class=\"token operator\">&lt;</span>u<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>r<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> t<span class=\"token operator\">=</span>u<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">=</span><span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>t<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span> l<span class=\"token operator\">=</span>t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token number\">0</span><span class=\"token operator\">!==</span>o<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">=</span><span class=\"token operator\">!</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>n<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">--</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token operator\">=</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>s<span class=\"token operator\">=</span>t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token keyword\">return</span> e<span class=\"token punctuation\">}</span><span class=\"token keyword\">var</span> n<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>o<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>u<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> n<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">;</span><span class=\"token keyword\">var</span> t<span class=\"token operator\">=</span>n<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">i</span><span class=\"token operator\">:</span>r<span class=\"token punctuation\">,</span><span class=\"token literal-property property\">l</span><span class=\"token operator\">:</span><span class=\"token operator\">!</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">exports</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">return</span> e<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>l<span class=\"token operator\">=</span><span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">}</span>f<span class=\"token punctuation\">.</span>m<span class=\"token operator\">=</span>e<span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">.</span>c<span class=\"token operator\">=</span>n<span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">d</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">o</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">||</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span><span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">get</span><span class=\"token operator\">:</span>t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">r</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"undefined\"</span><span class=\"token operator\">!==</span><span class=\"token keyword\">typeof</span> Symbol<span class=\"token operator\">&amp;&amp;</span>Symbol<span class=\"token punctuation\">.</span>toStringTag<span class=\"token operator\">&amp;&amp;</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>Symbol<span class=\"token punctuation\">.</span>toStringTag<span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span><span class=\"token string\">\"Module\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Servindo arquivos estáticos a partir do back-end</h3>\n<p>Uma opção para implantar o front-end é copiar a versão de produção (o diretório <i>build</i>) para a raiz do repositório back-end e configurar o back-end para mostrar a <i>página principal</i> do front-end (o arquivo <i>build/index.html</i>) como sua página principal.</p>\n<p>Começamos copiando o build de produção do front-end para a raiz do back-end. Com um computador Mac ou Linux, a cópia pode ser feita a partir do diretório do front-end com o comando:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> <span class=\"token parameter variable\">-r</span> build <span class=\"token punctuation\">..</span>/backend</code></pre></div>\n<p>Se estiver usando um computador Windows, é possível usar o comando <a href=\"https://www.windows-commandline.com/windows-copy-command-syntax-examples/\">copy</a> ou <a href=\"https://www.windows-commandline.com/xcopy-command-syntax-examples/\">xcopy</a>. Caso contrário, basta copiar e colar.</p>\n<p>O diretório do back-end deve ficar assim agora:</p>\n<picture><img src=\"/static/601890ece56718617e3d3e7b91bf9c51/5a190/27new.png\" alt=\"captura de tela do bash mostrando o diretório build\" srcset=\"/static/601890ece56718617e3d3e7b91bf9c51/772e8/27new.png 200w,\n/static/601890ece56718617e3d3e7b91bf9c51/e17e5/27new.png 400w,\n/static/601890ece56718617e3d3e7b91bf9c51/5a190/27new.png 800w,\n/static/601890ece56718617e3d3e7b91bf9c51/11b93/27new.png 1124w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Para fazer o Express exibir <i>conteúdo estático</i> — a página <i>index.html</i> e o JavaScript, etc. — que ele busca, precisamos de um <i>middleware</i> embutido do Express chamado <a href=\"http://expressjs.com/en/starter/static-files.html\">static</a>.</p>\n<p>Quando adicionamos o seguinte código em meio às declarações dos <i>middlewares</i>...</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">'build'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>... sempre que o Express recebe uma requisição HTTP GET, ele primeiro verifica se o diretório <i>build</i> contém um arquivo correspondente ao endereço da requisição. Se um arquivo correto for encontrado, o Express o retornará.</p>\n<p>Agora, as requisições HTTP GET para o endereço <i>www.serversaddress.com/index.html</i> ou <i>www.serversaddress.com</i> mostrarão o front-end do React. As requisições GET para o endereço <i>www.serversaddress.com/api/notes</i> serão gerenciadas pelo código do back-end.</p>\n<p>Dada nossa situação atual, pelo fato de tanto o front-end quanto o back-end estarem no mesmo endereço, podemos declarar o <em>baseUrl</em> como uma URL <a href=\"https://www.w3.org/TR/WD-html40-970917/htmlweb.html#h-5.1.2\">relativa</a> (relative URL). Isso significa que podemos deixar de fora a parte que declara o servidor.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> baseUrl <span class=\"token operator\">=</span> <span class=\"token string\">'/api/notes'</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>Depois da alteração, temos que criar uma nova versão de produção e copiá-la para a raiz do repositório back-end.</p>\n<p>A aplicação agora pode ser usada no endereço <a href=\"http://localhost:3001\">http://localhost:3001</a> do <i>back-end</i>:</p>\n<picture><img src=\"/static/00b60846d754ead099038271e2e54ecc/5a190/28new.png\" alt=\"Captura de tela da aplicação Notes\" srcset=\"/static/00b60846d754ead099038271e2e54ecc/772e8/28new.png 200w,\n/static/00b60846d754ead099038271e2e54ecc/e17e5/28new.png 400w,\n/static/00b60846d754ead099038271e2e54ecc/5a190/28new.png 800w,\n/static/00b60846d754ead099038271e2e54ecc/c1b63/28new.png 1200w,\n/static/00b60846d754ead099038271e2e54ecc/29007/28new.png 1600w,\n/static/00b60846d754ead099038271e2e54ecc/ca3c3/28new.png 1850w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Nossa aplicação agora funciona exatamente como o exemplo de <a href=\"/ptbr/part0/fundamentos_de_aplicacoes_web#aplicacao-de-pagina-unica-spa-single-page-application\">Aplicação de Página Única</a> que estudamos na Parte 0. </p>\n<p>Quando usamos um navegador para acessar o endereço <a href=\"http://localhost:3001\">http://localhost:3001</a>, o servidor retorna o arquivo <i>index.html</i> do repositório <i>build</i>. O conteúdo resumido do arquivo é o seguinte:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>React App<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/static/css/main.f9a47af2.chunk.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/static/js/1.578f4ea1.chunk.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/static/js/main.104ca08d.chunk.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>O arquivo contém instruções para buscar uma folha de estilo CSS que define os estilos da aplicação, e duas tags <i>script</i> que instruem o navegador a buscar o código JavaScript da aplicação — a aplicação React real.</p>\n<p>O código React busca notas do endereço do servidor <a href=\"http://localhost:3001/api/notes\">http://localhost:3001/api/notes</a> e as renderiza na tela. As comunicações entre o servidor e o navegador podem ser vistas na guia <i>Rede</i> das Ferramentas do Desenvolvedor:</p>\n<picture><img src=\"/static/7e90543c1d9697b1058225a877364cb9/5a190/29new.png\" alt=\"guia de rede da aplicação de notas no back-end\" srcset=\"/static/7e90543c1d9697b1058225a877364cb9/772e8/29new.png 200w,\n/static/7e90543c1d9697b1058225a877364cb9/e17e5/29new.png 400w,\n/static/7e90543c1d9697b1058225a877364cb9/5a190/29new.png 800w,\n/static/7e90543c1d9697b1058225a877364cb9/c1b63/29new.png 1200w,\n/static/7e90543c1d9697b1058225a877364cb9/29007/29new.png 1600w,\n/static/7e90543c1d9697b1058225a877364cb9/9e7e4/29new.png 2056w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>A configuração que está pronta para implantação de produção é a seguinte:</p>\n<picture><img src=\"/static/6f33425b60b49278d57df7e62f81a32c/db910/101.png\" alt=\"diagrama da aplicação React pronta para implantação\" srcset=\"/static/6f33425b60b49278d57df7e62f81a32c/772e8/101.png 200w,\n/static/6f33425b60b49278d57df7e62f81a32c/db910/101.png 396w\" sizes=\"(max-width: 396px) 100vw, 396px\"></picture>\n<p>Ao contrário do que acontece quando a aplicação é executada em um ambiente de desenvolvimento, tudo está agora no mesmo back-end Node/Express que é executado em <i>localhost:3001</i>. Quando o navegador vai até a página, o arquivo <i>index.html</i> é renderizado. Isso faz com que o navegador busque o build de produção da aplicação React. Assim que começa a ser executada, ela busca os dados json do endereço <i>localhost:3001/api/notes</i>.</p>\n<h3>A aplicação toda na internet</h3>\n<p>Após garantir que a versão de produção da aplicação funciona localmente, confirme a versão de produção do front-end no repositório do back-end e envie o código para o GitHub novamente.</p>\n<p>Se você estiver usando o Render, um \"push\" para o GitHub <i>pode</i> ser suficiente. Se a implantação automática não funcionar, selecione \"manual deploy\" (implantação manual) no painel do Render.</p>\n<p>No caso do Fly.io, a nova implantação é feita com o comando:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">fly deploy</code></pre></div>\n<p>A aplicação funciona perfeitamente, com exceção de que ainda não adicionamos a funcionalidade de alternar a importância de uma nota no back-end.</p>\n<picture><img src=\"/static/7003b3eacf4ce56213d8be4bea2df167/5a190/30new.png\" alt=\"captura de tela da aplicação de notas\" srcset=\"/static/7003b3eacf4ce56213d8be4bea2df167/772e8/30new.png 200w,\n/static/7003b3eacf4ce56213d8be4bea2df167/e17e5/30new.png 400w,\n/static/7003b3eacf4ce56213d8be4bea2df167/5a190/30new.png 800w,\n/static/7003b3eacf4ce56213d8be4bea2df167/c1b63/30new.png 1200w,\n/static/7003b3eacf4ce56213d8be4bea2df167/29007/30new.png 1600w,\n/static/7003b3eacf4ce56213d8be4bea2df167/8454b/30new.png 1798w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Nossa aplicação salva as notas em uma variável. Se a aplicação travar ou for reiniciada, todos os dados desaparecerão.</p>\n<p>A aplicação precisa de um banco de dados. Antes de introduzirmos um, vamos passar por alguns pontos.</p>\n<p>A configuração agora parece assim:</p>\n<picture><img src=\"/static/f66a6db377fe19444ecd3bea78c49d4b/5a190/102.png\" alt=\"diagrama da aplicação React no Heroku com um banco de dados\" srcset=\"/static/f66a6db377fe19444ecd3bea78c49d4b/772e8/102.png 200w,\n/static/f66a6db377fe19444ecd3bea78c49d4b/e17e5/102.png 400w,\n/static/f66a6db377fe19444ecd3bea78c49d4b/5a190/102.png 800w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>O back-end Node/Express agora reside no servidor Fly.io/Render. Quando o endereço raiz é acessado, o navegador carrega e executa a aplicação React que busca os dados json do servidor Fly.io/Render.</p>\n<h3>Otimização da implantação do front-end</h3>\n<p>Para criar uma nova versão de produção do front-end sem trabalho manual adicional, vamos adicionar alguns scripts npm ao <i>package.json</i> do repositório do back-end.</p>\n<h4>Fly.io</h4>\n<p>O script fica assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token property\">\"build:ui\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rm -rf build &amp;&amp; cd ../part2-notes/ &amp;&amp; npm run build &amp;&amp; cp -r build ../notes-backend\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"deploy\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fly deploy\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"deploy:full\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run build:ui &amp;&amp; npm run deploy\"</span><span class=\"token punctuation\">,</span>    \n    <span class=\"token property\">\"logs:prod\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fly logs\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O script <em>npm run build:ui</em> constrói o front-end e copia a versão de produção no repositório do back-end. <em>npm run deploy</em> libera a versão atual do back-end para o Fly.io.</p>\n<p><em>npm run deploy:full</em> combina esses dois scripts.</p>\n<p>Existe também um script <em>npm run logs:prod</em> para mostrar os logs do Fly.io.</p>\n<p>Observe que os caminhos de diretório no script <i>build:ui</i> dependem da localização dos repositórios no sistema de arquivos.</p>\n<h4>Render</h4>\n<p>No caso do Render, os scripts ficam assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token property\">\"build:ui\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rm -rf build &amp;&amp; cd ../frontend &amp;&amp; npm run build &amp;&amp; cp -r build ../backend\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"deploy:full\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run build:ui &amp;&amp; git add . &amp;&amp; git commit -m uibuild &amp;&amp; git push\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O script <em>npm run build:ui</em> constrói o front-end e copia a versão de produção no repositório do back-end. <em>npm run deploy:full</em> contém também os comandos necessários <i>git</i> para atualizar o repositório do back-end.</p>\n<p>Observe que os caminhos de diretório no script <i>build:ui</i> dependem da localização dos repositórios no sistema de arquivos.</p>\n<blockquote>\n<p><strong>Obs.:</strong> No Windows, scripts npm são executados em cmd.exe como o shell padrão que não oferece suporte a comandos bash. Para que os comandos bash acima funcionem, é possível alterar o shell padrão para Bash (na instalação padrão do Git para Windows) da seguinte forma:</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\">npm config set script-shell \"C:\\\\Program Files\\\\git\\\\bin\\\\bash.exe\"</code></pre></div>\n<p>Outra opção é usar o <a href=\"https://www.npmjs.com/package/shx\">shx</a>.</p>\n<h3>Proxy</h3>\n<p>As alterações no front-end fizeram com que ele não funcionasse mais no modo de desenvolvimento (quando iniciado com o comando <em>npm start</em>), pois a conexão com o back-end não funciona.</p>\n<picture><img src=\"/static/c2dc22eab2be6e45278c02055c079123/5a190/32new.png\" alt=\"ferramentas do desenvolvedor mostrando um erro 404 ao obter notas\" srcset=\"/static/c2dc22eab2be6e45278c02055c079123/772e8/32new.png 200w,\n/static/c2dc22eab2be6e45278c02055c079123/e17e5/32new.png 400w,\n/static/c2dc22eab2be6e45278c02055c079123/5a190/32new.png 800w,\n/static/c2dc22eab2be6e45278c02055c079123/c1b63/32new.png 1200w,\n/static/c2dc22eab2be6e45278c02055c079123/29007/32new.png 1600w,\n/static/c2dc22eab2be6e45278c02055c079123/17d12/32new.png 1666w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Isso se deve à alteração do endereço do back-end para um URL relativo:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> baseUrl <span class=\"token operator\">=</span> <span class=\"token string\">'/api/notes'</span></code></pre></div>\n<p>Como no modo de desenvolvimento o front-end está no endereço <i>localhost:3000</i>, as requisições ao back-end vão para o endereço errado <i>localhost:3000/api/notes</i>. O back-end está em <i>localhost:3001</i>.</p>\n<p>Esse problema é fácil de resolver se o projeto foi criado com \"create-react-app\". Basta adicionar a seguinte declaração ao arquivo <i>package.json</i> do repositório do front-end.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"dependencies\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    // <span class=\"token punctuation\">..</span>.\n  <span class=\"token punctuation\">}</span>,\n  <span class=\"token string\">\"scripts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    // <span class=\"token punctuation\">..</span>.\n  <span class=\"token punctuation\">}</span>,\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token string\">\"proxy\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"http://localhost:3001\"</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Após a reinicialização, o ambiente de desenvolvimento React funcionará como um <a href=\"https://create-react-app.dev/docs/proxying-api-requests-in-development/\">proxy</a>. Se o código React fizer uma requisição HTTP para um endereço de servidor em <i><a href=\"http://localhost:3000\">http://localhost:3000</a></i> não gerenciado pela aplicação React em si (ou seja, quando as requisições não se tratam de buscar o CSS ou JavaScript da aplicação), a requisição será redirecionada para o servidor em <i><a href=\"http://localhost:3001\">http://localhost:3001</a></i>.</p>\n<p>Agora o front-end já funciona bem: conecta-se ao servidor tanto no modo de desenvolvimento quanto no de produção.</p>\n<p>Um aspecto negativo da nossa abordagem é o quão complicado é implantar o front-end. Implantar uma nova versão requer a geração de um novo build de produção do front-end e a cópia dele para o repositório do back-end. Isso torna a criação de um <a href=\"https://martinfowler.com/bliki/DeploymentPipeline.html\">pipeline de implantação</a> automatizado mais difícil. Pipeline de implantação refere-se a uma maneira automatizada e controlada de mover o código do computador do desenvolvedor por meio de diferentes testes e verificações de qualidade até o ambiente de produção. A criação de um pipeline de implantação é o tema da <a href=\"/ptbr/part11\">Parte 11</a> deste curso.</p>\n<p>Existem várias maneiras de conseguir fazer isso (por exemplo, colocando o código do back-end e do front-end <a href=\"https://github.com/mars/heroku-cra-node\">no mesmo repositório</a>), mas não entraremos nesses detalhes agora.</p>\n<p>Em algumas situações, é sensato implantar o código do front-end como sua própria aplicação. Fazer isso é <a href=\"https://github.com/mars/create-react-app-buildpack\">simples</a> com aplicações criadas com \"create-react-app\".</p>\n<p>O código atual do back-end pode ser encontrado no <a href=\"https://github.com/fullstack-hy2020/part3-notes-backend/tree/part3-3\">GitHub</a>, na branch <i>part3-3</i>. As alterações no código do frontend estão na branch <i>part3-1</i> do <a href=\"https://github.com/fullstack-hy2020/part2-notes/tree/part3-1\">repositório do front-end</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercícios 3.9 a 3.11</h3>\n<p>Os exercícios a seguir não exigem muitas linhas de código. No entanto, podem ser desafiadores, pois você deve entender exatamente o que e onde está acontecendo, e as configurações devem estar corretas.</p>\n<h4>3.9: Phonebook backend — 9º passo</h4>\n<p>Faça com que o back-end funcione com o front-end da lista telefônica dos exercícios da parte anterior. Não implemente a funcionalidade para fazer alterações nos números de telefone ainda, porque isso será implementado no exercício 3.17.</p>\n<p>Você provavelmente terá que fazer algumas pequenas alterações no front-end, pelo menos nas URLs para o back-end. Lembre-se de manter o Console do desenvolvedor aberto em seu navegador. Se algumas requisições HTTP falharem, você deve verificar na guia <i>Rede</i> o que está acontecendo. Fique de olho também no console do back-end. Se você não fez o exercício anterior, vale a pena imprimir no console os dados da requisição ou <i>request.body</i> no gerenciador de eventos responsável pelas requisições POST.</p>\n<h4>3.10: Phonebook backend — 10º passo</h4>\n<p>Implante o back-end na internet; pode ser no Fly.io ou no Render, por exemplo.</p>\n<p>Teste o recém-implantado back-end com um navegador, com o Postman ou com o cliente REST do VS Code para garantir que ele esteja funcionando.</p>\n<p><strong>DICA PRO:</strong> Quando você implantar sua aplicação na internet, é importante pelo menos no início ficar de olho nos logs da aplicação <strong>A TODO MOMENTO</strong>.</p>\n<p>Crie um README.md na raiz do seu repositório e adicione um link de acesso à sua aplicação online.</p>\n<p><strong>OBSERVAÇÃO</strong> como dito, o deploy do BACKEND deve ser feito em um serviço de nuvem. Se você estiver usando o Fly.io, o comando deve ser executado no diretório raiz do backend (que é o mesmo diretório onde está o arquivo do backend chamado package.json). No caso de estar usando o Render, o backend deve estar na raiz do seu repositório.</p>\n<p>Você NÃO deve fazer o deploy do frontend diretamente nesta parte. O deploy está sendo realizado apenas com o repositório do backend ao longo de toda esta parte do curso.</p>\n<h4>3.11: Phonebook backend — 11º passo</h4>\n<p>Gere um build de produção do seu front-end e adicione-o à aplicação na internet utilizando o método introduzido nesta parte.</p>\n<p><strong>Obs.:</strong> Se você usar o Render, certifique-se de que o diretório <i>build</i> não esteja no <i>gitignored</i>.</p>\n<p>Certifique-se também de que o front-end ainda funcione localmente (em modo de desenvolvimento quando iniciado com o comando <em>npm start</em>).</p>\n<p>Se tiver problemas para fazer a aplicação funcionar, certifique-se de que a estrutura do seu diretório corresponda <a href=\"https://github.com/fullstack-hy2020/part3-notes-backend/tree/part3-3\">à aplicação de exemplo</a>.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/8ac7bc0fb2b7018a7853b00c454b2103/part-3.svg"},"part":3,"letter":"b","lang":"ptbr"}}},"pageContext":{"part":3,"letter":"b","lang":"ptbr"}},"staticQueryHashes":["3128451518"]}
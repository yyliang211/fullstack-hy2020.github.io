{"componentChunkName":"component---src-templates-content-template-js","path":"/zh/part5/props_children_与_proptypes","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<h3>Displaying the login form only when appropriate</h3>\n<!-- Let's modify the application so that the login form is not displayed by default:-->\n<p> 让我们修改应用，使其默认不显示登录表单。</p>\n<picture><img src=\"/static/da248f79ad2c71a9e834c174065dc694/5a190/10e.png\" srcset=\"/static/da248f79ad2c71a9e834c174065dc694/772e8/10e.png 200w,\n/static/da248f79ad2c71a9e834c174065dc694/e17e5/10e.png 400w,\n/static/da248f79ad2c71a9e834c174065dc694/5a190/10e.png 800w,\n/static/da248f79ad2c71a9e834c174065dc694/c1b63/10e.png 1200w,\n/static/da248f79ad2c71a9e834c174065dc694/3ceac/10e.png 1456w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<!-- The login form appears when the user presses the <i>login</i> button:-->\n<p> 当用户按下<i>login</i>按钮时，登录表单就会出现。</p>\n<picture><img src=\"/static/bb9909156016418fc4cc9a1b60424f13/5a190/11e.png\" srcset=\"/static/bb9909156016418fc4cc9a1b60424f13/772e8/11e.png 200w,\n/static/bb9909156016418fc4cc9a1b60424f13/e17e5/11e.png 400w,\n/static/bb9909156016418fc4cc9a1b60424f13/5a190/11e.png 800w,\n/static/bb9909156016418fc4cc9a1b60424f13/c1b63/11e.png 1200w,\n/static/bb9909156016418fc4cc9a1b60424f13/8b936/11e.png 1368w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<!-- The user can close the login form by clicking the <i>cancel</i> button.-->\n<p> 用户可以通过点击<i>取消</i>按钮来关闭登录表格。</p>\n<!-- Let's start by extracting the login form into its own component:-->\n<p> 我们先把登录表单提取到它自己的组件中。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">LoginForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n   handleSubmit<span class=\"token punctuation\">,</span>\n   handleUsernameChange<span class=\"token punctuation\">,</span>\n   handlePasswordChange<span class=\"token punctuation\">,</span>\n   username<span class=\"token punctuation\">,</span>\n   password\n  <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          username\n          <span class=\"token operator\">&lt;</span>input\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleUsernameChange<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          password\n          <span class=\"token operator\">&lt;</span>input\n            type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span>\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>password<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handlePasswordChange<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> LoginForm</code></pre></div>\n<!-- The state and all the functions related to it are defined outside of the component and are passed to the component as props.-->\n<p> 状态和所有与之相关的功能都是在组件之外定义的，并作为prop传递给组件。</p>\n<!-- Notice that the props are assigned to variables through <i>destructuring</i>, which means that instead of writing:-->\n<p> 注意，props是通过<i>destructuring</i>分配给变量的，这意味着不用再写。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">LoginForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          username\n          <span class=\"token operator\">&lt;</span>input\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span>\n            name<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token comment\">// ...</span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- where the properties of the _props_ object are accessed through e.g. _props.handleSubmit_, the properties are assigned directly to their own variables.-->\n<p>通过例如<em>props.handleSubmit</em>来访问<em>props</em>对象的属性，而是直接将属性分配给它们自己的变量。</p>\n<!-- One fast way of implementing the functionality is to change the _loginForm_ function of the <i>App</i> component like so:-->\n<p> 实现该功能的一个快速方法是像这样改变<i>App</i>组件的<em>loginForm</em>函数。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loginVisible<span class=\"token punctuation\">,</span> setLoginVisible<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loginForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> hideWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> loginVisible <span class=\"token operator\">?</span> <span class=\"token string\">'none'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> showWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> loginVisible <span class=\"token operator\">?</span> <span class=\"token string\">''</span> <span class=\"token operator\">:</span> <span class=\"token string\">'none'</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hideWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setLoginVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>log <span class=\"token keyword\">in</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>showWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>LoginForm\n            username<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span>\n            password<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>password<span class=\"token punctuation\">}</span>\n            handleUsernameChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n            handlePasswordChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n            handleSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleLogin<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setLoginVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>cancel<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- The <i>App</i> components state now contains the boolean <i>loginVisible</i>, that defines if the login form should be shown to the user or not.-->\n<p> <i>App</i>组件的状态现在包含布尔值<i>loginVisible</i>，它定义了登录表单是否应该显示给用户。</p>\n<!-- The value of loginVisible is toggled with two buttons. Both buttons have their event handlers defined directly in the component:-->\n<p> loginVisible的值是通过两个按钮来切换的。这两个按钮的事件处理程序都直接定义在组件中。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setLoginVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>log <span class=\"token keyword\">in</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setLoginVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>cancel<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<!-- The visibility of the component is defined by giving the component an [inline](/en/part2/adding_styles_to_react_app#inline-styles) style rule, where the value of the [display](https://developer.mozilla.org/en-US/docs/Web/CSS/display) property is <i>none</i> if we do not want the component to be displayed:-->\n<p> 组件的可见性是通过给组件一个<a href=\"/en/part2/adding_styles_to_react_app#inline-styles\">inline</a>样式规则来定义的，其中<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/display\">display</a>属性的值是<i>none</i>如果我们不希望组件被显示。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> hideWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> loginVisible <span class=\"token operator\">?</span> <span class=\"token string\">'none'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> showWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> loginVisible <span class=\"token operator\">?</span> <span class=\"token string\">''</span> <span class=\"token operator\">:</span> <span class=\"token string\">'none'</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hideWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token comment\">// button</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>showWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token comment\">// button</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<!-- We are once again using the \"question mark\" ternary operator. If _loginVisible_ is <i>true</i>, then the CSS rule of the component will be:-->\n<p> 我们又一次使用了 \"问号 \"三元运算符。如果<em>loginVisible</em>是<i>true</i>，那么该组件的CSS规则将是。</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">display</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<!-- If _loginVisible_ is <i>false</i>, then <i>display</i>  will not receive any value related to the visibility of the component.-->\n<p> 如果<em>loginVisible</em>是<i>false</i>，那么<i>display</i>将不会收到与该组件的可见性有关的任何值。</p>\n<h3>The components children, aka. props.children</h3>\n<!-- The code related to managing the visibility of the login form could be considered to be its own logical entity, and for this reason it would be good to extract it from the <i>App</i> component into its own separate component.-->\n<p> 与管理登录表单的可见性有关的代码可以被认为是它自己的逻辑实体，由于这个原因，最好把它从<i>App</i>组件中提取到它自己的独立组件中。</p>\n<!-- Our goal is to implement a new <i>Togglable</i> component that can be used in the following way:-->\n<p> 我们的目标是实现一个新的<i>Togglable</i>组件，可以按以下方式使用。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">'login'</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>LoginForm\n    username<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span>\n    password<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>password<span class=\"token punctuation\">}</span>\n    handleUsernameChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    handlePasswordChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    handleSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleLogin<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span></code></pre></div>\n<!-- The way that the component is used is slightly different from our previous components. The component has both opening and closing tags which surround a <i>LoginForm</i> component. In React terminology <i>LoginForm</i> is a child component of <i>Togglable</i>.-->\n<p> 该组件的使用方式与我们以前的组件略有不同。该组件有开头和结尾标签，围绕着一个<i>LoginForm</i>组件。在React术语中，<i>LoginForm</i>是<i>Togglable</i>的一个子组件。</p>\n<!-- We can add any React elements we want between the opening and closing tags of <i>Togglable</i>, like this for example:-->\n<p> 我们可以在<i>Togglable</i>的开头和结尾标签之间添加任何我们想要的React元素，比如说这样。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">\"reveal\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token keyword\">this</span> line is at start hidden<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>also <span class=\"token keyword\">this</span> is hidden<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span></code></pre></div>\n<!-- The code for the <i>Togglable</i> component is shown below:-->\n<p> <i>Togglable</i>组件的代码如下所示。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Togglable</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>visible<span class=\"token punctuation\">,</span> setVisible<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> hideWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> visible <span class=\"token operator\">?</span> <span class=\"token string\">'none'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> showWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> visible <span class=\"token operator\">?</span> <span class=\"token string\">''</span> <span class=\"token operator\">:</span> <span class=\"token string\">'none'</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggleVisibility</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visible<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hideWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleVisibility<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>buttonLabel<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>showWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleVisibility<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>cancel<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Togglable</code></pre></div>\n<!-- The new and interesting part of the code is [props.children](https://reactjs.org/docs/glossary.html#propschildren), that is used for referencing the child components of the component. The child components are the React elements that we define between the opening and closing tags of a component.-->\n<p> 代码中新的和有趣的部分是<a href=\"https://reactjs.org/docs/glossary.html#propschildren\">props.children</a>，那是用来引用组件的子组件。子组件是我们在组件的打开和关闭标签之间定义的React元素。</p>\n<!-- This time the children are rendered in the code that is used for rendering the component itself:-->\n<p> 这一次，子组件是在用于渲染组件本身的代码中被渲染出来的。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>showWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleVisibility<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>cancel<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<!-- Unlike the \"normal\" props we've seen before, <i>children</i> is automatically added by React and always exists. If a component is defined with an automatically closing _/>_ tag, like this:-->\n<p> 与我们之前看到的 \"普通 \"prop不同，<i>children</i>是由React自动添加的，并且一直存在。如果一个组件被定义了一个自动关闭的<em>/></em>标签，像这样。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Note\n  key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n  note<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">}</span>\n  toggleImportance<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">toggleImportanceOf</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<!-- Then <i>props.children</i> is an empty array.-->\n<p> 那么<i>props.children</i>就是一个空数组。</p>\n<!-- The <i>Togglable</i> component is reusable and we can use it to add similar visibility toggling functionality to the form that is used for creating new notes.-->\n<p> <i>Togglable</i>组件是可重复使用的，我们可以用它来给用于创建新笔记的表单添加类似的可见性切换功能。</p>\n<!-- Before we do that, let's extract the form for creating notes into its own component:-->\n<p> 在我们这样做之前，让我们把创建笔记的表单提取到自己的组件中。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">NoteForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onSubmit<span class=\"token punctuation\">,</span> handleChange<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Create a <span class=\"token keyword\">new</span> <span class=\"token class-name\">note</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleChange<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>save<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- Next let's define the form component inside of a <i>Togglable</i> component:-->\n<p> 接下来让我们在一个<i>Togglable</i>组件中定义这个表单组件。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">\"new note\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>NoteForm\n    onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addNote<span class=\"token punctuation\">}</span>\n    value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newNote<span class=\"token punctuation\">}</span>\n    handleChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleNoteChange<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span></code></pre></div>\n<!-- You can find the code for our current application in its entirety in the <i>part5-4</i> branch of [this GitHub repository](https://github.com/fullstack-hy2020/part2-notes/tree/part5-4).-->\n<p> 你可以在<a href=\"https://github.com/fullstack-hy2020/part2-notes/tree/part5-4\">这个github仓库</a>的<i>part5-4</i>分支中找到我们当前应用的全部代码。</p>\n<h3>State of the forms</h3>\n<!-- The state of the application currently is in the _App_ component.-->\n<p> 目前应用的状态在<em>App</em>组件中。</p>\n<!-- React documentation says the [following](https://reactjs.org/docs/lifting-state-up.html) about where to place the state:-->\n<p> React 文档对放置状态的位置进行了<a href=\"https://zh-hans.react.dev/learn/sharing-state-between-components\">如下</a>说明：</p>\n<!-- <i>Often, several components need to reflect the same changing data. We recommend lifting the shared state up to their closest common ancestor.</i> -->\n<blockquote>\n<p><i>有时，您希望两个组件的状态始终一起更改。要做到这一点，请从它们中删除状态，将其移动到它们最近的公共父级，然后通过 props 将其传递给它们。这被称为提升状态，这是你编写 React 代码时最常做的事情之一。</i></p>\n</blockquote>\n<!-- If we think about the state of the forms, so for example the contents of a new note before it has been created, the _App_ component does not actually need it for anything.-->\n<p> 如果我们考虑到表单的状态，例如一个新的笔记在创建之前的内容，<em>App</em>组件实际上并不需要它。</p>\n<!-- We could just as well move the state of the forms to the corresponding components.-->\n<p> 我们也可以把表单的状态移到相应的组件上。</p>\n<!-- The component for a note changes like so:-->\n<p>一个笔记的组件是这样变化的：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">NoteForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> createNote <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newNote<span class=\"token punctuation\">,</span> setNewNote<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setNewNote</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addNote</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">createNote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> newNote<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">important</span><span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">setNewNote</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Create a <span class=\"token keyword\">new</span> <span class=\"token class-name\">note</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addNote<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newNote<span class=\"token punctuation\">}</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleChange<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>save<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> NoteForm</code></pre></div>\n<!-- **NOTE** At the same time, we changed the behavior of the application so that new notes are important by default, i.e. the field <i>important</i> gets the value <i>true</i>. -->\n<p><strong>注意</strong> 同时，我们改变了应用的行为，使得新的笔记默认为重要，也就是说，<i>important</i> 字段获得的值为 <i>true</i>。</p>\n<!-- The <i>newNote</i> state variable and the event handler responsible for changing it have been moved from the _App_ component to the component responsible for the note form. -->\n<p><i>newNote</i> 状态变量和负责改变它的事件处理器已经从 <em>App</em> 组件移动到负责笔记表单的组件。</p>\n<!-- There is only one prop left, the _createNote_ function, which the form calls when a new note is created. -->\n<p>现在只剩下一个 prop，即 <em>createNote</em> 函数，当创建新的笔记时，表单会调用它。</p>\n<!-- The _App_ component becomes simpler now that we have got rid of the <i>newNote</i> state and its event handler. -->\n<!-- The _addNote_ function for creating new notes receives a new note as a parameter, and the function is the only prop we send to the form: -->\n<p><em>App</em> 组件现在变得更简单，因为我们已经摆脱了 <i>newNote</i> 状态和它的事件处理器。\n创建新笔记的 <em>addNote</em> 函数接收一个新的笔记作为参数，函数是我们发送给表单的唯一 prop：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addNote</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">noteObject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    noteService\n      <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>noteObject<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">returnedNote</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>returnedNote<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noteForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">'new note'</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>NoteForm createNote<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addNote<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- We could do the same for the log in form, but we'll leave that for an optional exercise. -->\n<p>我们可以对登录表单做同样的事情，但我们将把这留作可选的练习。</p>\n<!-- The application code can be found on [GitHub](https://github.com/fullstack-hy2020/part2-notes-frontend/tree/part5-5), branch <i>part5-5</i>. -->\n<p>应用程序代码可以在 <a href=\"https://github.com/fullstack-hy2020/part2-notes-frontend/tree/part5-5\">GitHub</a> 上找到，分支为 <i>part5-5</i>。</p>\n<h3>References to components with ref</h3>\n<!-- Our current implementation is quite good, it has one aspect that could be improved.-->\n<p>我们目前的实现相当不错，但它有一个可以改进的方面。</p>\n<!-- After a new note is created, it would make sense to hide the new note form. Currently, the form stays visible. There is a slight problem with hiding the form. The visibility is controlled with the <i>visible</i> state variable inside of the <i>Togglable</i> component.  -->\n<p>创建新的笔记后，隐藏新的笔记表单是有意义的。目前，表单仍然可见。隐藏表单有一个小问题。可见性是由 <i>Togglable</i> 组件内部的 <i>visible</i> 状态变量控制的。</p>\n<!-- One solution to this would be to move control of the Togglable component's state outside the component. However, we won't do that now, because we want the component to be responsible for its own state. So we have to find another solution, and find a mechanism to change the state of the component externally. -->\n<p>解决这个问题的一个办法是将 Togglable 组件的状态控制移出组件。然而，我们现在不会这样做，因为我们希望组件负责自己的状态。所以我们必须找到另一种解决方案，并找到一种机制来从外部改变组件的状态。</p>\n<!-- There are several different ways to implement access to a component's functions from outside the component, but let's use the [ref](https://react.dev/learn/referencing-values-with-refs) mechanism of React, which offers a reference to the component. -->\n<p>有几种不同的方法可以实现从组件外部访问组件的函数，但让我们使用 React 的 <a href=\"https://react.dev/learn/referencing-values-with-refs\">ref</a> 机制，它提供了对组件的引用。</p>\n<!-- Let's make the following changes to the <i>App</i> component:-->\n<p> 让我们对<i>App</i>组件做如下修改。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect<span class=\"token punctuation\">,</span> useRef <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> noteFormRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noteForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">'new note'</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>noteFormRef<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span>      <span class=\"token operator\">&lt;</span>NoteForm createNote<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addNote<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- The [useRef](https://reactjs.org/docs/hooks-reference.html#useref) hook is used to create a <i>noteFormRef</i> ref, that is assigned to the <i>Togglable</i> component containing the creation note form. The <i>noteFormRef</i> variable acts as a reference to the component. This hook ensures the same reference (ref) is kept throughout re-renders of the component.-->\n<p> <a href=\"https://reactjs.org/docs/hooks-reference.html#useref\">useRef</a> 钩子被用来创建一个<i>noteFormRef</i>参考，它被分配给包含创建笔记表单的<i>Togglable</i>组件。<i>noteFormRef</i>变量作为该组件的引用。这个钩子确保了在组件的重新渲染过程中保持相同的引用（ref）。</p>\n<!-- We also make the following changes to the <i>Togglable</i> component:-->\n<p> 我们还对<i>Togglable</i>组件做了如下修改。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> forwardRef<span class=\"token punctuation\">,</span> useImperativeHandle <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> Togglable <span class=\"token operator\">=</span> <span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>visible<span class=\"token punctuation\">,</span> setVisible<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> hideWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> visible <span class=\"token operator\">?</span> <span class=\"token string\">'none'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> showWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> visible <span class=\"token operator\">?</span> <span class=\"token string\">''</span> <span class=\"token operator\">:</span> <span class=\"token string\">'none'</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggleVisibility</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visible<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useImperativeHandle</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      toggleVisibility</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hideWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleVisibility<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>buttonLabel<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>showWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleVisibility<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>cancel<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Togglable</code></pre></div>\n<!-- The function that creates the component is wrapped inside of a [forwardRef](https://reactjs.org/docs/react-api.html#reactforwardref) function call. This way the component can access the ref that is assigned to it.-->\n<p> 创建该组件的函数被包裹在一个<a href=\"https://reactjs.org/docs/react-api.html#reactforwardref\">forwardRef</a>函数调用中。这样，组件就可以访问分配给它的Ref。</p>\n<!-- The component uses the [useImperativeHandle](https://reactjs.org/docs/hooks-reference.html#useimperativehandle) hook to make its <i>toggleVisibility</i> function available outside of the component.-->\n<p> 该组件使用<a href=\"https://reactjs.org/docs/hooks-reference.html#useimperativehandle\">useImperativeHandle</a>钩子来使它的<i>toggleVisibility</i>函数在组件之外可用。</p>\n<!-- We can now hide the form by calling <i>noteFormRef.current.toggleVisibility()</i> after a new note has been created:-->\n<p> 我们现在可以在创建一个新的笔记后，通过调用<i>noteFormRef.current.toggleVisibility()</i>来隐藏这个表单。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addNote</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">noteObject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    noteFormRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">toggleVisibility</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>    noteService\n      <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>noteObject<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">returnedNote</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>returnedNote<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- To recap, the [useImperativeHandle](https://reactjs.org/docs/hooks-reference.html#useimperativehandle) function is a React hook, that is used for defining functions in a component which can be invoked from outside of the component.-->\n<p> 回顾一下，<a href=\"https://reactjs.org/docs/hooks-reference.html#useimperativehandle\">useImperativeHandle</a>函数是一个React钩子，用于在组件中定义可以从组件外部调用的函数。</p>\n<!-- This trick works for changing the state of a component, but it looks a bit unpleasant. We could have accomplished the same functionality with slightly cleaner code using \"old React\" class-based components. We will take a look at these class components during part 7 of the course material. So far this is the only situation where using React hooks leads to code that is not cleaner than with class components.-->\n<p> 这个技巧对于改变组件的状态是有效的，但它看起来有点不爽。我们可以使用 \"老式React \"基于类的组件，用稍微干净的代码完成同样的功能。我们将在教材的第7章节看一下这些类组件。到目前为止，这是唯一一种使用React钩子导致的代码不比使用类组件干净的情况。</p>\n<!-- There are also [other use cases](https://reactjs.org/docs/refs-and-the-dom.html) for refs than accessing React components.-->\n<p>除了访问React组件，还有<a href=\"https://reactjs.org/docs/refs-and-the-dom.html\">其他用例</a>的参考文献。</p>\n<!-- You can find the code for our current application in its entirety in the <i>part5-6</i> branch of [this GitHub repository](https://github.com/fullstack-hy2020/part2-notes/tree/part5-6).-->\n<p>你可以在<a href=\"https://github.com/fullstack-hy2020/part2-notes/tree/part5-6\">这个github仓库</a>的<i>part5-6</i>分支中找到我们当前应用的全部代码。</p>\n<h3>One point about components</h3>\n<!-- When we define a component in React:-->\n<p>当我们在React中定义一个组件。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Togglable</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">...</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- And use it like this:-->\n<p> 然后像这样使用它。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>togglable1<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    first\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">\"2\"</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>togglable2<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    second\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">\"3\"</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>togglable3<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    third\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<!-- We create <i>three separate instances of the component</i> that all have their own separate state:-->\n<p> 我们创建了<i>该组件的三个独立实例</i>，它们都有自己的独立状态。</p>\n<picture><img src=\"/static/c7355696281ca0c4d8d1e734a1d81a26/5a190/12e.png\" srcset=\"/static/c7355696281ca0c4d8d1e734a1d81a26/772e8/12e.png 200w,\n/static/c7355696281ca0c4d8d1e734a1d81a26/e17e5/12e.png 400w,\n/static/c7355696281ca0c4d8d1e734a1d81a26/5a190/12e.png 800w,\n/static/c7355696281ca0c4d8d1e734a1d81a26/077b7/12e.png 1166w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<!-- The <i>ref</i> attribute is used for assigning a reference to each of the components in the variables <i>togglable1</i>, <i>togglable2</i> and <i>togglable3</i>.-->\n<p> <i>ref</i>属性用于为变量<i>togglable1</i>、<i>togglable2</i>和<i>togglable3</i>中的每个组件分配一个引用。</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 5.5.-5.10.</h3>\n<h4>5.5 Blog list frontend, step5</h4>\n<!-- Change the form for creating blog posts so that it is only displayed when appropriate. Use functionality similar to what was shown [earlier in this part of the course material](/en/part5/props_children_and_proptypes#displaying-the-login-form-only-when-appropriate). If you wish to do so, you can use the <i>Togglable</i> component defined in part 5.-->\n<p> 改变创建博客文章的表格，使其只在适当的时候显示。使用类似于<a href=\"/en/part5/props_children_and_proptypes#displaying-the-login-form-only-when-appropriate\">在本章节教材的前面</a>所示的功能。如果你想这样做，你可以使用第五章节中定义的<i>Togglable</i>组件。</p>\n<!-- By default the form is not visible-->\n<p>默认情况下，表单是不可见的</p>\n<picture><img src=\"/static/de4cfabdf46a837f1f0bfdba4fd27d67/5a190/13ae.png\" srcset=\"/static/de4cfabdf46a837f1f0bfdba4fd27d67/772e8/13ae.png 200w,\n/static/de4cfabdf46a837f1f0bfdba4fd27d67/e17e5/13ae.png 400w,\n/static/de4cfabdf46a837f1f0bfdba4fd27d67/5a190/13ae.png 800w,\n/static/de4cfabdf46a837f1f0bfdba4fd27d67/c1b63/13ae.png 1200w,\n/static/de4cfabdf46a837f1f0bfdba4fd27d67/eb2ef/13ae.png 1324w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<!-- It expands when button <i>create new blog</i> is clicked-->\n<p> 当点击<i>创建新博客</i>按钮时，它就会展开。</p>\n<picture><img src=\"/static/0cb27abc7b56ba5ecdd7e9d48d325c87/5a190/13be.png\" srcset=\"/static/0cb27abc7b56ba5ecdd7e9d48d325c87/772e8/13be.png 200w,\n/static/0cb27abc7b56ba5ecdd7e9d48d325c87/e17e5/13be.png 400w,\n/static/0cb27abc7b56ba5ecdd7e9d48d325c87/5a190/13be.png 800w,\n/static/0cb27abc7b56ba5ecdd7e9d48d325c87/c1b63/13be.png 1200w,\n/static/0cb27abc7b56ba5ecdd7e9d48d325c87/bc3ae/13be.png 1268w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<!-- The form closes when a new blog is created.-->\n<p>当一个新的博客被创建时，该表单就会关闭。</p>\n<h4>5.6 Blog list frontend, step6</h4>\n<!-- Separate the form for creating a new blog into its own component (if you have not already done so), and move all the states required for creating a new blog to this component.-->\n<p> 把创建新博客的表单分离到它自己的组件中（如果你还没有这样做的话），并把创建新博客所需的所有状态移到这个组件中。</p>\n<!-- The component must work like the <i>NoteForm</i> component from the [material](/en/part5/props_children_and_proptypes) of this part.-->\n<p>该组件必须像本章节的<a href=\"/en/part5/props_children_and_proptypes\">材料</a>中的<i>NoteForm</i>组件那样工作。</p>\n<h4>5.7* Blog list frontend, step7</h4>\n<!-- Let's add a button to each blog, which controls whether all of the details about the blog are shown or not.-->\n<p> 让我们为每个博客添加一个按钮，它可以控制是否显示关于博客的所有细节。</p>\n<!-- Full details of the blog open when the button is clicked.-->\n<p>当按钮被点击时，博客的全部细节就会打开。</p>\n<picture><img src=\"/static/b49e9ca45d0582829eed343baad44910/5a190/13ea.png\" srcset=\"/static/b49e9ca45d0582829eed343baad44910/772e8/13ea.png 200w,\n/static/b49e9ca45d0582829eed343baad44910/e17e5/13ea.png 400w,\n/static/b49e9ca45d0582829eed343baad44910/5a190/13ea.png 800w,\n/static/b49e9ca45d0582829eed343baad44910/c1b63/13ea.png 1200w,\n/static/b49e9ca45d0582829eed343baad44910/229ad/13ea.png 1356w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<!-- And the details are hidden when the button is clicked again.-->\n<p>当再次点击按钮时，细节就会隐藏。</p>\n<!-- At this point the <i>like</i> button does not need to do anything.-->\n<p> 此时，<i>喜欢</i>按钮不需要做任何事情。</p>\n<!-- The application shown in the picture has a bit of additional CSS to improve its appearance.-->\n<p> 图中所示的应用有一点额外的CSS来改善其外观。</p>\n<!-- It is easy to add styles to the application as shown in part 2 using [inline](/en/part2/adding_styles_to_react_app#inline-styles) styles:-->\n<p> 如第二章节所示，使用<a href=\"/en/part2/adding_styles_to_react_app#inline-styles\">inline</a>样式很容易为应用添加样式。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Blog</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> blog <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> blogStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">paddingTop</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">paddingLeft</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">border</span><span class=\"token operator\">:</span> <span class=\"token string\">'solid'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">borderWidth</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">marginBottom</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>blogStyle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span>      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>blog<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>blog<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token comment\">// ...</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></code></pre></div>\n<!-- **NB:** even though the functionality implemented in this part is almost identical to the functionality provided by the <i>Togglable</i> component, the component can not be used directly to achieve the desired behavior. The easiest solution will be to add state to the blog post that controls the displayed form of the blog post.-->\n<p> <strong>NB:</strong>尽管这部分实现的功能与<i>Togglable</i>组件提供的功能几乎相同，但不能直接使用该组件来实现所需的行为。最简单的解决方案是在博文中加入控制博文显示形式的状态。</p>\n<h4>5.8: Blog list frontend, step8</h4>\n<!-- Implement the functionality for the like button. Likes are increased by making an HTTP _PUT_ request to the unique address of the blog post in the backend.-->\n<p> 实现喜欢按钮的功能。通过向后端的博文的唯一地址发出HTTP <em>PUT</em>请求来增加赞。</p>\n<!-- Since the backend operation replaces the entire blog post, you will have to send all of its fields  in the request body. If you wanted to add a like to the following blog post:-->\n<p> 由于后端操作取代了整个博文，你必须在请求体中发送其所有字段。如果你想给下面的博文添加一个喜欢。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">_id</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5a43fde2cbd20b12a2c34e91\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">_id</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5a43e6b6c37f3d065eaaa581\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mluukkai\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Matti Luukkainen\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">likes</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Joel Spolsky\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"The Joel Test: 12 Steps to Better Code\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<!-- You would have to make an HTTP PUT request to the address <i>/api/blogs/5a43fde2cbd20b12a2c34e91</i> with the following request data:-->\n<p> 你必须向地址<i>/api/blogs/5a43fde2cbd20b12a2c34e91</i>发出一个HTTP PUT请求，请求数据如下。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5a43e6b6c37f3d065eaaa581\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">likes</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Joel Spolsky\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"The Joel Test: 12 Steps to Better Code\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- **One last warning:** if you notice that you are using async/await and the _then_-method in the same code, it is almost certain that you are doing something wrong. Stick to using one or the other, and never use both at the same time \"just in case\".-->\n<p> <strong>最后一个警告：</strong>如果你注意到你在同一段代码中使用async/await和<em>then</em>方法，几乎可以肯定你做错了什么。坚持使用其中一个，而不要同时使用两个，\"以防万一\"。</p>\n<h4>5.9: Blog List Frontend, step 9</h4>\n<!-- We notice that something is wrong. When a blog is liked in the app, the name of the user that added the blog is not shown in its details: -->\n<p>我们注意到有些地方出问题了。当在应用中喜欢一篇博客时，添加该博客的用户的名字并未显示在其详细信息中：</p>\n<picture><img src=\"/static/eecca57215321eb0c7576ea5ed839849/5a190/59put.png\" alt=\"浏览器显示在喜欢按钮下方缺少名字\" srcset=\"/static/eecca57215321eb0c7576ea5ed839849/772e8/59put.png 200w,\n/static/eecca57215321eb0c7576ea5ed839849/e17e5/59put.png 400w,\n/static/eecca57215321eb0c7576ea5ed839849/5a190/59put.png 800w,\n/static/eecca57215321eb0c7576ea5ed839849/c1b63/59put.png 1200w,\n/static/eecca57215321eb0c7576ea5ed839849/29007/59put.png 1600w,\n/static/eecca57215321eb0c7576ea5ed839849/2aa89/59put.png 1698w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<!-- When the browser is reloaded, the information of the person is displayed. This is not acceptable, find out where the problem is and make the necessary correction. -->\n<p>当浏览器刷新时，人物的信息就显示出来了。这是不可接受的，找出问题所在并做出必要的修正。</p>\n<!-- Of course, it is possible that you have already done everything correctly and the problem does not occur in your code. In that case, you can move on. -->\n<p>当然，也有可能你已经做得一切都正确，问题并没有出现在你的代码中。在那种情况下，你可以继续前进。</p>\n<h4>5.10: Blog List Frontend, step 10</h4>\n<!-- Modify the application to sort the blog posts by the number of <i>likes</i>. The Sorting can be done with the array [sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) method. -->\n<p>修改应用程序，按照 <i>likes</i> 的数量对博客帖子进行排序。排序可以使用数组的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\">sort</a> 方法。</p>\n<h4>5.11: Blog List Frontend, step 11</h4>\n<!-- Add a new button for deleting blog posts. Also, implement the logic for deleting blog posts in the frontend. -->\n<p>添加一个新的按钮用于删除博客帖子。同时，在前端实现删除博客帖子的逻辑。</p>\n<!-- Your application could look something like this: -->\n<p>你的应用程序可能看起来像这样：</p>\n<picture><img src=\"/static/87b7180f1f10ce670af1bc21f50233ec/5a190/14ea.png\" alt=\"博客移除确认的浏览器\" srcset=\"/static/87b7180f1f10ce670af1bc21f50233ec/772e8/14ea.png 200w,\n/static/87b7180f1f10ce670af1bc21f50233ec/e17e5/14ea.png 400w,\n/static/87b7180f1f10ce670af1bc21f50233ec/5a190/14ea.png 800w,\n/static/87b7180f1f10ce670af1bc21f50233ec/c1b63/14ea.png 1200w,\n/static/87b7180f1f10ce670af1bc21f50233ec/d0c2f/14ea.png 1362w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<!-- The confirmation dialog for deleting a blog post is easy to implement with the [window.confirm](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm) function. -->\n<p>使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/confirm\">window.confirm</a> 函数，实现删除博客帖子的确认对话框非常简单。</p>\n<!-- Show the button for deleting a blog post only if the blog post was added by the user. -->\n<p>只有当博客帖子是由用户添加的时候，才显示删除博客帖子的按钮。</p>\n</div>\n<div class=\"content\">\n<h3>PropTypes</h3>\n<!-- The <i>Togglable</i> component assumes that it is given the text for the button via the <i>buttonLabel</i> prop. If we forget to define it to the component:-->\n<p> <i>Togglable</i>组件假定它通过<i>buttonLabel</i>prop得到了按钮的文本。如果我们忘记向组件定义它。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Togglable<span class=\"token operator\">></span> buttonLabel forgotten<span class=\"token operator\">...</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span></code></pre></div>\n<!-- The application works, but the browser renders a button that has no label text.-->\n<p> 应用可以工作，但浏览器显示的按钮没有标签文本。</p>\n<!-- We would like to enforce that when the <i>Togglable</i> component is used, the button label text prop must be given a value.-->\n<p> 我们希望强制规定，当使用<i>Togglable</i>组件时，必须给按钮标签文本prop一个值。</p>\n<!-- The expected and required props of a component can be defined with the [prop-types](https://github.com/facebook/prop-types) package. Let's install the package:-->\n<p> 组件的预期和要求的prop可以用<a href=\"https://github.com/facebook/prop-types\">prop-types</a>包来定义。让我们安装这个包。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> prop-types</code></pre></div>\n<!-- We can define the <i>buttonLabel</i> prop as a mandatory or <i>required</i> string-type prop as shown below:-->\n<p> 我们可以把<i>buttonLabel</i>prop定义为强制或<i>required</i>字符串型prop，如下所示。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span>\n\n<span class=\"token keyword\">const</span> Togglable <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nTogglable<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">buttonLabel</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- The console will display the following error message if the prop is left undefined:-->\n<p> 如果该prop未被定义，控制台将显示以下错误信息。</p>\n<picture><img src=\"/static/7a239ed6d3ad6721a65ae3ac24eb29b5/5a190/15.png\" srcset=\"/static/7a239ed6d3ad6721a65ae3ac24eb29b5/772e8/15.png 200w,\n/static/7a239ed6d3ad6721a65ae3ac24eb29b5/e17e5/15.png 400w,\n/static/7a239ed6d3ad6721a65ae3ac24eb29b5/5a190/15.png 800w,\n/static/7a239ed6d3ad6721a65ae3ac24eb29b5/c1b63/15.png 1200w,\n/static/7a239ed6d3ad6721a65ae3ac24eb29b5/29007/15.png 1600w,\n/static/7a239ed6d3ad6721a65ae3ac24eb29b5/ab40b/15.png 1736w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<!-- The application still works and nothing forces us to define props despite the PropTypes definitions. Mind you, it is extremely unprofessional to leave <i>any</i> red output to the browser console.-->\n<p> 尽管有PropTypes的定义，应用仍然可以工作，没有任何东西强迫我们定义prop。请注意，给浏览器控制台留下<i>任何</i>红色输出是非常不专业的。</p>\n<!-- Let's also define PropTypes to the <i>LoginForm</i> component:-->\n<p> 我们也给<i>LoginForm</i>组件定义PropTypes。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">LoginForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n   handleSubmit<span class=\"token punctuation\">,</span>\n   handleUsernameChange<span class=\"token punctuation\">,</span>\n   handlePasswordChange<span class=\"token punctuation\">,</span>\n   username<span class=\"token punctuation\">,</span>\n   password\n  <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\nLoginForm<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">handleSubmit</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">handleUsernameChange</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">handlePasswordChange</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- If the type of a passed prop is wrong, e.g. if we try to define the <i>handleSubmit</i> prop as a string, then this will result in the following warning:-->\n<p> 如果传递的prop的类型是错误的，例如，如果我们试图将<i>handleSubmit</i>prop定义为字符串，那么这将导致以下警告。</p>\n<picture><img src=\"/static/ec732518823c5e2921d46285e5549bf3/5a190/16.png\" srcset=\"/static/ec732518823c5e2921d46285e5549bf3/772e8/16.png 200w,\n/static/ec732518823c5e2921d46285e5549bf3/e17e5/16.png 400w,\n/static/ec732518823c5e2921d46285e5549bf3/5a190/16.png 800w,\n/static/ec732518823c5e2921d46285e5549bf3/c1b63/16.png 1200w,\n/static/ec732518823c5e2921d46285e5549bf3/29007/16.png 1600w,\n/static/ec732518823c5e2921d46285e5549bf3/ab40b/16.png 1736w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>ESlint</h3>\n<!-- In part 3 we configured the [ESlint](/en/part3/validation_and_es_lint#lint) code style tool to the backend. Let's take ESlint to use in the frontend as well.-->\n<p> 在第三章节，我们将<a href=\"/zh/part3/es_lint%E4%B8%8E%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5#lint\">ESlint</a>代码风格工具配置到后端。让我们把ESlint也用在前端。</p>\n<!-- Vite has installed ESlint to the project by default, so all that's left for us to do is define our desired configuration in the <i>.eslintrc.cjs</i> file. -->\n<p>Vite 默认将 ESlint 安装到项目中，所以我们剩下要做的就是在 .eslintrc.cjs 文件中定义我们想要的配置。</p>\n<!-- Let's create a <i>.eslintrc.cjs</i> file with the following contents: -->\n<p>让我们创建一个包含以下内容的 .eslintrc.cjs 文件：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev eslint-plugin-jest</code></pre></div>\n<!-- Let's create a <i>.eslintrc.js</i> file with the following contents:-->\n<p> 让我们创建一个<i>.eslintrc.js</i>文件，内容如下。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">root</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">env</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">browser</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">es2020</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'eslint:recommended'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'plugin:react/recommended'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'plugin:react/jsx-runtime'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'plugin:react-hooks/recommended'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">ignorePatterns</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'dist'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.eslintrc.cjs'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">parserOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">ecmaVersion</span><span class=\"token operator\">:</span> <span class=\"token string\">'latest'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">sourceType</span><span class=\"token operator\">:</span> <span class=\"token string\">'module'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">settings</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">react</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> <span class=\"token string\">'18.2'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'react-refresh'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"indent\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">2</span>  \n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"linebreak-style\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"unix\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"quotes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"single\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"semi\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"never\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"eqeqeq\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"no-trailing-spaces\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"object-curly-spacing\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"always\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"arrow-spacing\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"before\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">\"after\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"no-console\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"react/react-in-jsx-scope\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"react/prop-types\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"no-unused-vars\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>    \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- NOTE: If you are using Visual Studio Code together with ESLint plugin, you might need to add additional workspace setting for it to work. If you are seeing ```Failed to load plugin react: Cannot find module 'eslint-plugin-react'``` additional configuration is needed. Adding the line ```\"eslint.workingDirectories\": [{ \"mode\": \"auto\" }]``` to settings.json in the workspace seems to work. See [here](https://github.com/microsoft/vscode-eslint/issues/880#issuecomment-578052807) for more information.-->\n<p> 注意：如果你将Visual Studio Code与ESLint插件一起使用，你可能需要添加额外的工作区设置，以便它能够工作。如果你看到<code class=\"language-text\">加载插件reaction失败。无法找到模块\"eslint-plugin-react\"</code>需要额外的配置。添加一行 `<code class=\"language-text\"></code>\"eslint.workingDirectories\":[{ \"mode\": \"auto\" }]<code class=\"language-text\"></code>到工作区的settings.json中，似乎可以工作。更多信息见<a href=\"https://github.com/microsoft/vscode-eslint/issues/880#issuecomment-578052807\">这里</a>。</p>\n<!-- Let's create [.eslintignore](https://eslint.org/docs/user-guide/configuring#ignoring-files-and-directories) file with the following contents to the repository root-->\n<p> 让我们创建<a href=\"https://eslint.org/docs/user-guide/configuring#ignoring-files-and-directories\">.eslintignore</a>文件，在版本库根目录中加入以下内容</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node_modules\ndist\n.eslintrc.cjs\nvite.config.js</code></pre></div>\n<!-- Now the directories <em>build</em> and <em>node_modules</em> will be skipped when linting.-->\n<p> 现在目录<em>build</em>和<em>node_modules</em>将在检查时被跳过。</p>\n<!-- Let us also create a npm script to run the lint:-->\n<p> 让我们也创建一个npm脚本来运行lint。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts start\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts test\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"eject\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts eject\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"server\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"json-server -p3001 db.json\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string-property property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint .\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- Component _Togglable_ causes a nasty looking warning <i>Component definition is missing display name</i>:-->\n<p> 组件<em>Togglable</em>导致一个看起来很讨厌的警告 <i> 组件定义缺少显示名称</i>。</p>\n<picture><img src=\"/static/f61843245205294dd4fbf50d8b864dd7/5a190/25x.png\" srcset=\"/static/f61843245205294dd4fbf50d8b864dd7/772e8/25x.png 200w,\n/static/f61843245205294dd4fbf50d8b864dd7/e17e5/25x.png 400w,\n/static/f61843245205294dd4fbf50d8b864dd7/5a190/25x.png 800w,\n/static/f61843245205294dd4fbf50d8b864dd7/c1b63/25x.png 1200w,\n/static/f61843245205294dd4fbf50d8b864dd7/29007/25x.png 1600w,\n/static/f61843245205294dd4fbf50d8b864dd7/913b9/25x.png 1822w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<!-- The react-devtools also reveals that the component does not have name:-->\n<p> react-devtools也显示出该组件没有名字。</p>\n<picture><img src=\"/static/1fc750ed2c0c78b8736615837a6be1a0/5a190/26ea.png\" srcset=\"/static/1fc750ed2c0c78b8736615837a6be1a0/772e8/26ea.png 200w,\n/static/1fc750ed2c0c78b8736615837a6be1a0/e17e5/26ea.png 400w,\n/static/1fc750ed2c0c78b8736615837a6be1a0/5a190/26ea.png 800w,\n/static/1fc750ed2c0c78b8736615837a6be1a0/c1b63/26ea.png 1200w,\n/static/1fc750ed2c0c78b8736615837a6be1a0/29007/26ea.png 1600w,\n/static/1fc750ed2c0c78b8736615837a6be1a0/d3b46/26ea.png 1690w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<!-- Fortunately this is easy to fix-->\n<p> 幸运的是，这很容易解决</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useImperativeHandle <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span>\n\n<span class=\"token keyword\">const</span> Togglable <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">Togglable<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">=</span> <span class=\"token string\">'Togglable'</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Togglable</code></pre></div>\n<!-- You can find the code for our current application in its entirety in the <i>part5-7</i> branch of [this GitHub repository](https://github.com/fullstack-hy2020/part2-notes/tree/part5-7).-->\n<p> 你可以在<a href=\"https://github.com/fullstack-hy2020/part2-notes/tree/part5-7\">这个github仓库</a>的<i>part5-7</i>分支中找到我们当前应用的全部代码。</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercise 5.12.</h3>\n<h4>5.12: Blog List Frontend, step 12</h4>\n<!-- Define PropTypes for one of the components of your application, and add ESlint to the project. Define the configuration according to your liking. Fix all of the linter errors. -->\n<p>为你的应用程序的一个组件定义 PropTypes，并将 ESlint 添加到项目中。根据你的喜好定义配置。修复所有的 linter 错误。</p>\n<!-- Vite has installed ESlint to the project by default, so all that's left for you to do is define your desired configuration in the <i>.eslintrc.cjs</i> file. -->\n<p>Vite 已经默认在项目中安装了 ESlint，所以你需要做的就是在 <i>.eslintrc.cjs</i> 文件中定义你想要的配置。</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/b92f84fe9702a35b12f10af4588ba4c2/part-5.svg"},"part":5,"letter":"b","lang":"zh"}}},"pageContext":{"part":5,"letter":"b","lang":"zh"}},"staticQueryHashes":["3128451518"]}
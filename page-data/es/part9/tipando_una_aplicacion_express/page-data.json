{"componentChunkName":"component---src-templates-content-template-js","path":"/es/part9/tipando_una_aplicacion_express","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Ahora que tenemos una comprensión básica de como funciona TypeScript y como crear pequeños proyectos con él, es hora de comenzar a crear algo realmente útil. Ahora vamos a crear un nuevo proyecto con casos de uso un poco más realistas.</p>\n<p>Un cambio importante con respecto a la parte anterior es que <em>ya no usaremos ts-node</em>. Es una herramienta útil que te ayuda a empezar, pero a largo plazo es recomendable utilizar el compilador oficial de TypeScript que viene con el paquete npm de <em>typescript</em>. El compilador oficial genera y empaqueta archivos JavaScript a partir de los archivos .ts para que la <em>versión de producción</em> construida ya no contenga código TypeScript. Este es el resultado exacto al que aspiramos, ya que TypeScript en sí no es ejecutable por navegadores o Node.</p>\n<h3>Configurando el proyecto</h3>\n<p>Crearemos un proyecto para Ilari, a quien le encanta volar aviones pequeños pero tiene dificultades para gestionar su historial de vuelos. Él mismo es bastante coder, por lo que no necesita una interfaz de usuario, pero le gustaría usar el software con solicitudes HTTP y conservar la posibilidad de agregar más tarde una interfaz de usuario basada en web a la aplicación.</p>\n<p>Comencemos por crear nuestro primer proyecto real <em>Diarios de vuelo de Ilari</em>. Como de costumbre, ejecuta <em>npm init</em> e instala el paquete de <em>typescript</em> como una dependencia de desarrollo.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> typescript --save-dev</code></pre></div>\n<p>El compilador nativo de TypeScript (<em>tsc</em>) puede ayudarnos a inicializar nuestro proyecto al generar nuestro archivo <em>tsconfig.json</em>.\nPrimero, tenemos que agregar el comando <em>tsc</em> a la lista de scripts ejecutables en el archivo <em>package.json</em> (a menos que hayas instalado <em>typescript</em> globalmente). Incluso si has instalado TypeScript globalmente, siempre debes añadirlo como una dependencia de desarrollo a tu proyecto.</p>\n<p>El script npm para ejecutar <em>tsc</em> se define de la siguiente manera:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"tsc\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A menudo, el comando <em>tsc</em> simple se agrega a los <em>scripts</em> para que lo usen otros scripts, por lo que es común verlo configurado dentro del proyecto de esta manera.</p>\n<p>Ahora podemos inicializar nuestra configuración tsconfig.json ejecutando:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"> <span class=\"token function\">npm</span> run tsc -- <span class=\"token parameter variable\">--init</span></code></pre></div>\n<p><strong>Ten en cuenta</strong> el extra <em>--</em> ¡antes del argumento real! Los argumentos antes de <em>--</em> se interpretan como parte del comando <em>npm</em>, mientras que los posteriores son para el comando que se ejecuta a través del script (p.ej. <em>tsc</em> en este caso).</p>\n<p>El archivo <em>tsconfig.json</em> que acabamos de crear, contiene una lista larga de todas las configuraciones disponibles para nosotros. Sin embargo, solo unos pocos no han sido comentados.\nEstudiar este archivo puede ser útil para encontrar algunas opciones de configuración que puedas necesitar.\nTambién está completamente bien mantener las filas comentadas en el archivo en caso de que algún día necesites expandir sus ajustes de configuración.</p>\n<p>La configuración que queremos ahora mismo es la siguiente:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES6\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./build/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedLocals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedParameters\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitReturns\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noFallthroughCasesInSwitch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Repasemos cada configuración:</p>\n<p>La configuración <em>target</em> le dice al compilador qué versión de <em>ECMAScript</em> usar cuando se genera el JavaScript. ES6 es compatible con la mayoría de los navegadores y es una opción buena y bastante segura.</p>\n<p><em>outDir</em> indica dónde debe colocarse el código compilado.</p>\n<p><em>module</em> le dice al compilador que queremos usar los módulos de <em>CommonJS</em> en el código compilado. Esto significa que podemos usar la vieja sintaxis <em>require</em> en lugar de <em>import</em>, que no es compatible con versiones viejas de <em>Node</em>.</p>\n<p><em>strict</em> es en realidad una abreviatura de varias opciones independientes:\n<em>noImplicitAny, noImplicitThis, alwaysStrict, strictBindCallApply, strictNullChecks, strictFunctionTypes y strictPropertyInitialization</em>.\nEstas opciones guían nuestro estilo de codificación para usar las funciones de TypeScript de manera más estricta.\nPara nosotros quizás el más importante sea el que ya hemos visto <a href=\"https://www.staging-typescript.org/tsconfig#noImplicitAny\">noImplicitAny</a>. Impide establecer implícitamente el tipo <em>any</em>, lo que puede suceder si, por ejemplo, no escribes los tipos de los parámetros de una función.\nLos detalles del resto de las configuraciones se pueden encontrar en la <a href=\"https://www.staging-typescript.org/tsconfig#strict\">documentación de tsconfig</a>.\nEl uso de <em>strict</em> es sugerido por la documentación oficial.</p>\n<p><em>noUnusedLocals</em> evita tener variables locales sin usar, y <em>noUnusedParameters</em> arroja un error si una función tiene parámetros sin usar.</p>\n<p><em>noImplicitReturns</em> controla todos los posibles caminos del código en una función para asegurar que siempre haya un valor retornado.</p>\n<p><em>noFallthroughCasesInSwitch</em> asegura que en un <em>switch case</em> cada caso termina con una declaración <em>return</em> o <em>break</em>.</p>\n<p><em>esModuleInterop</em> permite la interoperatividad entre los módulos CommonJS y ES; ve más al respecto en la <a href=\"https://www.staging-typescript.org/tsconfig#esModuleInterop\">documentación</a>.</p>\n<p>Ahora que hemos definido nuestra configuración, continuemos instalando <em>express</em> y, por supuesto, también <em>@types/express</em>. Dado que este es un proyecto real, que está destinado a crecer con el tiempo, usaremos ESlint desde el principio:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> express\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev eslint @types/express @typescript-eslint/eslint-plugin @typescript-eslint/parser</code></pre></div>\n<p>Ahora nuestro <em>package.json</em> debería verse así:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"flight-diary\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"tsc\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ISC\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.18.2\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@types/express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.17.18\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/eslint-plugin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.7.3\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.7.3\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^8.50.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^5.2.2\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>También creamos un archivo <em>.eslintrc</em> con el siguiente contenido:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"eslint:recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/recommended-requiring-type-checking\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@typescript-eslint\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"browser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"es6\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"node\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@typescript-eslint/semi\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/explicit-function-return-type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/explicit-module-boundary-types\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/restrict-template-expressions\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/restrict-plus-operands\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/no-unsafe-member-access\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/no-unused-vars\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token property\">\"argsIgnorePattern\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^_\"</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"no-case-declarations\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parserOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"project\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./tsconfig.json\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ahora solo necesitamos configurar nuestro entorno de desarrollo y estamos listos para comenzar a escribir un poco de código serio.\nHay muchas opciones diferentes para esto. Podríamos usar el conocido <em>nodemon</em> con <em>ts-node</em>. Sin embargo, como vimos anteriormente, <em>ts-node-dev</em> hace exactamente lo mismo, asi que lo continuaremos usando.\nEntonces, instalemos <em>ts-node-dev</em></p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev ts-node-dev</code></pre></div>\n<p>Finalmente definimos un par de scripts npm más, y voilà, estamos listos para comenzar:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"tsc\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node-dev index.ts\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --ext .ts .\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Como puedes ver, hay muchas cosas que hacer antes de que comenzar a codear de verdad. Cuando se trabaja con un proyecto real, los preparativos cuidadosos respaldan tu proceso de desarrollo.Tómate el tiempo necesario para crear una buena configuración para ti y tu equipo, para que, a la larga, todo funcione sin problemas.</p>\n<h3>Que haya código</h3>\n<p>¡Ahora finalmente podemos empezar a codear! Como siempre, comenzamos creando un ping-endpoint, solo para asegurarnos de que todo esté funcionando.</p>\n<p>El contenido del archivo <em>index.ts</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/ping'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someone pinged here'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ahora, si ejecutamos la aplicación con <em>npm run dev</em>, podemos verificar que una solicitud a <a href=\"http://localhost:3000/ping\">http://localhost:3000/ping</a> da una respuesta <em>pong</em>, ¡así que nuestra configuración está lista!</p>\n<p>Al iniciar la aplicación con <em>npm run dev</em>, se ejecuta en modo de desarrollo.\nEl modo de desarrollo no es adecuado en absoluto cuando luego operamos la aplicación en producción.</p>\n<p>Intentemos crear una <em>compilación de producción</em> ejecutando el compilador de TypeScript. Dado que hemos definido el <em>outdir</em> en nuestro tsconfig.json, no hay nada más que hacer que ejecutar el script <em>npm run tsc</em>.</p>\n<p>Al igual que por arte de magia, se crea una compilación de producción de JavaScript ejecutable nativa del backend de Express en el archivo <em>index.js</em> dentro del directorio <em>build</em>. El codigo compilado se ve así:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> __importDefault <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>__importDefault<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">mod</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>mod <span class=\"token operator\">&amp;&amp;</span> mod<span class=\"token punctuation\">.</span>__esModule<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> mod <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"default\"</span><span class=\"token operator\">:</span> mod <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">,</span> <span class=\"token string\">\"__esModule\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> express_1 <span class=\"token operator\">=</span> <span class=\"token function\">__importDefault</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> express_1<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express_1<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/ping'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someone pinged here'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Actualmente, si ejecutamos ESlint, también interpretará los archivos en el directorio <em>build</em>. No queremos eso, ya que el código allí es generado por el compilador. Podemos evitar esto creando un archivo <em>.eslintignore</em> que enumere el contenido que queremos que ESlint ignore, tal como lo hacemos con git y <em>.gitignore</em>.</p>\n<p>Agreguemos un script npm para ejecutar la aplicación en modo de producción:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"tsc\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node-dev index.ts\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --ext .ts .\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node build/index.js\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cuando ejecutamos la aplicación con <em>npm start</em>, podemos verificar que también funciona la compilación de producción</p>\n<picture><img src=\"/static/863bc762b6f7599c221ee3dc4b35cbc6/5a190/15a.png\" alt=\"navegador mostrando pong en localhost:3000/ping\" srcset=\"/static/863bc762b6f7599c221ee3dc4b35cbc6/772e8/15a.png 200w,\n/static/863bc762b6f7599c221ee3dc4b35cbc6/e17e5/15a.png 400w,\n/static/863bc762b6f7599c221ee3dc4b35cbc6/5a190/15a.png 800w,\n/static/863bc762b6f7599c221ee3dc4b35cbc6/c1b63/15a.png 1200w,\n/static/863bc762b6f7599c221ee3dc4b35cbc6/203d3/15a.png 1322w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Ahora tenemos una línea de trabajo mínima para desarrollar nuestro proyecto.\nCon la ayuda de nuestro compilador y ESlint, aseguramos que se mantenga una buena calidad de código. Con esta base, podemos comenzar a crear una aplicación que luego podríamos desplegar en un entorno de producción.</p>\n</div>\n<div class=\"tasks\">\n<h3>Ejercicios 9.8.-9.9.</h3>\n<h4>Antes de comenzar los ejercicios</h4>\n<p>Para este conjunto de ejercicios, desarrollaras un backend para un proyecto existente llamado <strong>Patientor</strong>, que es una aplicación simple de registros médicos para doctores que manejan diagnósticos e información básica de la salud de sus pacientes.</p>\n<p>El <a href=\"https://github.com/fullstack-hy2020/patientor\">frontend</a> ya ha sido creado por expertos externos y tu tarea es crear un backend para darle soporte al código existente.</p>\n<h4>ADVERTENCIA</h4>\n<p>Bastante a menudo, VS code pierde el registro de lo que realmente esta pasando en el código y muestra advertencias relacionadas al tipo o estilo a pesar de que el código ya ha sido arreglado. Si esto sucede (a mi me ha sucedido bastante seguido), cierra y vuelve a abrir el archivo que te da problemas o simplemente reinicia el editor. También es bueno asegurarse de que todo realmente funciona ejecutando el compilador y ESlint desde la linea de comandos:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run tsc\n<span class=\"token function\">npm</span> run lint</code></pre></div>\n<p>Cuando lo ejecutamos en la linea de comandos obtienes el \"resultado real\". Entonces, ¡no confíes demasiado en el editor!</p>\n<h4>9.8: Patientor backend, paso 1</h4>\n<p>Inicializa un nuevo proyecto de backend que será utilizado por el frontend. Configura ESlint y tsconfig con las mismas configuraciones que se utilizan en el material. Define un endpoint que responda a las solicitudes HTTP GET para la ruta <em>/api/ping</em>.</p>\n<p>El proyecto debería poder ejecutarse con scripts npm, tanto en modo de desarrollo y como código compilado, en modo de producción.</p>\n<h4>9.8: Patientor backend, paso 2</h4>\n<p>Haz un fork y clona el proyecto <a href=\"https://github.com/fullstack-hy2020/patientor\">patientor</a>. Inicia el proyecto con la ayuda del archivo README. </p>\n<p>Deberías poder usar el frontend sin un backend que funcione.</p>\n<p>Asegúrate de que el backend responda a la solicitud de ping que el <em>frontend</em> ha realizado al inicio. Verifica la herramienta para desarrolladores para asegurarte de que realmente funciona:</p>\n<picture><img src=\"/static/ecb7fbc31d1698f2ba09ee2ee77a4982/5a190/16a.png\" alt=\"dev tools mostrando que ping falló\" srcset=\"/static/ecb7fbc31d1698f2ba09ee2ee77a4982/772e8/16a.png 200w,\n/static/ecb7fbc31d1698f2ba09ee2ee77a4982/e17e5/16a.png 400w,\n/static/ecb7fbc31d1698f2ba09ee2ee77a4982/5a190/16a.png 800w,\n/static/ecb7fbc31d1698f2ba09ee2ee77a4982/c1b63/16a.png 1200w,\n/static/ecb7fbc31d1698f2ba09ee2ee77a4982/1acf3/16a.png 1596w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Es posible que también quieras echarle un vistazo a la pestaña <em>console</em>. Si algo falla, la <a href=\"/es/part3\">parte 3</a> del curso muestra cómo se puede resolver el problema.</p>\n</div>\n<div class=\"content\">\n<h3>Implementando la funcionalidad</h3>\n<p>Finalmente estamos listos para empezar a escribir código.</p>\n<p>Empecemos por lo básico. Ilari quiere poder realizar un seguimiento de sus experiencias en sus viajes aéreos.</p>\n<p>Quiere poder guardar las <em>entradas del diario</em> que contienen:</p>\n<ul>\n<li>La fecha de la entrada</li>\n<li>Condiciones meteorológicas (sunny, windy, cloudy, rainy or stormy)(soleado, ventoso, nublado, lluvioso o tormentoso)</li>\n<li>Visibilidad (great, good, ok or poor)(muy buena, buena, regular o mala)</li>\n<li>Texto libre detallando la experiencia</li>\n</ul>\n<p>Hemos obtenido algunos datos de muestra, que utilizaremos como base para construir.\nLos datos se guardan en formato JSON y se pueden encontrar <a href=\"https://github.com/fullstack-hy2020/misc/blob/master/diaryentries.json\">aquí</a>.</p>\n<p>Los datos tienen el siguiente aspecto</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2017-01-01\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"weather\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rainy\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"visibility\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"poor\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Pretty scary flight, I'm glad I'm alive\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2017-04-01\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"weather\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sunny\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"visibility\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"good\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Everything went better than expected, I'm learning much\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Comencemos por crear un endpoint que devuelva todas las entradas del diario de vuelo.</p>\n<p>Primero necesitamos tomar algunas decisiones sobre cómo estructurar nuestro código fuente. Es mejor colocar todo el código fuente en el directorio <em>src</em>, para que el código fuente no se mezcle con los archivos de configuración.\nTrasladaremos <em>index.ts</em> allí y haremos los cambios necesarios a los scripts npm.</p>\n<p>Colocaremos todos los <a href=\"/es/part4/estructura_de_la_aplicacion_backend_introduccion_a_las_pruebas\">routers</a> y los módulos que se encargan de manejar un conjunto de recursos específicos como <em>diaries</em>, bajo el directorio <em>src/routes</em>.\nEsto es un poco diferente a lo que hicimos en la <a href=\"/es/part4\">parte 4</a>, donde usamos el directorio <em>src/controllers</em>.</p>\n<p>El router que se encarga de todos los endpoints del diario está en <em>src/routes/diaries.ts</em> y tiene este aspecto:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fetching all diaries!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Saving a diary!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Enrutaremos todas las solicitudes al prefijo <em>/api/diaries</em> a ese router específico en <em>index.ts</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> diaryRouter <span class=\"token keyword\">from</span> <span class=\"token string\">'./routes/diaries'</span><span class=\"token punctuation\">;</span></span><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/ping'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someone pinged here'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/diaries'</span><span class=\"token punctuation\">,</span> diaryRouter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Y ahora, si hacemos una solicitud HTTP GET a <a href=\"http://localhost:3000/api/diaries\">http://localhost:3000/api/diaries</a>, deberíamos ver el mensaje <em>Fetching all diaries!</em>.</p>\n<p>A continuación, debemos comenzar a servir los datos (que se encuentran <a href=\"https://github.com/fullstack-hy2020/misc/blob/master/diaryentries.json\">aquí</a>) desde la aplicación. Obtendremos los datos y los guardaremos en <em>data/entries.json</em>.</p>\n<p>No escribiremos el código para las manipulaciones de datos en el router. En su lugar, crearemos un <em>service</em> que se encargue de la manipulación de datos.\nEs una práctica bastante común separar la \"lógica de negocios\" de el código del router en sus propios módulos, que a menudo se denominan <em>services</em>.\nEl nombre service se origina en el <a href=\"https://es.wikipedia.org/wiki/Dise%C3%B1o_guiado_por_el_dominio\">Diseño guiado por el dominio</a> y se hizo popular con el framework <a href=\"https://spring.io/\">Spring</a>.</p>\n<p>Vamos a crear un directorio <em>src/services</em> y coloquemos el archivo <em>diaryService.ts</em> en él.\nEl archivo contiene dos funciones para buscar y guardar entradas del diario:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> diaryData <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/diaries.json'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getEntries</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> diaryData<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addEntry</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  addEntry\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Pero algo no esta bien:</p>\n<picture><img src=\"/static/884eed5d4bb95087f3a48f39769a9a0d/5a190/17c.png\" alt=\"vscode pidiendo considerar el uso de resolveJsonModule ya que no puede encontrar el módulo\" srcset=\"/static/884eed5d4bb95087f3a48f39769a9a0d/772e8/17c.png 200w,\n/static/884eed5d4bb95087f3a48f39769a9a0d/e17e5/17c.png 400w,\n/static/884eed5d4bb95087f3a48f39769a9a0d/5a190/17c.png 800w,\n/static/884eed5d4bb95087f3a48f39769a9a0d/c1b63/17c.png 1200w,\n/static/884eed5d4bb95087f3a48f39769a9a0d/913a1/17c.png 1476w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>La sugerencia dice que podríamos querer usar <em>resolveJsonModule</em>. Agreguémoslo a nuestro tsconfig:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES6\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./build/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedLocals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedParameters\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitReturns\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noFallthroughCasesInSwitch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"resolveJsonModule\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Y nuestro problema está resuelto.</p>\n<blockquote>\n<p><strong>NB</strong>: Por alguna razón, VSCode tiende a quejarse de que no puede encontrar el archivo <em>../../data/entries.json</em> desde el servicio a pesar de que el archivo existe. Eso es un error en el editor y desaparece cuando se reinicia el editor.</p>\n</blockquote>\n<p>Anteriormente vimos cómo el compilador puede decidir el tipo de variable por el valor que se le asigna.\nDe manera similar, el compilador puede interpretar grandes conjuntos de datos que constan de objetos y arrays.\nDebido a esto, el compilador puede advertirnos si intentamos hacer algo sospechoso con los datos JSON que estamos manejando. Por ejemplo, si estamos manejando un array que contiene objetos de un tipo específico, y tratamos de agregar un objeto que no tiene todos los campos que tienen los otros objetos, o tiene conflictos de tipos (por ejemplo, un número donde debería haber un string), el compilador puede darnos una advertencia.</p>\n<p>Aunque el compilador es bastante bueno para asegurarse de que no hagamos nada no deseado, es más seguro definir los tipos de datos nosotros mismos.</p>\n<p>Actualmente tenemos una aplicación básica de Express con TypeScript que funciona, pero el código apenas esta <em>tipado</em>. Dado que sabemos qué tipo de datos deben aceptarse para los campos <em>weather</em> y <em>visibility</em>, no hay razón para que no incluyamos sus tipos en el código.</p>\n<p>Creemos un archivo para nuestros tipos, <em>types.ts</em>, donde definiremos todos nuestros tipos para este proyecto.</p>\n<p>Primero, vamos a tipear los valores de de <em>Weather</em> y <em>Visibility</em> utilizando un <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types\">union type</a> de las strings permitidas:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type Weather <span class=\"token operator\">=</span> <span class=\"token string\">'sunny'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'rainy'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'cloudy'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'windy'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'stormy'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> type Visibility <span class=\"token operator\">=</span> <span class=\"token string\">'great'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'good'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'ok'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'poor'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Y a partir de ahí podemos continuar creando un tipo DiaryEntry, que será un <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#interfaces\">interface</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DiaryEntry</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">weather</span><span class=\"token operator\">:</span> Weather<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">visibility</span><span class=\"token operator\">:</span> Visibility<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">comment</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ahora podemos intentar escribir nuestro json importado:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> diaryData <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/entries.json'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token literal-property property\">diaries</span><span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> diaryData<span class=\"token punctuation\">;</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> getEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> diaries<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addDiary</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  addDiary\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Pero dado que el JSON ya tiene sus valores declarados, asignar un tipo para el conjunto de datos da como resultado un error:</p>\n<picture><img src=\"/static/4a4d7fc6b2c39423984646fd6830f0d8/5a190/19b.png\" alt=\"vscode mostrando error string no asignable a weather\" srcset=\"/static/4a4d7fc6b2c39423984646fd6830f0d8/772e8/19b.png 200w,\n/static/4a4d7fc6b2c39423984646fd6830f0d8/e17e5/19b.png 400w,\n/static/4a4d7fc6b2c39423984646fd6830f0d8/5a190/19b.png 800w,\n/static/4a4d7fc6b2c39423984646fd6830f0d8/c1b63/19b.png 1200w,\n/static/4a4d7fc6b2c39423984646fd6830f0d8/5bd27/19b.png 1432w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>El final del mensaje de error revela el problema: los campos <em>weather</em> son incompatibles. En <em>DiaryEntry</em> especificamos que su tipo es <em>Weather</em>, pero el compilador de TypeScript había inferido que su tipo era <em>string</em>.</p>\n<p>Podemos solucionar el problema haciendo una <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-assertions\">afirmación de tipo</a>. Como ya <a href=\"/es/part9/primeros_pasos_con_type_script#asercion-de-tipos\">mencionamos</a> ¡las aserciones de tipo solo deben hacerse si estamos seguro de lo que estamos haciendo!</p>\n<p>Si afirmamos que el tipo de la variable <em>diaryData</em> es <em>DiaryEntry</em> con la palabra clave <em>as</em>, todo debería funcionar:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> diaryData <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/entries.json'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Weather<span class=\"token punctuation\">,</span> Visibility<span class=\"token punctuation\">,</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token literal-property property\">diaries</span><span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> diaryData <span class=\"token keyword\">as</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> getEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> diaries<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addDiary</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  addDiary\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nunca deberíamos usar la aserción de tipo a menos que no haya otra forma de proceder, ya que siempre existe el peligro de afirmar un tipo no apto para un objeto y causar un desagradable error de ejecución.\nSi bien el compilador confía en que sepas lo que está haciendo cuando usas <em>as</em>, al hacer esto, no estamos usando todo el poder de TypeScript, sino que confiamos en el desarrollador para asegurar el código.</p>\n<p>En nuestro caso, podríamos cambiar la forma en que exportamos nuestros datos para poder escribirlos dentro del archivo de datos.\nDado que no podemos usar typings en un archivo JSON, deberíamos convertir el archivo JSON en un archivo ts llamado <em>diaries.ts</em> que exporta los datos tipados de la siguiente manera:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../src/types\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token literal-property property\">diaryEntries</span><span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></span>  <span class=\"token punctuation\">{</span>\n      <span class=\"token string-property property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2017-01-01\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">\"weather\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rainy\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">\"visibility\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"poor\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">\"comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Pretty scary flight, I'm glad I'm alive\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> diaryEntries<span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>Ahora, cuando importamos el array, el compilador lo interpreta correctamente y los campos <em>weather</em> y <em>visibility</em> se entienden correctamente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> diaries <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/entries'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> getEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> diaries<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addDiary</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  addDiary\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ten en cuenta que si queremos poder guardar entradas sin un campo determinado, por ejemplo, <em>comment</em>, podríamos establecer el tipo del campo como <a href=\"https://www.typescriptlang.org/docs/handbook/2/objects.html#optional-properties\">opcional</a> agregando <em>?</em> a la declaración de tipo:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DiaryEntry</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">weather</span><span class=\"token operator\">:</span> Weather<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">visibility</span><span class=\"token operator\">:</span> Visibility<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  comment<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Módulos de Node y JSON</h3>\n<p>Es importante tomar nota de un problema que puede surgir al usar la opción de tsconfig <a href=\"https://www.typescriptlang.org/tsconfig/#resolveJsonModule\">resolveJsonModule</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"resolveJsonModule\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>De acuerdo con la documentación de node para los <a href=\"https://nodejs.org/api/modules.html#modules_file_modules\">módulos de archivo</a>, node intentará resolver los módulos por orden de extensiones:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"> <span class=\"token punctuation\">[</span><span class=\"token string\">\"js\"</span>, <span class=\"token string\">\"json\"</span>, <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Además de eso, de forma predeterminada, <em>ts-node</em> y <em>ts-node-dev</em> amplían la lista de posibles extensiones de módulo de node a:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"> <span class=\"token punctuation\">[</span><span class=\"token string\">\"js\"</span>, <span class=\"token string\">\"json\"</span>, <span class=\"token string\">\"node\"</span>, <span class=\"token string\">\"ts\"</span>, <span class=\"token string\">\"tsx\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<blockquote>\n<p><strong>NB</strong>: La validez de los archivos <em>.js</em>, <em>.json</em> y <em>.node</em> como módulos en Typescript depende de la configuración del entorno, incluidas las opciones de <em>tsconfig</em> como <em>allowJs</em> y <em>resolveJsonModule</em>.</p>\n</blockquote>\n<p>Considera una estructura de directorios plana que contiene archivos:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">  ├── myModule.json\n  └── myModule.ts</code></pre></div>\n<p>En TypeScript, con la opción <em>resolveJsonModule</em> establecida en true, el archivo <em>myModule.json</em> se convierte en un módulo de node válido. Ahora, imagina un escenario en el que deseamos utilizar el archivo <em>myModule.ts</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> myModule <span class=\"token keyword\">from</span> <span class=\"token string\">\"./myModule\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Mirando de cerca el orden de las extensiones de módulo de node:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"> <span class=\"token punctuation\">[</span><span class=\"token string\">\"js\"</span>, <span class=\"token string\">\"json\"</span>, <span class=\"token string\">\"node\"</span>, <span class=\"token string\">\"ts\"</span>, <span class=\"token string\">\"tsx\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Notamos que la extensión de archivo <em>.json</em> tiene prioridad sobre <em>.ts</em>, por lo que se importará <em>myModule.json</em> y no <em>myModule.ts</em>.</p>\n<p>Para evitar errores, se recomienda que dentro de un directorio plano, cada archivo con una extensión de módulo de node válida tenga un nombre de archivo único.</p>\n<h3>Tipos de utilidad</h3>\n<p>A veces, es posible que deseemos utilizar una modificación específica de un tipo.\nPor ejemplo, considera una página para enumerar algunos datos, algunos de los cuales son confidenciales y otros no.\nEs posible que deseemos estar seguros de que no se utilizan ni se muestran datos sensibles. Podríamos <em>elegir</em> los campos de un tipo que permitimos que se utilicen para hacer cumplir esto.\nPodemos hacer eso usando el tipo de utilidad <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys\">Pick</a>.</p>\n<p>En nuestro proyecto, deberíamos considerar que Ilari podría querer crear una lista de todas las entradas de su diario <em>excluyendo</em> el campo de comentarios, ya que durante un vuelo muy aterrador, podría terminar escribiendo algo que no necesariamente querría mostrarle a alguien más.</p>\n<p>El tipo de utilidad <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys\">Pick</a> nos permite elegir qué campos de un tipo existente queremos usar.\nPick se puede utilizar para construir un tipo completamente nuevo o para informar a una función lo que debería devolver en tiempo de ejecución.\nLos tipos de utilidad son un tipo especial, pero se pueden utilizar como los tipos normales.</p>\n<p>En nuestro caso, para crear una versión \"censurada\" de <em>DiaryEntry</em> para pantallas públicas, podemos usar <em>Pick</em> en la declaración de la función:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Pick<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'date'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'weather'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'visibility'</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>y el compilador esperaría que la función devuelva un array de valores del tipo <em>DiaryEntry</em> modificado, que incluye solo los cuatro campos seleccionados.</p>\n<p>En este caso, solo queremos excluir un campo, por lo que seria aún mejor utilizar el tipo de utilidad <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys\">Omit</a>, con el cual podemos declarar qué campos queremos excluir:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Omit<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token punctuation\">,</span> <span class=\"token string\">'comment'</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Para mejorar la legibilidad, definitivamente deberiamos definir un <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-aliases\">alias de tipo</a> llamado <em>NonSensitiveDiaryEntry</em> en el archivo <em>types.ts</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type NonSensitiveDiaryEntry <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token punctuation\">,</span> <span class=\"token string\">'comment'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>El código ahora es mucho más claro y más descriptivo:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> diaries <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/entries'</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NonSensitiveDiaryEntry<span class=\"token punctuation\">,</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> getEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> diaries<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> NonSensitiveDiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">return</span> diaries<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addDiary</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  addDiary<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  getNonSensitiveEntries</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Una cosa en nuestra aplicación es motivo de preocupación. En <em>getNonSensitiveEntries</em>, estamos devolviendo las entradas completas del diario, ¡y <em>no se da ningún error</em> a pesar del typing!</p>\n<p>Esto sucede porque <a href=\"http://www.typescriptlang.org/docs/handbook/type-compatibility.html\">TypeScript solo verifica</a> si tenemos todos los campos obligatorios o no, pero los campos extra no están prohibidos. En nuestro caso esto significa que <em>no está prohibido</em> devolver un objeto de tipo <em>DiaryEntry[]</em>, pero si intentáramos acceder al campo <em>comment</em>, no sería posible porque estaríamos accediendo a un campo que TypeScript desconoce incluso aunque existe.</p>\n<p>Desafortunadamente, esto puede provocar un comportamiento no deseado si no eres consciente de lo que estas haciendo; la situación es válida en lo que respecta a TypeScript, pero lo más probable es que estés permitiendo un uso no deseado.\nSi ahora devolviéramos todas las entradas del diario de la función <em>getNonSensitiveEntries</em> al frontend, estaríamos <em>filtrando los campos no deseados</em> al navegador solicitante, ¡incluso aunque nuestros tipos parezcan implicar lo contrario!</p>\n<p>Debido a que TypeScript no modifica los datos reales, sino solo su tipo, debemos excluir los campos nosotros mismos:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> diaries <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/entries.ts'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NonSensitiveDiaryEntry<span class=\"token punctuation\">,</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span>\n\n<span class=\"token keyword\">const</span> getEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> diaries\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> NonSensitiveDiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> diaries<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">,</span> weather<span class=\"token punctuation\">,</span> visibility <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    id<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    date<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    weather<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    visibility<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addDiary</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  getNonSensitiveEntries<span class=\"token punctuation\">,</span>\n  addDiary\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Si ahora intentamos devolver estos datos con el tipo básico <em>DiaryEntry</em>, es decir, si escribiéramos la función de la siguiente manera:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></code></pre></div>\n<p>obtendríamos el siguiente error:</p>\n<picture><img src=\"/static/4cf0e3835086dc22ca9c00d89dabd716/5a190/22b.png\" alt=\"error de vscode - comment esta declarado aquí\" srcset=\"/static/4cf0e3835086dc22ca9c00d89dabd716/772e8/22b.png 200w,\n/static/4cf0e3835086dc22ca9c00d89dabd716/e17e5/22b.png 400w,\n/static/4cf0e3835086dc22ca9c00d89dabd716/5a190/22b.png 800w,\n/static/4cf0e3835086dc22ca9c00d89dabd716/c1b63/22b.png 1200w,\n/static/4cf0e3835086dc22ca9c00d89dabd716/ce0a7/22b.png 1590w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Nuevamente, la última línea del mensaje de error es la más útil. Deshagamos esta modificación no deseada.</p>\n<p>Ten en cuenta que si haces el campo comment opcional (usando el operador <em>?</em>), todo funciona bien.</p>\n<p>Los tipos de utilidades incluyen muchas herramientas útiles y definitivamente vale la pena tomarse un tiempo para estudiar <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html\">la documentación</a>.</p>\n<p>Finalmente, podemos completar la ruta que devuelve todas las entradas del diario:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> diaryService <span class=\"token keyword\">from</span> <span class=\"token string\">'../services/diaryService'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">getNonSensitiveEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Saving a diary!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span class=\"token punctuation\">;</span></code></pre></div>\n<p>La respuesta es lo que esperamos que sea</p>\n<picture><img src=\"/static/2874edda399d6b828630de1496dbc188/5a190/26.png\" alt=\"navegador en api/diaries muestra tres objetos json\" srcset=\"/static/2874edda399d6b828630de1496dbc188/772e8/26.png 200w,\n/static/2874edda399d6b828630de1496dbc188/e17e5/26.png 400w,\n/static/2874edda399d6b828630de1496dbc188/5a190/26.png 800w,\n/static/2874edda399d6b828630de1496dbc188/c1b63/26.png 1200w,\n/static/2874edda399d6b828630de1496dbc188/29007/26.png 1600w,\n/static/2874edda399d6b828630de1496dbc188/49ee2/26.png 1618w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n</div>\n<div class=\"tasks\">\n<h3>Ejercicios 9.10.-9.11.</h3>\n<p>De manera similar al servicio de vuelo de Ilari, no usamos una base de datos real en nuestra aplicación, sino que usamos datos codificados, es decir, en los archivos <a href=\"https://github.com/fullstack-hy2020/misc/blob/master/diagnoses.ts\">diagnoses.ts</a> y <a href=\"https://github.com/fullstack-hy2020/misc/blob/master/patients.ts\">patients.ts</a>. Obten los archivos y guárdalos en un directorio llamado <em>data</em> en tu proyecto. Todas la modificaciones de datos se pueden realizar en la memoria de ejecución, por lo que durante esta parte <em>no es necesario escribir a un archivo</em>.</p>\n<h4>9.10: Patientor backend, paso 3</h4>\n<p>Crea un tipo <em>Diagnose</em> y utilízalo para crear un endpoint <em>/api/diagnoses</em> para obtener todos los diagnósticos con HTTP GET.</p>\n<p>Estructura tu código correctamente utilizando directorios y archivos con nombres apropiados.</p>\n<p><strong>Ten en cuenta</strong> que <em>diagnoses</em> pueden contener o no el campo <em>latin</em>. Es posible que quieras utilizar <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#optional-properties\">propiedades opcionales</a> en la definición de tipos.</p>\n<h4>9.11: Patientor backend, paso 4</h4>\n<p>Crea el tipo de datos <em>Patient</em> y configura un endpoint GET <em>/api/patients</em> que devuelva todos los pacientes al frontend, excluyendo el campo <em>ssn</em>. Utiliza un <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html\">tipo de utilidad</a> para asegurarte de que estas seleccionando y devolviendo solo los campos deseados.</p>\n<p>En este ejercicio, puedes asumir que el campo <em>gender</em> tiene el tipo <em>string</em>.</p>\n<p>Prueba el endpoint con el navegador y asegúrate de que <em>ssn</em> no esté incluido en la respuesta:</p>\n<picture><img src=\"/static/bc4ce99035b5419acfa2d65698c5cb2d/5a190/22g.png\" alt=\"navegador en api/patients no muestra ssn en el json de pacientes\" srcset=\"/static/bc4ce99035b5419acfa2d65698c5cb2d/772e8/22g.png 200w,\n/static/bc4ce99035b5419acfa2d65698c5cb2d/e17e5/22g.png 400w,\n/static/bc4ce99035b5419acfa2d65698c5cb2d/5a190/22g.png 800w,\n/static/bc4ce99035b5419acfa2d65698c5cb2d/c1b63/22g.png 1200w,\n/static/bc4ce99035b5419acfa2d65698c5cb2d/37048/22g.png 1352w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Después de crear el endpoint, asegúrate de que el <em>frontend</em> muestre la lista de pacientes:</p>\n<picture><img src=\"/static/c6b49beac1a640408462ec316e341d7e/5a190/22h.png\" alt=\"navegador mostrando la lista de pacientes\" srcset=\"/static/c6b49beac1a640408462ec316e341d7e/772e8/22h.png 200w,\n/static/c6b49beac1a640408462ec316e341d7e/e17e5/22h.png 400w,\n/static/c6b49beac1a640408462ec316e341d7e/5a190/22h.png 800w,\n/static/c6b49beac1a640408462ec316e341d7e/c1b63/22h.png 1200w,\n/static/c6b49beac1a640408462ec316e341d7e/29007/22h.png 1600w,\n/static/c6b49beac1a640408462ec316e341d7e/169e3/22h.png 1682w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n</div>\n<div class=\"content\">\n<h3>Previniendo un resultado undefined accidental</h3>\n<p>Extendamos el backend para admitir la obtención de una entrada específica con una solicitud HTTP GET a la ruta <em>api/diaries/:id</em>.</p>\n<p>El DiaryService debe ampliarse con la función <em>findById</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> findById <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">DiaryEntry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> entry <span class=\"token operator\">=</span> diaries<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> entry<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  getNonSensitiveEntries<span class=\"token punctuation\">,</span>\n  addDiary<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  findById</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Pero una vez más, surge un nuevo problema:</p>\n<picture><img src=\"/static/ffec5cdfddb4a1c59d7cab5702849a32/5a190/23e.png\" alt=\"error de vscode no se puede asignar undefined a DiaryEntry\" srcset=\"/static/ffec5cdfddb4a1c59d7cab5702849a32/772e8/23e.png 200w,\n/static/ffec5cdfddb4a1c59d7cab5702849a32/e17e5/23e.png 400w,\n/static/ffec5cdfddb4a1c59d7cab5702849a32/5a190/23e.png 800w,\n/static/ffec5cdfddb4a1c59d7cab5702849a32/c1b63/23e.png 1200w,\n/static/ffec5cdfddb4a1c59d7cab5702849a32/ea964/23e.png 1312w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>El problema es que no hay garantía de que se pueda encontrar una entrada con el id especificado.\nEs bueno que seamos conscientes de este problema potencial ya en la fase de compilación. Sin TypeScript no se nos advertiría sobre este problema y, en el peor de los casos, podríamos haber terminado devolviendo un objeto <em>undefined</em> en lugar de informar al usuario de que no se ha encontrado la entrada especificada.</p>\n<p>En primer lugar, en casos como este, debemos decidir cuál debe ser el <em>valor de retorno</em> si no se encuentra un objeto y cómo se debe manejar el caso.\nEl método <em>find</em> de un array devuelve <em>undefined</em> si no se encuentra el objeto, y esto está bien.\nPodemos resolver nuestro problema tipeando el valor de retorno de la siguiente manera:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> findById <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DiaryEntry <span class=\"token operator\">|</span> <span class=\"token parameter\"><span class=\"token keyword\">undefined</span></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> entry <span class=\"token operator\">=</span> diaries<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> entry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El controlador de ruta es el siguiente</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> diaryService <span class=\"token keyword\">from</span> <span class=\"token string\">'../services/diaryService'</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> diary <span class=\"token operator\">=</span> diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>diary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>diary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">sendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Agregando un nuevo diario</h3>\n<p>Comencemos a construir el endpoint HTTP POST para agregar nuevas entradas al diario de vuelo.\nLas nuevas entradas deben tener el mismo tipo que los datos existentes.</p>\n<p>El manejo del código de la respuesta es el siguiente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> date<span class=\"token punctuation\">,</span> weather<span class=\"token punctuation\">,</span> visibility<span class=\"token punctuation\">,</span> comment <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> addedEntry <span class=\"token operator\">=</span> diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">addDiary</span><span class=\"token punctuation\">(</span>\n    date<span class=\"token punctuation\">,</span>\n    weather<span class=\"token punctuation\">,</span>\n    visibility<span class=\"token punctuation\">,</span>\n    comment<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>addedEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>El método correspondiente en <em>diaryService</em> se ve así:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  NonSensitiveDiaryEntry<span class=\"token punctuation\">,</span>\n  DiaryEntry<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  Visibility<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  Weather</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">const</span> addEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">weather</span><span class=\"token operator\">:</span> Weather<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">visibility</span><span class=\"token operator\">:</span> Visibility<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">comment</span><span class=\"token operator\">:</span> string\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">DiaryEntry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">const</span> newDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>diaries<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token punctuation\">,</span>\n    weather<span class=\"token punctuation\">,</span>\n    visibility<span class=\"token punctuation\">,</span>\n    comment<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  diaries<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newDiaryEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> newDiaryEntry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Como puedes ver, la función <em>addDiary</em> se está volviendo bastante difícil de leer ahora que tenemos todos los campos como parámetros separados. Podría ser mejor enviar los datos como un objeto a la función:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> date<span class=\"token punctuation\">,</span> weather<span class=\"token punctuation\">,</span> visibility<span class=\"token punctuation\">,</span> comment <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> addedEntry <span class=\"token operator\">=</span> diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">addDiary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>    date<span class=\"token punctuation\">,</span>\n    weather<span class=\"token punctuation\">,</span>\n    visibility<span class=\"token punctuation\">,</span>\n    comment<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>addedEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Pero espera, ¿cuál es el tipo de este objeto? No es exactamente una <em>DiaryEntry</em>, ya que todavía le falta el campo de <em>id</em>. Podría ser útil crear un nuevo tipo, <em>NewDiaryEntry</em>, para una entrada que aún no ha sido guardada. Vamos a crearlo en <em>types.ts</em> usando el tipo <em>DiaryEntry</em> existente y el tipo de utilidad <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys\">Omit</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type NewDiaryEntry <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ahora podemos usar el nuevo tipo en nuestro DiaryService y desestructurar el nuevo objeto de entrada al crear una entrada para ser guardada:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NewDiaryEntry<span class=\"token punctuation\">,</span> NonSensitiveDiaryEntry<span class=\"token punctuation\">,</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> addDiary <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> entry<span class=\"token operator\">:</span> NewDiaryEntry <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">DiaryEntry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> newDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>diaries<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">...</span>entry</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  diaries<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newDiaryEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> newDiaryEntry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>¡Ahora el código se ve mucho más limpio!</p>\n<p>Aún tenemos una queja en nuestro codigo:</p>\n<picture><img src=\"/static/d30c24693f9f3a515f2b4dad560655a1/5a190/43.png\" alt=\"error de vscode asignación insegura de un valor any\" srcset=\"/static/d30c24693f9f3a515f2b4dad560655a1/772e8/43.png 200w,\n/static/d30c24693f9f3a515f2b4dad560655a1/e17e5/43.png 400w,\n/static/d30c24693f9f3a515f2b4dad560655a1/5a190/43.png 800w,\n/static/d30c24693f9f3a515f2b4dad560655a1/c1b63/43.png 1200w,\n/static/d30c24693f9f3a515f2b4dad560655a1/29007/43.png 1600w,\n/static/d30c24693f9f3a515f2b4dad560655a1/2d912/43.png 1772w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>La causa es la regla de ESlint <a href=\"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-unsafe-assignment.md\">@typescript-eslint/no-unsafe-assignment</a> que nos previene de asignar los campos del body de una solicitud a las variables.</p>\n<p>Por el momento, simplemente ignoremos la regla de ESlint en todo el archivo, podemos hacerlo agregando lo siguiente a la primer linea del archivo:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* eslint-disable @typescript-eslint/no-unsafe-assignment */</span></code></pre></div>\n<p>Para procesar los datos entrantes debemos tener configurado el middleware <em>json</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> diaryRouter <span class=\"token keyword\">from</span> <span class=\"token string\">'./routes/diaries'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/diaries'</span><span class=\"token punctuation\">,</span> diaryRouter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>¡Ahora la aplicación está lista para recibir solicitudes HTTP POST para nuevas entradas del diario con el tipo correcto!</p>\n<h3>Solicitudes de revisión</h3>\n<p>Hay muchas cosas que pueden malir sal cuando aceptamos datos de fuentes externas.\nLas aplicaciones rara vez funcionan completamente por sí solas y, nos vemos obligados a vivir con el hecho de que no se puede confiar plenamente en los datos de fuentes externas a nuestro sistema.\nCuando recibimos datos de una fuente externa, no hay forma de que ya estén tipados cuando los recibimos. Necesitamos tomar decisiones sobre cómo manejar la incertidumbre que viene con esto.</p>\n<p>La regla de ESlint deshabilitada nos indicaba que la siguiente asignación es riesgosa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> newDiaryEntry <span class=\"token operator\">=</span> diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">addDiary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  date<span class=\"token punctuation\">,</span>\n  weather<span class=\"token punctuation\">,</span>\n  visibility<span class=\"token punctuation\">,</span>\n  comment<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nos gustaría tener la certeza de que el objeto en una solicitud POST tiene el tipo correcto. Ahora definamos una función <em>toNewDiaryEntry</em> que reciba un request body como parámetro y que devuelva un objeto <em>NewDiaryEntry</em> apropiadamente tipado. La función será definida en el archivo <em>utils.ts</em></p>\n<p>La definición de la ruta utiliza la función de la siguiente manera:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> toNewDiaryEntry <span class=\"token keyword\">from</span> <span class=\"token string\">'../utils'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// ...</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> newDiaryEntry <span class=\"token operator\">=</span> <span class=\"token function\">toNewDiaryEntry</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> addedEntry <span class=\"token operator\">=</span> diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">addDiary</span><span class=\"token punctuation\">(</span>newDiaryEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>addedEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> errorMessage <span class=\"token operator\">=</span> <span class=\"token string\">'Something went wrong.'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      errorMessage <span class=\"token operator\">+=</span> <span class=\"token string\">' Error: '</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ahora, también podemos remover la primera linea que ignora la regla de ESlint <em>no-unsafe-assignment</em>.</p>\n<p>Dado que ahora estamos escribiendo código seguro y tratando de asegurarnos de obtener exactamente los datos que queremos de las solicitudes, debemos comenzar a procesar y validar cada campo que esperamos recibir.</p>\n<p>El esqueleto de la función <em>toNewDiaryEntry</em> se ve de la siguiente manera:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NewDiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> toNewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">NewDiaryEntry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">newEntry</span><span class=\"token operator\">:</span> NewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> newEntry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> toNewDiaryEntry<span class=\"token punctuation\">;</span></code></pre></div>\n<p>La función debe procesar cada campo y asegurarse de que el valor de retorno sea exactamente del tipo <em>NewDiaryEntry</em>. Esto significa que debemos verificar cada campo por separado.</p>\n<p>Una vez más tenemos un problema de tipo: ¿cuál es el tipo del parámetro <em>objeto</em>? Dado que el <em>objeto</em> <strong>es</strong> el request body, Express lo ha escrito como <em>any</em>. Dado que la idea de esta función es mapear campos de tipo desconocido a campos del tipo correcto y verificar si están definidos como se espera, este podría ser el caso poco común en el que *queremos permitir el tipo <strong>any</strong> *.</p>\n<p>Sin embargo, si escribimos el objeto como <em>any</em>, ESlint nos da una queja:</p>\n<picture><img src=\"/static/411f26618362a029ea8814bc338c49d4/5a190/61new.png\" alt=\"vscode eslint mostrando objeto debe ser tipado non-any y que esta definido pero nunca usado\" srcset=\"/static/411f26618362a029ea8814bc338c49d4/772e8/61new.png 200w,\n/static/411f26618362a029ea8814bc338c49d4/e17e5/61new.png 400w,\n/static/411f26618362a029ea8814bc338c49d4/5a190/61new.png 800w,\n/static/411f26618362a029ea8814bc338c49d4/c1b63/61new.png 1200w,\n/static/411f26618362a029ea8814bc338c49d4/29007/61new.png 1600w,\n/static/411f26618362a029ea8814bc338c49d4/61583/61new.png 1616w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Podríamos ignorar la regla de ESlint pero una idea mejor es seguir uno de los consejos que el editor nos da en el <em>Quick Fix</em> y definir el tipo del parámetro como <em>unknown</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NewDiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> toNewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>object<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">NewDiaryEntry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">newEntry</span><span class=\"token operator\">:</span> NewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> newEntry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> toNewDiaryEntry<span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://www.typescriptlang.org/docs/handbook/2/functions.html#unknown\">unknown</a> es el tipo ideal para nuestra situación en la validación del input, ya que aún no tenemos que definir el tipo para que sea de tipo <em>any</em>, en cambio podemos verificar el tipo primero y luego confirmar que es del tipo que esperábamos.\nCon el uso de <em>unknown</em>, tampoco tenemos que preocuparnos por la regla de ESlint <em>@typescript-eslint/no-explicit-any</em>, ya que no estamos usando <em>any</em>. Sin embargo, quizás tengamos que usar <em>any</em> en algunos casos donde aun no estamos seguros acerca del tipo y necesitemos acceso a las propiedades de un objeto de tipo <em>any</em> para validar o controlar el tipo de los valores de las propiedades.</p>\n<blockquote>\n<h4>Una nota al margen de el editor</h4>\n<p><em>Si eres como yo y odias tener código que esté roto por un tiempo largo debido a tener un tipado incompleto, podrías comenzar por \"falsificar\" la función</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> toNewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>object<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">NewDiaryEntry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// now object is no longer unused</span>\n <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">newEntry</span><span class=\"token operator\">:</span> NewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token literal-property property\">weather</span><span class=\"token operator\">:</span> <span class=\"token string\">'cloudy'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// fake the return value</span>\n   <span class=\"token literal-property property\">visibility</span><span class=\"token operator\">:</span> <span class=\"token string\">'great'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token string\">'2022-1-1'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">comment</span><span class=\"token operator\">:</span> <span class=\"token string\">'fake news'</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">return</span> newEntry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>Entonces, antes de de que los datos reales y los tipos estén listos para ser usados, simplemente estoy retornando algo que se que tiene el tipo correcto. El código permanece operacional todo el tiempo y mi presión sanguínea vuelve a niveles normales</em></p>\n</blockquote>\n<h3>Guardias de tipos</h3>\n<p>Comencemos a crear los parsers para cada uno de los campos de <em>object: unknown</em>.</p>\n<p>Para validar el campo <em>comment</em>, debemos verificar que exista y asegurarnos de que sea del tipo <em>string</em>.</p>\n<p>La función debería verse más o menos así:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parseComment <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>comment<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>comment <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect or missing comment'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> comment<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>La función obtiene un parámetro de tipo <em>unknown</em> y lo devuelve como tipo <em>string</em> si existe y es del tipo correcto.</p>\n<p>La función de validación de string se ve así:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isString <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>text<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> text is <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> text <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">||</span> text <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>La función es una <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates\">guardia de tipo</a>. Eso significa que es una función que devuelve un booleano <em>y</em> que tiene un <em>predicado de tipo</em> como tipo de retorno. En nuestro caso, el tipo de predicado es:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">text is string</code></pre></div>\n<p>La forma general de un predicado de tipo es <em>parameterName is Type</em> donde el <em>parameterName</em> es el nombre del parámetro de función y <em>Type</em> es el tipo objetivo.</p>\n<p>Si la función de guardia de tipo devuelve true, el compilador de TypeScript sabe que la variable probada tiene el tipo que se definió en el predicado de tipo.</p>\n<p>Antes de que se llame a la guardia de tipo, el tipo de la variable <em>comment</em> es desconocido:</p>\n<picture><img src=\"/static/e5e9792b4f550da4f7e58d0b99bf8087/5a190/28e-21.png\" alt=\"vscode cursor sobre isString(comment) muestra tipo unknown\" srcset=\"/static/e5e9792b4f550da4f7e58d0b99bf8087/772e8/28e-21.png 200w,\n/static/e5e9792b4f550da4f7e58d0b99bf8087/e17e5/28e-21.png 400w,\n/static/e5e9792b4f550da4f7e58d0b99bf8087/5a190/28e-21.png 800w,\n/static/e5e9792b4f550da4f7e58d0b99bf8087/c1b63/28e-21.png 1200w,\n/static/e5e9792b4f550da4f7e58d0b99bf8087/f1c64/28e-21.png 1390w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Pero después de la llamada, si el código pasa de la excepción (es decir, la guardia de tipo ha devuelto true), entonces el compilador sabe que <em>comment</em> es del tipo <em>string</em>:</p>\n<picture><img src=\"/static/2185931be98d1cb3980200dd02efca67/5a190/29e-21.png\" alt=\"vscode cursor sobre return comment muestra tipo string\" srcset=\"/static/2185931be98d1cb3980200dd02efca67/772e8/29e-21.png 200w,\n/static/2185931be98d1cb3980200dd02efca67/e17e5/29e-21.png 400w,\n/static/2185931be98d1cb3980200dd02efca67/5a190/29e-21.png 800w,\n/static/2185931be98d1cb3980200dd02efca67/c1b63/29e-21.png 1200w,\n/static/2185931be98d1cb3980200dd02efca67/1134b/29e-21.png 1470w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>El uso de una guardia de tipo que devuelve un predicado de tipo es una forma de hacer el <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html\">estrechamiento de tipos</a>, eso es, darle a una variable un tipo más estricto o preciso. Como pronto veremos, también hay otras <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html\">guardias de tipo</a> disponibles.</p>\n<blockquote>\n<h4>Nota al margen: probando si algo es un string</h4>\n<p><em>¿Por qué tenemos dos condiciones en la guardia de tipo string?</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isString <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>text<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> text is <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\"> <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> text <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">||</span> text <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>¿No seria suficiente escribir la guardia así?</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isString <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>text<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> text is <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> text <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>*Probablemente, la forma más simple es suficientemente buena para todos los casos prácticos. Sin embargo, si queremos estar absolutamente seguros, ambas condiciones son necesarias. Hay dos formas diferentes de crear strings en JavaScript, una como primitivo y otra como objeto, los cuales funcionan un poco diferente cuando son comparadas con los operadores <strong>typeof</strong> y <strong>instanceof</strong>:*</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"I'm a string primitive\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm a String Object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> returns <span class=\"token string\">'string'</span>\n<span class=\"token keyword\">typeof</span> b<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> returns <span class=\"token string\">'object'</span>\na <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> returns <span class=\"token boolean\">false</span>\nb <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> returns <span class=\"token boolean\">true</span></code></pre></div>\n<p><em>Sin embargo, es muy poco probable que alguien cree un string con una función constructora. Es más probable que la version más simple de la guardia de tipo sea suficiente</em></p>\n</blockquote>\n<p>A continuación, consideremos el campo <em>date</em>.\nParsear y validar el objeto date es bastante similar a lo que hicimos con los comentarios.\nDado que TypeScript realmente no conoce un tipo para una fecha, debemos tratarlo como un <em>string</em>.\nSin embargo, deberíamos seguir utilizando la validación a nivel de JavaScript para comprobar si el formato de la fecha es aceptable.</p>\n<p>Agregaremos las siguientes funciones:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isDate <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>date<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">boolean</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> parseDate <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>date<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>date <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isDate</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect or missing date: '</span> <span class=\"token operator\">+</span> date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> date<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>El código no es nada especial. Lo único para mencionar es que aquí no podemos usar una guardia de tipo basada en el predicado de tipos, ya que una fecha en este caso solo se considera como un <em>string</em>. Ten en cuenta que aunque la función <em>parseDate</em> acepta la variable <em>date</em> como <em>unknown</em>, después de verificar el tipo con <em>isString</em>, su tipo se establece como <em>string</em>, por lo que podemos pasar la variable a la función <em>isDate</em> que requiere un string sin ningún problema.</p>\n<p>Finalmente, estamos listos para pasar a los dos últimos tipos, <em>Weather</em> y <em>Visibility</em>.</p>\n<p>Nos gustaría que la validación y el parsing funcionaran de la siguiente manera:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parseWeather <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>weather<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">Weather</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>weather <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>weather<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isWeather</span><span class=\"token punctuation\">(</span>weather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect or missing weather: '</span> <span class=\"token operator\">+</span> weather<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> weather<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>La pregunta es, ¿cómo podemos validar que el string tiene una forma específica?\nUna forma posible de escribir la guardia de tipo sería la siguiente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isWeather <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>str<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> str is <span class=\"token parameter\">Weather</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'sunny'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rainy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cloudy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'stormy'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Esto funcionaría bien, pero el problema es que la lista de posibles condiciones meteorológicas no se mantiene necesariamente sincronizada con las definiciones de tipo si el tipo se modifica.\nCiertamente, esto no es bueno, ya que nos gustaría tener una sola fuente para todos los posibles tipos de clima.</p>\n<h3>Enum</h3>\n<p>En nuestro caso, una mejor solución sería mejorar el tipo <em>Weather</em>. En lugar de un alias de tipo, deberíamos usar <a href=\"https://www.typescriptlang.org/docs/handbook/enums.html\">enum</a> de Typescript, que nos permite usar los valores reales en nuestro código en tiempo de ejecución, no solo en la fase de compilación.</p>\n<p>Redefinamos el tipo <em>Weather</em> de la siguiente manera:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">enum</span> Weather <span class=\"token punctuation\">{</span>\n  Sunny <span class=\"token operator\">=</span> <span class=\"token string\">'sunny'</span><span class=\"token punctuation\">,</span>\n  Rainy <span class=\"token operator\">=</span> <span class=\"token string\">'rainy'</span><span class=\"token punctuation\">,</span>\n  Cloudy <span class=\"token operator\">=</span> <span class=\"token string\">'cloudy'</span><span class=\"token punctuation\">,</span>\n  Stormy <span class=\"token operator\">=</span> <span class=\"token string\">'stormy'</span><span class=\"token punctuation\">,</span>\n  Windy <span class=\"token operator\">=</span> <span class=\"token string\">'windy'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ahora podemos comprobar que un string es uno de los valores aceptados, y la guardia de tipo se puede escribir así:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isWeather <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>param<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> param is <span class=\"token parameter\">Weather</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>Weather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ten en cuenta que necesitamos la representación en forma de string de los valores de enum para hacer la comparación, por eso es que hacemos el mapeo.</p>\n<p>Un problema emerge luego de estos cambios. Nuestros datos en el archivo <em>data/entries.ts</em> ya no se corresponden con nuestros tipos:</p>\n<picture><img src=\"/static/2d23be7abdebf83abf928340dce1d30c/5a190/30.png\" alt=\"error de vscode rainy no es asignable al tipo Weather\" srcset=\"/static/2d23be7abdebf83abf928340dce1d30c/772e8/30.png 200w,\n/static/2d23be7abdebf83abf928340dce1d30c/e17e5/30.png 400w,\n/static/2d23be7abdebf83abf928340dce1d30c/5a190/30.png 800w,\n/static/2d23be7abdebf83abf928340dce1d30c/c1b63/30.png 1200w,\n/static/2d23be7abdebf83abf928340dce1d30c/536c7/30.png 1480w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Esto se debe a que no podemos simplemente asumir que un string es un enum.</p>\n<p>Podemos arreglar esto mapeando los elementos de los datos iniciales a el tipo <em>DiaryEntry</em> con la función <em>toNewDiaryEntry</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../src/types\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> toNewDiaryEntry <span class=\"token keyword\">from</span> <span class=\"token string\">\"../src/utils\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n      <span class=\"token string-property property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2017-01-01\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">\"weather\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rainy\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">\"visibility\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"poor\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">\"comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Pretty scary flight, I'm glad I'm alive\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">diaryEntries</span><span class=\"token operator\">:</span> DiaryEntry <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> object <span class=\"token operator\">=</span> <span class=\"token function\">toNewDiaryEntry</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> DiaryEntry<span class=\"token punctuation\">;</span>\n  object<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> object<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> diaryEntries<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ten en cuenta que dado que <em>toNewDiaryEntry</em> devuelve un objeto del tipo <em>NewDiaryEntry</em>, debemos afirmar que sea del tipo <em>DiaryEntry</em> con el operador <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-assertions\">as</a>.</p>\n<p>Enums son típicamente utilizados cuando hay un conjunto de valores predeterminados que no se espera que cambien el futuro. Usualmente, son utilizados para valores mucho más estrictos en cuanto a posibles cambios (por ejemplo, días de la semana, meses, direcciones cardinales), pero ya que nos ofrecen una gran forma de validar nuestros valores entrantes, también podríamos usarlos en nuestro caso.</p>\n<p>Aún debemos darle el mismo tratamiento a <em>Visibility</em>. El enum se ve de la siguiente forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">enum</span> Visibility <span class=\"token punctuation\">{</span>\n  Great <span class=\"token operator\">=</span> <span class=\"token string\">'great'</span><span class=\"token punctuation\">,</span>\n  Good <span class=\"token operator\">=</span> <span class=\"token string\">'good'</span><span class=\"token punctuation\">,</span>\n  Ok <span class=\"token operator\">=</span> <span class=\"token string\">'ok'</span><span class=\"token punctuation\">,</span>\n  Poor <span class=\"token operator\">=</span> <span class=\"token string\">'poor'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La guardia de tipo y el parser están debajo:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isVisibility <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>param<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> param is <span class=\"token parameter\">Visibility</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>Visibility<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> parseVisibility <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>visibility<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">Visibility</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visibility <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>visibility<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isVisibility</span><span class=\"token punctuation\">(</span>visibility<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect or missing visibility: '</span> <span class=\"token operator\">+</span> visibility<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> visibility<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Y finalmente, podemos finalizar la función <em>toNewDiaryEntry</em> que se ocupa de validar y parsear los campos del body de POST. Sin embargo, aún tenemos una cosa más de la que ocuparnos. Si intentamos acceder a los campos del parámetro <em>object</em> de la siguiente manera:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> toNewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>object<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">NewDiaryEntry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">newEntry</span><span class=\"token operator\">:</span> NewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">comment</span><span class=\"token operator\">:</span> <span class=\"token function\">parseComment</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token function\">parseDate</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">weather</span><span class=\"token operator\">:</span> <span class=\"token function\">parseWeather</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>weather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">visibility</span><span class=\"token operator\">:</span> <span class=\"token function\">parseVisibility</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>visibility<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> newEntry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>notamos que el código no compila. Esto es por qué el tipo <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html#new-unknown-top-type\">unknown</a> no permite ninguna operación, por lo que acceder a los campos no es posible.</p>\n<p>Una vez mas, podemos solucionar el problema con estrechamiento de tipos. Ahora tenemos dos guardias de tipo, la primera controla que el parámetro object existe y tiene el tipo <em>object</em>. Luego de esto, la segunda guardia de tipo utiliza el operador <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#the-in-operator-narrowing\">in</a> para asegurar que el objeto tiene todos los campos deseados:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> toNewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>object<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">NewDiaryEntry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>object <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> object <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect or missing data'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'comment'</span> <span class=\"token keyword\">in</span> object <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'date'</span> <span class=\"token keyword\">in</span> object <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'weather'</span> <span class=\"token keyword\">in</span> object <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'visibility'</span> <span class=\"token keyword\">in</span> object<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">newEntry</span><span class=\"token operator\">:</span> NewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">weather</span><span class=\"token operator\">:</span> <span class=\"token function\">parseWeather</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>weather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">visibility</span><span class=\"token operator\">:</span> <span class=\"token function\">parseVisibility</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>visibility<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token function\">parseDate</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">comment</span><span class=\"token operator\">:</span> <span class=\"token function\">parseComment</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>comment<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> newEntry<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect data: some fields are missing'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Si la guardia no evalúa a true, una excepción es arrojada</p>\n<p>El uso del operador <em>in</em> ahora garantiza que los campos existen en el objeto. Por eso mismo, la comprobación de existencia en los ya no es necesaria:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parseVisibility <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>visibility<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">Visibility</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// check !visibility removed:</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>visibility<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isVisibility</span><span class=\"token punctuation\">(</span>visibility<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect visibility: '</span> <span class=\"token operator\">+</span> visibility<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> visibility<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Si un campo, p.ej. <em>comment</em> fuera opcional, el estrechamiento de tipo debería considerar esto y, el operador <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#the-in-operator-narrowing\">in</a> no podría ser utilizado como lo hicimos aquí, ya que la evaluación de <em>in</em> requiere que el campo este presente.</p>\n<p>Si ahora intentamos crear una nueva entrada en el diario con campos inválidos o faltantes, obtendremos un mensaje de error apropiado:</p>\n<picture><img src=\"/static/07769d61772df6f45e54316260fffaa6/5a190/62new.png\" alt=\"postman mostrando 400 bad request con valor incorrecto o faltante - awesome\" srcset=\"/static/07769d61772df6f45e54316260fffaa6/772e8/62new.png 200w,\n/static/07769d61772df6f45e54316260fffaa6/e17e5/62new.png 400w,\n/static/07769d61772df6f45e54316260fffaa6/5a190/62new.png 800w,\n/static/07769d61772df6f45e54316260fffaa6/c1b63/62new.png 1200w,\n/static/07769d61772df6f45e54316260fffaa6/29007/62new.png 1600w,\n/static/07769d61772df6f45e54316260fffaa6/7e21b/62new.png 1626w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>El código fuente de nuestra aplicación puede ser encontrado en <a href=\"https://github.com/fullstack-hy2020/flight-diary\">GitHub</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Ejercicios 9.12.-9.13.</h3>\n<h4>9.12: Patientor backend, paso 5</h4>\n<p>Cree un endpoint POST <em>/api/patients</em> para agregar pacientes. Asegúrate de que también puedas agregar pacientes desde el frontend. Puedes crear ids únicos de tipo <em>string</em> usando la librería <a href=\"https://github.com/uuidjs/uuid\">uuid</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> v1 <span class=\"token keyword\">as</span> uuid <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'uuid'</span>\n<span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">uuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>9.13: Patientor backend, paso 6</h4>\n<p>Configura parsing seguro, validación y predicado de tipos en la solicitud POST <em>/api/patients</em>.</p>\n<p>Refactoriza el campo <em>gender</em> para usar un <a href=\"http://www.typescriptlang.org/docs/handbook/enums.html\">tipo enum</a>.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/ed8ae98c5d885b4d1928a681eefbe7c4/part-9.svg"},"part":9,"letter":"c","lang":"es"}}},"pageContext":{"part":9,"letter":"c","lang":"es"}},"staticQueryHashes":["3128451518"]}
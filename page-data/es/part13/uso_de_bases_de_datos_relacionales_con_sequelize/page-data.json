{"componentChunkName":"component---src-templates-content-template-js","path":"/es/part13/uso_de_bases_de_datos_relacionales_con_sequelize","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>En esta sección exploraremos las aplicaciones de Node que usan bases de datos relacionales. Durante la sección construiremos un backend en Node utilizando una base de datos relacional para una aplicación de notas familiar de las secciones 3-5. Para completar esta parte, se necesitará un conocimiento razonable de bases de datos relacionales y SQL. Hay muchos cursos en línea sobre bases de datos SQL, por ejemplo. <a href=\"https://sqlbolt.com/\">SQLbolt</a> y <a href=\"https://www.khanacademy.org/computing/computer-programming/sql\">Introducción a SQL por Khan Academy</a>.</p>\n<p>Hay 24 ejercicios en esta parte, y se debe completar cada ejercicio para completar el curso. Los ejercicios se envían a través del <a href=\"https://studies.cs.helsinki.fi/stats/courses/fs-psql\">sistema de envíos</a> al igual que en las partes anteriores, pero a diferencia de las partes 0 a 7, el envío va a su propia \"instancia de curso\".</p>\n<h3>Ventajas y desventajas de las bases de datos de documentos.</h3>\n<p>En las secciones anteriores del curso, hemos utilizado la base de datos MongoDB. Mongo es una <a href=\"https://en.wikipedia.org/wiki/Document-oriented_database\">base de datos de documentos</a> y una de sus características más importante es que <i>no posee esquema</i>, es decir, la base de datos tiene solo un conocimiento muy limitado de qué tipo de datos se almacenan en sus colecciones. El esquema de la base de datos existe solo en el código del programa, que interpreta los datos de una manera específica, por ejemplo, al identificar que algunos de los campos son referencias a objetos en otra colección.</p>\n<p>En la aplicación de ejemplo de las partes 3 y 4, la base de datos almacena notas y usuarios.</p>\n<p>Una colección de <i>notas</i> que almacena notas tiene el siguiente aspecto:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"600c0e410d10256466898a6c\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HTML is easy\"</span>\n    <span class=\"token string-property property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span>23T11<span class=\"token operator\">:</span><span class=\"token number\">53</span><span class=\"token operator\">:</span><span class=\"token number\">37.292</span><span class=\"token operator\">+</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"important\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token string-property property\">\"__v\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"600c0edde86c7264ace9bb78\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CSS is hard\"</span>\n    <span class=\"token string-property property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span>23T11<span class=\"token operator\">:</span><span class=\"token number\">56</span><span class=\"token operator\">:</span><span class=\"token number\">13.912</span><span class=\"token operator\">+</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"important\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token string-property property\">\"__v\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Los usuarios guardados en la colección <i>users</i> tienen el siguiente aspecto:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"600c0e410d10256466883a6a\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mluukkai\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Matti Luukkainen\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"passwordHash\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"$2b$10$Df1yYJRiQuu3Sr4tUrk.SerVz1JKtBHlBOARfY0PBn/Uo7qr8Ocou\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"__v\"</span><span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">notes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"600c0edde86c7264ace9bb78\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"600c0e410d10256466898a6c\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>MongoDB conoce los tipos de los campos de las entidades almacenadas, pero no tiene información sobre a qué colección de entidades se refieren los ID de registro de usuario. A MongoDB tampoco le importa qué campos tienen las entidades almacenadas en las colecciones. Por lo tanto, MongoDB deja totalmente en manos del programador garantizar que la información correcta se almacene en la base de datos.</p>\n<p>Hay ventajas y desventajas de no tener un esquema. Una de las ventajas es la flexibilidad que aporta el agnosticismo de esquema: dado que no es necesario definir el esquema a nivel de la base de datos, el desarrollo de la aplicación puede ser más rápido en ciertos casos y más fácil, con menos esfuerzo necesario para definir y modificar el esquema en cualquier caso. Los problemas de no tener un esquema están relacionados con la propensión a errores: todo se deja en manos del programador. La base de datos en sí no tiene forma de verificar si los datos que contiene son <i>honestos</i>, es decir, si todos los campos obligatorios tienen valores, si los campos de tipo de referencia se refieren a entidades existentes del tipo correcto en general, etc.</p>\n<p>Las bases de datos relacionales en las que se centra esta sección, por otro lado, se basan en gran medida en la existencia de un esquema, y ​​las ventajas y desventajas de las bases de datos de esquema son casi opuestas en comparación con las bases de datos sin esquema.</p>\n<p>La razón por la que las secciones anteriores del curso usaron MongoDB es precisamente por su naturaleza sin esquema, lo que ha facilitado el uso de la base de datos para alguien con poco conocimiento de bases de datos relacionales. Para la mayoría de los casos de uso de este curso, personalmente habría optado por utilizar una base de datos relacional.</p>\n<h3>Base de datos de la aplicacion</h3>\n<p>Para nuestra aplicación necesitamos una base de datos relacional. Hay muchas opciones, pero usaremos la solución de código abierto más popular actualmente [PostgreSQL] (<a href=\"https://www.postgresql.org/\">https://www.postgresql.org/</a>). Puede instalar Postgres (como suele llamarse a la base de datos) en su máquina, si así lo desea. Una opción más fácil sería usar Postgres como un servicio en la nube, p. <a href=\"https://www.elephantsql.com/\">ElephantSQL</a>. También puede aprovechar las lecciones del curso <a href=\"/es/part12\">parte 12</a> y usar Postgres localmente usando Docker.</p>\n<p>Sin embargo, aprovecharemos el hecho de que es posible crear una base de datos de Postgres para la aplicación en la plataforma de servicios en la nube de Heroku, que ya conocemos de las partes 3 y 4.</p>\n<p>En el material teórico de esta sección, crearemos una versión habilitada para Postgres desde el backend de la aplicación de almacenamiento de notas, que se creó en las secciones 3 y 4.</p>\n<p>Ahora vamos a crear un directorio adecuado dentro de la aplicación Heroku, agregarle una base de datos y usar el comando <em>heroku config</em> para obtener la <i>cadena de conexión</i>, que se requiere para conectarse a la base de datos:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">heroku create\n<span class=\"token comment\"># Returns an app-name for the app you just created in heroku.</span>\n\nheroku addons:create heroku-postgresql:hobby-dev <span class=\"token parameter variable\">-a</span> <span class=\"token operator\">&lt;</span>app-name<span class=\"token operator\">></span>\nheroku config <span class=\"token parameter variable\">-a</span> <span class=\"token operator\">&lt;</span>app-name<span class=\"token operator\">></span>\n<span class=\"token operator\">==</span><span class=\"token operator\">=</span> cryptic-everglades-76708 Config Vars\nDATABASE_URL: postgres://<span class=\"token operator\">&lt;</span>username<span class=\"token operator\">></span>:thepasswordishere@<span class=\"token operator\">&lt;</span>host-of-postgres-addon<span class=\"token operator\">></span>:5432/<span class=\"token operator\">&lt;</span>db-name<span class=\"token operator\">></span></code></pre></div>\n<p>Particularmente cuando se utiliza una base de datos relacional, también es esencial acceder a la base de datos directamente. Hay muchas maneras de hacer esto, hay varias interfaces gráficas de usuario diferentes, como <a href=\"https://www.pgadmin.org/\">pgAdmin</a>. Sin embargo, utilizaremos la herramienta de línea de comandos de Postgres <a href=\"https://www.postgresql.org/docs/current/app-psql.html\">psql</a>.</p>\n<p>Se puede acceder a la base de datos ejecutando el comando <em>psql</em> en el servidor de Heroku de la siguiente manera (tenga en cuenta que los parámetros del comando dependen de la URL de conexión de la base de datos de Heroku):</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">heroku run psql <span class=\"token parameter variable\">-h</span> <span class=\"token operator\">&lt;</span>host-of-postgres-addon<span class=\"token operator\">></span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">5432</span> <span class=\"token parameter variable\">-U</span> <span class=\"token operator\">&lt;</span>username<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>dbname<span class=\"token operator\">></span> <span class=\"token parameter variable\">-a</span> <span class=\"token operator\">&lt;</span>app-name<span class=\"token operator\">></span></code></pre></div>\n<p>Después de ingresar la contraseña, probemos con el comando psql principal <em>\\d</em>, que le indica el contenido de la base de datos:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Password <span class=\"token keyword\">for</span> user <span class=\"token operator\">&lt;</span>username<span class=\"token operator\">></span>:\npsql <span class=\"token punctuation\">(</span><span class=\"token number\">13.4</span> <span class=\"token punctuation\">(</span>Ubuntu <span class=\"token number\">13.4</span>-1.pgdg20.04+1<span class=\"token punctuation\">))</span>\nSSL connection <span class=\"token punctuation\">(</span>protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: <span class=\"token number\">256</span>, compression: off<span class=\"token punctuation\">)</span>\nType <span class=\"token string\">\"help\"</span> <span class=\"token keyword\">for</span> help.\n\n<span class=\"token assign-left variable\">postgres</span><span class=\"token operator\">=</span><span class=\"token comment\"># \\d</span>\nDid not <span class=\"token function\">find</span> any relations.</code></pre></div>\n<p>Como se puede suponer, actualmente no hay nada en la base de datos.</p>\n<p>Vamos a crear una tabla para notas:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> notes <span class=\"token punctuation\">(</span>\n    id <span class=\"token keyword\">SERIAL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span>\n    content <span class=\"token keyword\">text</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    important <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">date</span> <span class=\"token keyword\">time</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Algunos puntos: la columna <i>id</i> se define como una <i>clave principal</i>, lo que significa que el valor de la columna id debe ser único para cada fila de la tabla y el valor no debe estar vacío. El tipo de esta columna se define como <a href=\"https://www.postgresql.org/docs/9.1/datatype-numeric.html#DATATYPE-SERIAL\">SERIAL</a>, que no es el tipo real sino una abreviatura de una columna de enteros al que Postgres asigna automáticamente un valor único y creciente al crear filas. La columna denominada <i>contenido</i> con tipo texto se define de tal manera que se le debe asignar un valor.</p>\n<p>Veamos la situación desde la consola. Primero, el comando <em>\\d</em>, que nos dice qué tablas hay en la base de datos:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">postgres<span class=\"token operator\">=</span><span class=\"token comment\"># \\d</span>\n                 List <span class=\"token keyword\">of</span> relations\n <span class=\"token keyword\">Schema</span> <span class=\"token operator\">|</span> Name <span class=\"token operator\">|</span> <span class=\"token keyword\">Type</span> <span class=\"token operator\">|</span> Owner\n<span class=\"token comment\">--------+--------------+----------+----------------</span>\n <span class=\"token keyword\">public</span> <span class=\"token operator\">|</span> notes <span class=\"token operator\">|</span> <span class=\"token keyword\">table</span> <span class=\"token operator\">|</span> username\n <span class=\"token keyword\">public</span> <span class=\"token operator\">|</span> notes_id_seq <span class=\"token operator\">|</span> sequence <span class=\"token operator\">|</span> username\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token keyword\">rows</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Además de la tabla <i>notes</i>, Postgres creó una subtabla llamada <i>notes_id_seq</i>, que realiza un seguimiento de qué valor se asigna a la <i>id</i> columna al crear la siguiente nota.</p>\n<p>Con el comando <em>\\d notas</em>, podemos ver como se define la tabla <i>notas</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">postgres<span class=\"token operator\">=</span><span class=\"token comment\"># \\d notes;</span>\n                                     <span class=\"token keyword\">Table</span> <span class=\"token string\">\"public.notes\"</span>\n  <span class=\"token keyword\">Column</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">Type</span> <span class=\"token operator\">|</span> Collation <span class=\"token operator\">|</span> Nullable <span class=\"token operator\">|</span> <span class=\"token keyword\">Default</span>\n<span class=\"token comment\">-----------+------------------------+-----------+----------+-----------------------------------</span>\n id <span class=\"token operator\">|</span> <span class=\"token keyword\">integer</span> <span class=\"token operator\">|</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token operator\">|</span> nextval<span class=\"token punctuation\">(</span><span class=\"token string\">'notes_id_seq'</span>::regclass<span class=\"token punctuation\">)</span>\n content <span class=\"token operator\">|</span> <span class=\"token keyword\">text</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token operator\">|</span>\n important <span class=\"token operator\">|</span> <span class=\"token keyword\">boolean</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span>\n <span class=\"token keyword\">date</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">time</span> without <span class=\"token keyword\">time</span> zone <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span>\nIndexes:\n    <span class=\"token string\">\"notes_pkey\"</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">btree</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Por lo tanto, la columna <i>id</i> tiene un valor predeterminado, que se obtiene llamando a la función interna de Postgres <i>nextval</i>.</p>\n<p>Agreguemos algo de contenido a la tabla:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> notes <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> important<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Relational databases rule the world'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> notes <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> important<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'MongoDB is webscale'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Y veamos cómo se ve el contenido creado:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">postgres<span class=\"token operator\">=</span><span class=\"token comment\"># select * from notes;</span>\n id <span class=\"token operator\">|</span> content <span class=\"token operator\">|</span> important <span class=\"token operator\">|</span> <span class=\"token keyword\">date</span>\n<span class=\"token comment\">----+-------------------------------------+-----------+------</span>\n  <span class=\"token number\">1</span> <span class=\"token operator\">|</span> relational <span class=\"token keyword\">databases</span> <span class=\"token keyword\">rule</span> the world <span class=\"token operator\">|</span> t <span class=\"token operator\">|</span>\n  <span class=\"token number\">2</span> <span class=\"token operator\">|</span> MongoDB <span class=\"token operator\">is</span> webscale <span class=\"token operator\">|</span> f <span class=\"token operator\">|</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token keyword\">rows</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Si tratamos de almacenar datos en la base de datos que no están de acuerdo con el esquema, no tendrá éxito. No puede faltar el valor de una columna obligatoria:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">postgres<span class=\"token operator\">=</span><span class=\"token comment\"># insert into notes (important) values (true);</span>\nERROR: <span class=\"token boolean\">null</span> <span class=\"token keyword\">value</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">column</span> <span class=\"token string\">\"content\"</span> <span class=\"token keyword\">of</span> relation <span class=\"token string\">\"notes\"</span> violates <span class=\"token operator\">not</span><span class=\"token operator\">-</span><span class=\"token boolean\">null</span> <span class=\"token keyword\">constraint</span>\nDETAIL: Failing <span class=\"token keyword\">row</span> <span class=\"token keyword\">contains</span> <span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>El valor de la columna no puede ser del tipo incorrecto:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">postgres<span class=\"token operator\">=</span><span class=\"token comment\"># insert into notes (content, important) values ('only valid data can be saved', 1);</span>\nERROR: <span class=\"token keyword\">column</span> <span class=\"token string\">\"important\"</span> <span class=\"token operator\">is</span> <span class=\"token keyword\">of</span> <span class=\"token keyword\">type</span> <span class=\"token keyword\">boolean</span> but expression <span class=\"token operator\">is</span> <span class=\"token keyword\">of</span> <span class=\"token keyword\">type</span> <span class=\"token keyword\">integer</span>\nLINE <span class=\"token number\">1</span>: <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>tent<span class=\"token punctuation\">,</span> important<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'only valid data can be saved'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">^</span></code></pre></div>\n<p>Tampoco se aceptan columnas que no existen en el esquema:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">postgres<span class=\"token operator\">=</span><span class=\"token comment\"># insert into notes (content, important, value) values ('only valid data can be saved', true, 10);</span>\nERROR: <span class=\"token keyword\">column</span> <span class=\"token string\">\"value\"</span> <span class=\"token keyword\">of</span> relation <span class=\"token string\">\"notes\"</span> does <span class=\"token operator\">not</span> exist\nLINE <span class=\"token number\">1</span>: <span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> notes <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> important<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span>'only <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>A continuación, es hora de pasar a acceder a la base de datos desde la aplicación.</p>\n<h3>Aplicación en Node, usando una base de datos relacional</h3>\n<p>Iniciemos la aplicación como de costumbre con <i>npm init</i> e instalemos <i>nodemon</i> como una dependencia de desarrollo y también las siguientes dependencias de tiempo de ejecución:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> express dotenv pg sequelize</code></pre></div>\n<p>De estos, el último <a href=\"https://sequelize.org/master/\">sequelize</a> es la biblioteca a través de la cual usamos Postgres. Sequelize es una biblioteca llamada [Mapeo relacional de objetos] (<a href=\"https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping\">https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping</a>) (ORM) que le permite almacenar objetos de JavaScript en una base de datos relacional sin usar el Lenguaje SQL en sí mismo, similar a Mongoose que usamos con MongoDB.</p>\n<p>Probemos que podemos conectarnos con éxito. Cree el archivo <i>index.js</i> y agregue el siguiente contenido:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Sequelize <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sequelize'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> sequelize <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sequelize</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_URL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">dialectOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">ssl</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">require</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">rejectUnauthorized</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">main</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> sequelize<span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Connection has been established successfully.'</span><span class=\"token punctuation\">)</span>\n    sequelize<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Unable to connect to the database:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>La <i>cadena de conexión</i> de la base de datos, que es revelada por el comando <em>heroku config</em> debe almacenarse en un archivo <i>.env</i>, el contenido debe ser algo como lo siguiente:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> .env\n<span class=\"token assign-left variable\">DATABASE_URL</span><span class=\"token operator\">=</span>postgres://<span class=\"token operator\">&lt;</span>username<span class=\"token operator\">></span>:thepasswordishere@ec2-54-83-137-206.compute-1.amazonaws.com:5432/<span class=\"token operator\">&lt;</span>databasename<span class=\"token operator\">></span></code></pre></div>\n<p>Probemos una conexión exitosa:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">node</span> index.js\nExecuting <span class=\"token punctuation\">(</span>default<span class=\"token punctuation\">)</span>: SELECT <span class=\"token number\">1</span>+1 AS result\nConnection has been established successfully.</code></pre></div>\n<p>Si la conexión funciona, podemos ejecutar la primera consulta. Modifiquemos el programa de la siguiente manera:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Sequelize<span class=\"token punctuation\">,</span> QueryTypes <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sequelize'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"token keyword\">const</span> sequelize <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sequelize</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_URL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">dialectOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">ssl</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">require</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">rejectUnauthorized</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">main</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> sequelize<span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> sequelize<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM notes\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> QueryTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">SELECT</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    sequelize<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Unable to connect to the database:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>La ejecución de la aplicación debe imprimir de la siguiente manera:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">Executing</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token constant\">FROM</span> notes\n<span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'Relational databases rule the world'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">important</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'MongoDB is webscale'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">important</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Aun cuando Sequelize es una biblioteca ORM, puede existir casos aislados en los que exista la necesidad de escribir SQL, para ello solo usamos [SQL directo] (<a href=\"https://sequelize.org/master/manual/raw-queries.html\">https://sequelize.org/master/manual/raw-queries.html</a>) con el método de sequelize [query] (<a href=\"https://sequelize.org/api/v6/class/src/sequelize.js~sequelize#instance-method-query\">https://sequelize.org/api/v6/class/src/sequelize.js~sequelize#instance-method-query</a>).</p>\n<p>Como todo parece estar funcionando, cambiemos la aplicación a una aplicación web.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Sequelize<span class=\"token punctuation\">,</span> QueryTypes <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sequelize'</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"token keyword\">const</span> sequelize <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sequelize</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_URL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">dialectOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">ssl</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">require</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">rejectUnauthorized</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> sequelize<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM notes\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> QueryTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">SELECT</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3001</span></span><span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span></code></pre></div>\n<p>La aplicación parece estar funcionando. Sin embargo, ahora cambiemos a usar Sequelize en lugar de SQL, ya que está destinado a usarse.</p>\n<h3>El Modelo</h3>\n<p>Al usar Sequelize, cada tabla en la base de datos está representada por un [modelo] (<a href=\"https://sequelize.org/master/manual/model-basics.html\">https://sequelize.org/master/manual/model-basics.html</a>), que es efectivamente su propia clase de JavaScript. Ahora definamos el modelo <i>Nota</i> correspondiente a la tabla <i>notas</i> para la aplicación cambiando el código al siguiente formato:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Sequelize<span class=\"token punctuation\">,</span> Model<span class=\"token punctuation\">,</span> DataTypes <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sequelize'</span><span class=\"token punctuation\">)</span></span><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> sequelize <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sequelize</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_URL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">dialectOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">ssl</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">require</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">rejectUnauthorized</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Note</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">Note<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">INTEGER</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token literal-property property\">primaryKey</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token literal-property property\">autoIncrement</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token literal-property property\">allowNull</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token literal-property property\">important</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">BOOLEAN</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">DATE</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  sequelize<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token literal-property property\">underscored</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token literal-property property\">timestamps</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token literal-property property\">modelName</span><span class=\"token operator\">:</span> <span class=\"token string\">'note'</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3001</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Algunos comentarios sobre el código: No hay nada sorprendente en la definición del modelo <i>Nota</i>, cada columna tiene un tipo definido, así como otras propiedades si es necesario, como si es la clave principal de la tabla. El segundo parámetro en la definición del modelo contiene el atributo <i>sequelize</i> así como otra información de configuración. También definimos que la tabla no tiene que usar las columnas de marcas de tiempo (created_at and updated_at).</p>\n<p>También definimos <i>underscored: true</i>, lo que significa que los nombres de las tablas se derivan de los nombres de los modelos como versiones en plural <a href=\"https://en.wikipedia.org/wiki/Snake_case\">snake case</a>. Prácticamente esto significa que, si el nombre del modelo, como en nuestro caso, es \"Nota\", entonces el nombre de la tabla correspondiente es su versión plural escrita con una letra inicial minúscula, es decir, <i>notas</i>. Si, por el contrario, el nombre del modelo fuera \"dos partes\", p. <i>StudyGroup</i>, entonces el nombre de la tabla sería <i>study_groups</i>. Sequelize infiere automáticamente los nombres de las tablas, pero también permite definirlos explícitamente.</p>\n<p>La misma política de nomenclatura se aplica a las columnas. Si hubiésemos definido que una nota está asociada a <i>creationYear</i>, es decir, información sobre el año en que fue creada, la definiríamos en el modelo de la siguiente manera:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Note<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token literal-property property\">creationYear</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">INTEGER</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>El nombre de la columna correspondiente en la base de datos sería <i>creation_year</i>. En el código, la referencia a la columna siempre tiene el mismo formato que en el modelo, es decir, en formato \"camel case\".</p>\n<p>También hemos definido <i>modelName: 'note'</i>, el \"nombre del modelo\" predeterminado sería <i>Note</i> en mayúsculas. Sin embargo, queremos tener una inicial en minúscula, hará que algunas cosas sean un poco más convenientes en el futuro.</p>\n<p>La operación de la base de datos es fácil de hacer usando la <a href=\"https://sequelize.org/master/manual/model-querying-basics.html\">interfaz de consulta</a> proporcionada por los modelos, el método <a href=\"https://sequelize.org/master/class/lib/model.js~Model.html#static-method-findAll\">findAll</a> funciona exactamente como su nombre indica:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>La consola le dice que la llamada al método <i>Note.findAll()</i> genera la siguiente consulta:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">Executing</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">SELECT</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"important\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"date\"</span> <span class=\"token constant\">FROM</span> <span class=\"token string\">\"notes\"</span> <span class=\"token constant\">AS</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>A continuación, implementemos un endpoint para crear nuevas notas:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ...</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>La creación de una nueva nota se realiza llamando al método <a href=\"https://sequelize.org/master/manual/model-querying-basics.html#simple-insert-queries\">create</a> del modelo <i>Note</i> y pasando como parámetro un objeto que define los valores de las columnas.</p>\n<p>En lugar del método <i>create</i>, <a href=\"https://sequelize.org/master/manual/model-instances.html#creating-an-instance\">también es posible</a> guardar en una base de datos usando primero el método <a href=\"https://sequelize.org/api/v6/class/src/model.js~model#static-method-build\">build</a> para crear un objeto modelo a partir de los datos deseados y luego llamar al método <a href=\"https://sequelize.org/master/class/lib/model.js~Model.html#instance-method-save\">save</a> en él:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Llamar al método <i>build</i> aún no guarda el objeto en la base de datos, por lo que aún es posible editar el objeto antes del evento de guardado real:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">note<span class=\"token punctuation\">.</span>important <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></span><span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Para el caso de uso del código de ejemplo, el método <a href=\"https://sequelize.org/master/manual/model-querying-basics.html#simple-insert-queries\">create</a> es más adecuado, así que sigamos con eso.</p>\n<p>Si el objeto que se está creando no es válido, aparece un mensaje de error como resultado. Por ejemplo, al intentar crear una nota sin contenido, la operación falla y la consola revela que el motivo es <i>SequelizeValidationError: notNull Violation Note.content can be null</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(node:39109) UnhandledPromiseRejectionWarning: SequelizeValidationError: notNull Violation: Note.content cannot be null\n    at InstanceValidator._validate (/Users/mluukkai/opetus/fs-psql/node_modules/sequelize/lib/instance-validator.js:78:13)\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)</code></pre></div>\n<p>Agreguemos un manejo de errores simple al agregar una nueva nota:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</div>\n<div class=\"tasks\">\n<h3>Ejercicios 13.1.-13.3.</h3>\n<p>En las tareas de esta sección, construiremos un backend de aplicación de blog similar a las tareas en la <a href=\"/es/part4\">sección 4</a>, que debería ser compatible con el frontend en la <a href=\"/es/part5\">sección 5</a> excepto por manejo de errores. También agregaremos varias características al backend que el frontend en la sección 5 no sabrá cómo usar.</p>\n<h4>Ejercicio 13.1.</h4>\n<p>Cree un repositorio de GitHub para la aplicación y cree una nueva aplicación de Heroku para ella, así como una base de datos de Postgres. Asegúrese de poder establecer una conexión con la base de datos de la aplicación.</p>\n<h4>Ejercicio 13.2.</h4>\n<p>En la línea de comandos, cree una tabla <i>blogs</i> para la aplicación con las siguientes columnas:</p>\n<ul>\n<li>id (identificador único e incremental)</li>\n<li>author (cadena de texto)</li>\n<li>url (cadena de texto que no puede estar vacía)</li>\n<li>title (cadena de texto que no puede estar vacía)</li>\n<li>likes (entero con valor predeterminado cero)</li>\n</ul>\n<p>Agregue al menos dos blogs a la base de datos.</p>\n<p>Guarde los comandos SQL que usó en la raíz del repositorio de la aplicación en el archivo llamado <i>commands.sql</i></p>\n<h4>Ejercicio 13.3.</h4>\n<p>Cree una funcionalidad en su aplicación, que imprima los blogs en la base de datos utilizando la línea de comandos, por ejemplo, como se muestra a continuación:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">node</span> cli.js\nExecuting <span class=\"token punctuation\">(</span>default<span class=\"token punctuation\">)</span>: SELECT * FROM blogs\nDan Abramov: <span class=\"token string\">'On let vs const'</span>, <span class=\"token number\">0</span> likes\nLaurenz Albe: <span class=\"token string\">'Gaps in sequences in PostgreSQL'</span>, <span class=\"token number\">0</span> likes</code></pre></div>\n</div>\n<div class=\"content\">\n<h3>Crear tablas automáticamente</h3>\n<p>Nuestra aplicación ahora tiene un lado desagradable, asume que existe una base de datos con exactamente el esquema correcto, es decir, que la tabla <i>notes</i> ha sido creada con el comando <i>create table</i> apropiado.</p>\n<p>Dado que el código del programa se almacena en GitHub, tendría sentido almacenar también los comandos que crean la base de datos en el contexto del código del programa, de modo que el esquema de la base de datos sea definitivamente el mismo que espera el código del programa. Sequelize en realidad puede generar un esquema automáticamente a partir de la definición del modelo utilizando el método <a href=\"https://sequelize.org/master/manual/model-basics.html#model-synchronization\">sync</a>.</p>\n<p>Ahora destruyamos la base de datos desde la consola ingresando el siguiente comando:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">drop table notes;</code></pre></div>\n<p>El comando <code class=\"language-text\">\\d</code> revela que la tabla se ha borrado de la base de datos:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">postgres=# \\d\nDid not find any relations.</code></pre></div>\n<p>La aplicación ya no funciona.</p>\n<p>Agreguemos el siguiente comando a la aplicación inmediatamente después de definir el modelo <i>Note</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Note<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Cuando se inicia la aplicación, se imprime lo siguiente en la consola:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Executing (default): CREATE TABLE IF NOT EXISTS \"notes\" (\"id\" SERIAL , \"content\" TEXT NOT NULL, \"important\" BOOLEAN, \"date\" TIMESTAMP WITH TIME ZONE, PRIMARY KEY (\"id\"));</code></pre></div>\n<p>Es decir, cuando se inicia la aplicación, se ejecuta el comando <i>CREATE TABLE IF NOT EXISTS \"notes\"...</i> que crea la tabla <i>notes</i> si aún no existe.</p>\n<h3>Otras operaciones</h3>\n<p>Completemos la aplicación con algunas operaciones más.</p>\n<p>Es posible buscar una sola nota con el método <a href=\"https://sequelize.org/docs/v6/core-concepts/model-querying-finders/#findbypk\">findByPk</a>, porque se recupera en función del identificador de la clave primaria:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>La recuperación de una sola nota genera el siguiente comando SQL:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Executing (default): SELECT \"id\", \"content\", \"important\", \"date\" FROM \"notes\" AS \"note\" WHERE \"note\". \"id\" = '1';</code></pre></div>\n<p>Si no se encuentra ninguna nota, la operación devuelve <i>null</i> y, en este caso, se proporciona el código de estado correspondiente.</p>\n<p>La modificación de la nota se realiza de la siguiente manera. Solo se admite la modificación del campo <i>important</i>, ya que el frontend de la aplicación no necesita nada más:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    note<span class=\"token punctuation\">.</span>important <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>important\n    <span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>El objeto correspondiente a la fila de la base de datos se recupera de la base de datos utilizando el método <i>findByPk</i>, el objeto se modifica y el resultado se guarda llamando al método <i>save</i> del objeto correspondiente.</p>\n<p>El código actual de la aplicación se encuentra en su totalidad en <a href=\"https://github.com/fullstack-hy/part13-notes/tree/part13-1\">GitHub</a>, rama <i>part13-1</i>.</p>\n<h3>Imprimiendo los objetos devueltos por Sequelize a la consola</h3>\n<p>La herramienta más importante del programador de JavaScript es <i>console.log</i>, cuyo uso agresivo controla incluso los peores errores. Agreguemos la impresión de consola a la ruta de una sola nota:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span></span>    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Podemos ver que el resultado final no es exactamente lo que esperábamos:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">note <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">dataValues</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'Notes are attached to a user'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">important</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token operator\">-</span>03T15<span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">24</span><span class=\"token punctuation\">.</span>582Z<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">_previousDataValues</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'Notes are attached to a user'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">important</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token operator\">-</span>03T15<span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">24</span><span class=\"token punctuation\">.</span>582Z<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">_changed</span><span class=\"token operator\">:</span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">_options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">isNewRecord</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">_schema</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">_schemaDelimiter</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">raw</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">attributes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'content'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'important'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'date'</span> <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">isNewRecord</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Además de la información de la nota, en la consola se imprimen todo tipo de cosas. Podemos alcanzar el resultado deseado llamando al método modelo-objeto <a href=\"https://sequelize.org/api/v6/class/src/model.js~model#instance-method-toJSON\">toJSON</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ahora el resultado es exactamente lo que queremos:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'MongoDB is webscale'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">important</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token operator\">-</span>09T13<span class=\"token operator\">:</span><span class=\"token number\">52</span><span class=\"token operator\">:</span><span class=\"token number\">58</span><span class=\"token punctuation\">.</span>693Z <span class=\"token punctuation\">}</span></code></pre></div>\n<p>En el caso de una colección de objetos, el método toJSON no funciona directamente, el método debe llamarse por separado para cada objeto de la colección:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token operator\">=></span>n<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>La impresión se parece a lo siguiente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'MongoDB is webscale'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">important</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token operator\">-</span>09T13<span class=\"token operator\">:</span><span class=\"token number\">52</span><span class=\"token operator\">:</span><span class=\"token number\">58</span><span class=\"token punctuation\">.</span>693Z <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'Relational databases rule the world'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">important</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token operator\">-</span>09T13<span class=\"token operator\">:</span><span class=\"token number\">53</span><span class=\"token operator\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">.</span>710Z <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<p>Sin embargo, quizás una mejor solución sea convertir la colección en JSON para imprimir usando el método <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">JSON.stringify</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Esta forma es mejor, especialmente si los objetos de la colección contienen otros objetos. También suele ser útil dar formato a los objetos en la pantalla en un formato un poco más fácil de leer. Esto se puede hacer con el siguiente comando:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">console.log(JSON.stringify(notes<span class=\"token punctuation\">,</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span>))</code></pre></div>\n<p>La impresión se parece a lo siguiente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MongoDB is webscale\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"important\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2021-10-09T13:52:58.693Z\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Relational databases rule the world\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"important\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2021-10-09T13:53:10.710Z\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n</div>\n<div class=\"tasks\">\n<h3>Ejercicio 13.4.</h3>\n<h4>Ejercicio 13.4.</h4>\n<p>Transforme su aplicación en una aplicación web que admita las siguientes operaciones</p>\n<ul>\n<li>GET api/blogs (listar todos los blogs)</li>\n<li>POST api/blogs (adicionar un nuevo blog)</li>\n<li>DELETE api/blogs/:id (eliminar un blog)</li>\n</ul>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/a912ccd5077570e9e5104b4d7b908c3c/part-13.svg"},"part":13,"letter":"a","lang":"es"}}},"pageContext":{"part":13,"letter":"a","lang":"es"}},"staticQueryHashes":["3128451518"]}
{"componentChunkName":"component---src-templates-content-template-js","path":"/es/part13/unir_tablas_y_consultas","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<h3>Estructura de la aplicación</h3>\n<p>Hasta ahora, hemos escrito todo el código en el mismo archivo. Ahora vamos a estructurar un poco mejor la aplicación. Vamos a crear la siguiente estructura de directorios y archivos:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">index.js\nutil\n  config.js\n  db.js\nmodels\n  index.js\n  note.js\ncontrollers\n  notes.js</code></pre></div>\n<p>El contenido de los archivos es el siguiente. El archivo <i>util/config.js</i> se encarga de manejar las variables de entorno:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">DATABASE_URL</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_URL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">PORT</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3001</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La función del archivo <i>index.js</i> es configurar e iniciar la aplicación:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">PORT</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./util/config'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> connectToDatabase <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./util/db'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> notesRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./controllers/notes'</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> notesRouter<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">start</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">connectToDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Iniciar la aplicación es ligeramente diferente de lo que hemos visto antes, porque queremos asegurarnos de que la conexión a la base de datos se establezca correctamente antes del inicio real.</p>\n<p>El archivo <i>util/db.js</i> contiene el código para inicializar la base de datos:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Sequelize <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sequelize'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">DATABASE_URL</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> sequelize <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sequelize</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DATABASE_URL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">dialectOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">ssl</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">require</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">rejectUnauthorized</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">connectToDatabase</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> sequelize<span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connected to the database'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'failed to connect to the database'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> connectToDatabase<span class=\"token punctuation\">,</span> sequelize <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Las notas del modelo correspondiente a la tabla se guardan en el archivo <i>models/note.js</i></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Model<span class=\"token punctuation\">,</span> DataTypes <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sequelize'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> sequelize <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../util/db'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Note</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nNote<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">INTEGER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">primaryKey</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">autoIncrement</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">allowNull</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">important</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">BOOLEAN</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">DATE</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  sequelize<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">underscored</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">timestamps</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">modelName</span><span class=\"token operator\">:</span> <span class=\"token string\">'note'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> Note</code></pre></div>\n<p>El archivo <i>models/index.js</i> es casi inútil en este momento, ya que solo hay un modelo en la aplicación. Cuando comencemos a agregar otros modelos a la aplicación, el archivo será más útil porque eliminará la necesidad de importar archivos que definan modelos individuales en el resto de la aplicación.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Note <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./note'</span><span class=\"token punctuation\">)</span>\n\nNote<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Note\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El manejo de rutas asociado con las notas se puede encontrar en el archivo <i>controllers/notes.js</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Note <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models'</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">204</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    note<span class=\"token punctuation\">.</span>important <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>important\n    <span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code></pre></div>\n<p>La estructura de la aplicación es buena ahora. Sin embargo, notamos que los manejadores de ruta que manejan una sola nota contienen un poco de código repetitivo, ya que todos comienzan con la línea que busca la nota a manejar:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Vamos a refactorizar esto en nuestro propio <i>middleware</i> e implementarlo en los controladores de ruta:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noteFinder</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  req<span class=\"token punctuation\">.</span>note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> noteFinder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> noteFinder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> req<span class=\"token punctuation\">.</span>note<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">204</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> noteFinder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    req<span class=\"token punctuation\">.</span>note<span class=\"token punctuation\">.</span>important <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>important\n    <span class=\"token keyword\">await</span> req<span class=\"token punctuation\">.</span>note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Los controladores de ruta ahora reciben <i>tres</i> parámetros, el primero es una cadena que define la ruta y el segundo es el <i>noteFinder</i> de middleware que definimos anteriormente, que recupera la nota de la base de datos y la coloca en la propiedad <i>note</i> del objeto <i>req</i>. ¡Se elimina una pequeña cantidad de copypaste y estamos satisfechos!</p>\n<p>El código actual de la aplicación se encuentra en su totalidad en <a href=\"https://github.com/fullstack-hy/part13-notes/tree/part13-2\">GitHub</a>, rama <i>part13-2</i>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Ejercicios 13.5.-13.7.</h3>\n<h4>Ejercicio 13.5.</h4>\n<p>Cambie la estructura de su aplicación para que coincida con el ejemplo anterior, o alguna otra convención similar.</p>\n<h4>Ejercicio 13.6.</h4>\n<p>Además, implemente soporte para cambiar el número de likes de un blog en la aplicación, es decir, la operación</p>\n<p><em>PUT /api/blogs/:id</em> (modifica el conteno de likes de un blog)</p>\n<p>El número actualizado de li se transmitirá con la solicitud:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">likes</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Ejercicio 13.7.</h4>\n<p>Centralice el manejo de errores de la aplicación en el middleware como en la <a href=\"/es/part3/guardando_datos_en_mongo_db#mover-el-manejo-de-errores-al-middleware\">parte 3</a>. También puede habilitar el middleware<a href=\"https://github.com/davidbanham/express-async-errors\">express-async-errors</a> como hicimos en la <a href=\"es/part4/porbando_el_backend#eliminando-el-try-catch\">parte 4</a>.</p>\n<p>Los datos devueltos en el contexto de un mensaje de error no son muy importantes.</p>\n<p>En este punto, las situaciones que requieren el manejo de errores por parte de la aplicación son la creación de un nuevo blog y el cambio de la cantidad de likes en un blog. Asegúrese de que el controlador de errores maneje ambos de manera adecuada.</p>\n</div>\n<div class=\"content\">\n<h3>Administración de usuario</h3>\n<p>A continuación, agreguemos una tabla de base de datos <i>users</i> a la aplicación, donde se almacenarán los usuarios de la aplicación. Además, agregaremos la capacidad de crear usuarios e inicio de sesión basado en tokens como lo implementamos en <a href=\"/en/part4/autenticacion_de_token\">parte 4</a>. Para simplificar, ajustaremos la implementación para que todos los usuarios tengan la misma contraseña <i>secret</i>.</p>\n<p>El modelo que define a los usuarios en el archivo <i>models/user.js</i> es sencillo</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Model<span class=\"token punctuation\">,</span> DataTypes <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sequelize'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> sequelize <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../util/db'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nUser<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">INTEGER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">primaryKey</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">autoIncrement</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">unique</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">allowNull</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">allowNull</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  sequelize<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">underscored</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">timestamps</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">modelName</span><span class=\"token operator\">:</span> <span class=\"token string\">'user'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> User</code></pre></div>\n<p>El campo <i>username</i> está configurado como único. El nombre de usuario podría haberse utilizado básicamente como la clave principal de la tabla. Sin embargo, decidimos crear la clave principal como un campo separado con un valor entero <i>id</i>.</p>\n<p>El archivo <i>models/index.js</i> se expande ligeramente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Note <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./note'</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./user'</span><span class=\"token punctuation\">)</span></span>\nNote<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">User<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  Note<span class=\"token punctuation\">,</span> User</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Los controladores de ruta que se encargan de crear un nuevo usuario en el archivo <i>controllers/users.js</i> y mostrar a todos los usuarios no contienen nada dramático:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> User <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models'</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code></pre></div>\n<p>El controlador del enrutador que maneja el inicio de sesión (archivo <i>controllers/login.js</i>) es el siguiente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jsonwebtoken'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">SECRET</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../util/config'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/user'</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">where</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>username\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> passwordCorrect <span class=\"token operator\">=</span> body<span class=\"token punctuation\">.</span>password <span class=\"token operator\">===</span> <span class=\"token string\">'secret'</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;&amp;</span> passwordCorrect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token string\">'invalid username or password'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> userForToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>userForToken<span class=\"token punctuation\">,</span> <span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span>\n\n  response\n    <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> token<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code></pre></div>\n<p>La solicitud POST irá acompañada de un nombre de usuario y una contraseña. Primero, el objeto correspondiente al nombre de usuario se recupera de la base de datos utilizando el modelo <i>User</i> con el método <a href=\"https://sequelize.org/master/manual/model-querying-finders.html#-code-findone--code-\">findOne</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">where</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>username\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Desde la consola, podemos ver que la instrucción SQL corresponde a la llamada al método</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span>\n<span class=\"token keyword\">FROM</span> <span class=\"token string\">\"users\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"User\"</span>\n<span class=\"token keyword\">WHERE</span> <span class=\"token string\">\"User\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"username\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">'mluukkai'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Si se encuentra el usuario y la contraseña es correcta (es decir, <em>secret</em> para todos los usuarios), en la respuesta se devuelve un <i>jsonwebtoken</i> que contiene la información del usuario. Para ello instalamos la dependencia</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm instalar jsonwebtoken</code></pre></div>\n<p>El archivo <i>index.js</i> se expande ligeramente</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> notesRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./controllers/notes'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> usersRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./controllers/users'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> loginRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./controllers/login'</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> notesRouter<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users'</span><span class=\"token punctuation\">,</span> usersRouter<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/login'</span><span class=\"token punctuation\">,</span> loginRouter<span class=\"token punctuation\">)</span></code></pre></div>\n<p>El código actual de la aplicación se encuentra en su totalidad en <a href=\"https://github.com/fullstack-hy/part13-notes/tree/part13-3\">GitHub</a>, rama <i>part13-3</i>.</p>\n<h3>Conexión entre las tablas</h3>\n<p>Ahora se pueden agregar usuarios a la aplicación y los usuarios pueden iniciar sesión, pero esto en sí mismo no es una característica muy útil todavía. Nos gustaría agregar las características de que solo un usuario registrado puede agregar notas y que cada nota está asociada con el usuario que la creó. Para hacer esto, necesitamos agregar una <i>clave externa</i> a la tabla <i>notes</i>.</p>\n<p>Al usar Sequelize, se puede definir una clave externa modificando el archivo <i>models/index.js</i> de la siguiente manera</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Note <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./note'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./user'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">User<span class=\"token punctuation\">.</span><span class=\"token function\">hasMany</span><span class=\"token punctuation\">(</span>Note<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">Note<span class=\"token punctuation\">.</span><span class=\"token function\">belongsTo</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">Note<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">alter</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">User<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">alter</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Note<span class=\"token punctuation\">,</span> User\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Así es como <a href=\"https://sequelize.org/master/manual/assocs.html#one-to-many-relationships\">define</a> que existe una conexión de relación <em>one-to-many</em> entre <i>users</i> y <i>notes</i>. También cambiamos las opciones de las llamadas <i>sync</i> para que las tablas en la base de datos coincidan con los cambios realizados en las definiciones del modelo. El esquema de la base de datos tiene el siguiente aspecto desde la consola:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">postgres<span class=\"token operator\">=</span># \\d users\n                                     Table <span class=\"token string\">\"public.users\"</span>\n  Column <span class=\"token operator\">|</span> Type <span class=\"token operator\">|</span> Collation <span class=\"token operator\">|</span> Nullable <span class=\"token operator\">|</span> Default\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n id <span class=\"token operator\">|</span> integer <span class=\"token operator\">|</span> not <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token function\">nextval</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users_id_seq'</span><span class=\"token operator\">:</span><span class=\"token operator\">:</span>regclass<span class=\"token punctuation\">)</span>\n username <span class=\"token operator\">|</span> character <span class=\"token function\">varying</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> not <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span>\n name <span class=\"token operator\">|</span> character <span class=\"token function\">varying</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> not <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span>\n<span class=\"token literal-property property\">Indexes</span><span class=\"token operator\">:</span>\n    <span class=\"token string\">\"users_pkey\"</span> <span class=\"token constant\">PRIMARY</span> <span class=\"token constant\">KEY</span><span class=\"token punctuation\">,</span> <span class=\"token function\">btree</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\nReferenced by<span class=\"token operator\">:</span>\n    <span class=\"token constant\">TABLE</span> <span class=\"token string\">\"notes\"</span> <span class=\"token constant\">CONSTRAINT</span> <span class=\"token string\">\"notes_user_id_fkey\"</span> <span class=\"token constant\">FOREIGN</span> <span class=\"token constant\">KEY</span> <span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">)</span> <span class=\"token constant\">REFERENCES</span> <span class=\"token function\">users</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token constant\">ON</span> <span class=\"token constant\">UPDATE</span> <span class=\"token constant\">CASCADE</span> <span class=\"token constant\">ON</span> <span class=\"token constant\">DELETE</span> <span class=\"token constant\">SET</span> <span class=\"token constant\">NULL</span>\n\npostgres<span class=\"token operator\">=</span># \\d notes\n                                      Table <span class=\"token string\">\"public.notes\"</span>\n  Column <span class=\"token operator\">|</span> Type <span class=\"token operator\">|</span> Collation <span class=\"token operator\">|</span> Nullable <span class=\"token operator\">|</span> Default\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n id <span class=\"token operator\">|</span> integer <span class=\"token operator\">|</span> not <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token function\">nextval</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notes_id_seq'</span><span class=\"token operator\">:</span><span class=\"token operator\">:</span>regclass<span class=\"token punctuation\">)</span>\n content <span class=\"token operator\">|</span> text <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> not <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span>\n important <span class=\"token operator\">|</span> boolean <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span>\n date <span class=\"token operator\">|</span> timestamp <span class=\"token keyword\">with</span> time zone <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span>\n user_id <span class=\"token operator\">|</span> integer <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span>\n<span class=\"token literal-property property\">Indexes</span><span class=\"token operator\">:</span>\n    <span class=\"token string\">\"notes_pkey\"</span> <span class=\"token constant\">PRIMARY</span> <span class=\"token constant\">KEY</span><span class=\"token punctuation\">,</span> <span class=\"token function\">btree</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\nForeign<span class=\"token operator\">-</span>key constraints<span class=\"token operator\">:</span>\n    <span class=\"token string\">\"notes_user_id_fkey\"</span> <span class=\"token constant\">FOREIGN</span> <span class=\"token constant\">KEY</span> <span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">)</span> <span class=\"token constant\">REFERENCES</span> <span class=\"token function\">users</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token constant\">ON</span> <span class=\"token constant\">UPDATE</span> <span class=\"token constant\">CASCADE</span> <span class=\"token constant\">ON</span> <span class=\"token constant\">DELETE</span> <span class=\"token constant\">SET</span> <span class=\"token constant\">NULL</span></code></pre></div>\n<p>La clave externa <i>user_id</i> se ha creado en la tabla <i>notes</i>, que hace referencia a las filas de la tabla <i>users</i>.</p>\n<p>Ahora hagamos que cada inserción de una nueva nota se asocie a un usuario. Antes de hacer la implementación adecuada (donde asociamos la nota con el token del usuario que inició sesión), codifiquemos la nota para adjuntarla al primer usuario que se encuentre en la base de datos:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">userId</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Preste atención a cómo ahora hay una columna <i>user_id</i> en las notas a nivel de la base de datos. La convención de nomenclatura de Sequelize hace referencia al objeto correspondiente en cada fila de la base de datos en lugar de mayúsculas y minúsculas (<i>userId</i>) como se escribe en el código fuente.</p>\n<p>Hacer una consulta de unión es muy fácil. Cambiemos la ruta que devuelve a todos los usuarios para que también se muestren las notas de cada usuario:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token literal-property property\">include</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> Note</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Por lo tanto, la consulta de combinación se realiza mediante la opción <a href=\"https://sequelize.org/master/manual/assocs.html#eager-loading-example\">include</a> como parámetro de consulta.</p>\n<p>La instrucción SQL generada a partir de la consulta se ve en la consola:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SELECT \"User\". \"id\", \"User\". \"username\", \"User\". \"name\", \"Notes\". \"id\" AS \"Notes.id\", \"Notes\". \"content\" AS \"Notes.content\", \"Notes\". \"important\" AS \"Notes.important\", \"Notes\". \"date\" AS \"Notes.date\", \"Notes\". \"user_id\" AS \"Notes.UserId\"\nFROM \"users\" AS \"User\" LEFT OUTER JOIN \"notes\" AS \"Notes\" ON \"User\". \"id\" = \"Notes\". \"user_id\";</code></pre></div>\n<p>El resultado final también es el que cabría esperar.</p>\n<picture><img src=\"/static/3f5652175b7932d862124009e4441687/5a190/1.png\" srcset=\"/static/3f5652175b7932d862124009e4441687/772e8/1.png 200w,\n/static/3f5652175b7932d862124009e4441687/e17e5/1.png 400w,\n/static/3f5652175b7932d862124009e4441687/5a190/1.png 800w,\n/static/3f5652175b7932d862124009e4441687/c1b63/1.png 1200w,\n/static/3f5652175b7932d862124009e4441687/ae28e/1.png 1598w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Inserción correcta de notas.</h3>\n<p>Cambiemos la inserción de la nota haciendo que funcione igual que en la <a href=\"/es/part4\">parte 4</a>, es decir, la creación de una nota solo puede tener éxito si la solicitud correspondiente a la creación va acompañada de un token válido de inicio de sesión. Luego, la nota se almacena en la lista de notas creada por el usuario identificado por el token:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">tokenExtractor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> authorization <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'authorization'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authorization <span class=\"token operator\">&amp;&amp;</span> authorization<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bearer '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      req<span class=\"token punctuation\">.</span>decodedToken <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>authorization<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token string\">'token invalid'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span>  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token string\">'token missing'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> tokenExtractor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">userId</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>El token se recupera de los encabezados de solicitud, se decodifica y se coloca en el objeto <i>req</i> mediante el middleware <i>tokenExtractor</i>. Al crear una nota, también se proporciona un campo de <i>fecha</i> que indica la hora en que se creó.</p>\n<h3>Afinando</h3>\n<p>Nuestro backend actualmente funciona casi de la misma manera que la versión de la Parte 4 de la misma aplicación, excepto por el manejo de errores. Antes de hacer algunas extensiones al backend, cambiemos ligeramente las rutas para recuperar todas las notas y todos los usuarios.</p>\n<p>Agregaremos a cada nota información sobre el usuario que la agregó:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">attributes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">exclude</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'userId'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">include</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> User<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">attributes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>También hemos <a href=\"https://sequelize.org/master/manual/model-querying-basics.html#specifying-attributes-for-select-queries\">restringido</a> los valores de los campos que queremos. Para cada nota, devolvemos todos los campos, incluido el <i>name</i> del usuario asociado con la nota, pero excluyendo el <i>userId</i>.</p>\n<p>Hagamos un cambio similar a la ruta que recupera a todos los usuarios, eliminando el campo innecesario <i>userId</i> de las notas asociadas con el usuario:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">include</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> Note<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">attributes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">exclude</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'userId'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span></span>    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>El código actual de la aplicación se encuentra en su totalidad en <a href=\"https://github.com/fullstack-hy/part13-notes/tree/part13-4\">GitHub</a>, rama <i>part13-4</i>.</p>\n<h3>Atención a la definición de los modelos</h3>\n<p>Los más perspicaces habrán notado que a pesar de la columna agregada <i>user_id</i>, no hicimos ningún cambio en el modelo que define las notas, pero aún podemos agregar un usuario a los objetos de nota:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">userId</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>La razón de esto es que especificamos en el archivo <i>models/index.js</i> que existe una conexión de uno a muchos entre los usuarios y las notas:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Note <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./note'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./user'</span><span class=\"token punctuation\">)</span>\n\nUser<span class=\"token punctuation\">.</span><span class=\"token function\">hasMany</span><span class=\"token punctuation\">(</span>Note<span class=\"token punctuation\">)</span>\nNote<span class=\"token punctuation\">.</span><span class=\"token function\">belongsTo</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>SSequelize creará automáticamente un atributo llamado <i>userId</i> en el modelo <i>Note</i> al cual, cuando se hace referencia, da acceso a la columna de la base de datos <i>user_id</i>.</p>\n<p>Tenga en cuenta que también podríamos crear una nota de la siguiente manera usando el método <a href=\"https://sequelize.org/master/class/lib/model.js~Model.html#static-method-build\">build</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// create a note without saving it yet</span>\n<span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n <span class=\"token comment\">// put the user id in the userId property of the created note</span>\nnote<span class=\"token punctuation\">.</span>userId <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>id\n<span class=\"token comment\">// store the note object in the database</span>\n<span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Así es como vemos explícitamente que <i>userId</i> es un atributo del objeto notas.</p>\n<p>Podríamos definir el modelo de la siguiente manera para obtener el mismo resultado:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Note<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">INTEGER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">primaryKey</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">autoIncrement</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">allowNull</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">important</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">BOOLEAN</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">DATE</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token literal-property property\">userId</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">INTEGER</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token literal-property property\">allowNull</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token literal-property property\">references</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> <span class=\"token string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">'id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  sequelize<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">underscored</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">timestamps</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">modelName</span><span class=\"token operator\">:</span> <span class=\"token string\">'note'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> Note</code></pre></div>\n<p>Definir a nivel de clase del modelo como se indicó anteriormente suele ser innecesario</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">User<span class=\"token punctuation\">.</span><span class=\"token function\">hasMany</span><span class=\"token punctuation\">(</span>Note<span class=\"token punctuation\">)</span>\nNote<span class=\"token punctuation\">.</span><span class=\"token function\">belongsTo</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">)</span></code></pre></div>\n<p>En cambio, podemos lograr lo mismo con esto. Es necesario usar uno de los dos métodos; de lo contrario, Sequelize no sabe cómo conectar las tablas entre sí a nivel de código.</p>\n</div>\n<div class=\"tasks\">\n<h3>Ejercicios 13.8.-13.12.</h3>\n<h4>Ejercicio 13.8.</h4>\n<p>Agregue soporte para usuarios a la aplicación. Además de la identificación, los usuarios tienen los siguientes campos:</p>\n<ul>\n<li>name (cadena de texto, no debe estar vacía)</li>\n<li>username (cadena de texto, no debe estar vacía)</li>\n</ul>\n<p>A diferencia del material, ahora no impida que Sequelize cree <a href=\"https://sequelize.org/master/manual/model-basics.html#timestamps\">marcas de tiempo</a> <i>created_at</i> y <i>updated_at</i> para los usuarios</p>\n<p>Todos los usuarios pueden tener la misma contraseña que el material. También pueden optar por implementar correctamente las contraseñas como en <a href=\"/es/part4/administracion_de_usuarios\">parte 4</a>.</p>\n<p>Implemente las siguientes rutas</p>\n<ul>\n<li><em>POST api/users</em> (agregar un nuevo usuario)</li>\n<li><em>GET api/users</em> (lista de todos los usuarios)</li>\n<li><em>PUT api/users/:username</em> (cambiando un nombre de usuario, tenga en cuenta que el parámetro no es id sino username)</li>\n</ul>\n<p>Asegúrese de que las marcas de tiempo <i>created_at</i> y <i>updated_at</i> establecidas automáticamente por Sequelize funcionen correctamente al crear un nuevo usuario y cambiar un nombre de usuario.</p>\n<h4>Ejercicio 13.9.</h4>\n<p>Sequelize proporciona un conjunto de <a href=\"https://sequelize.org/master/manual/validations-and-constraints.html\">validaciones</a> para los campos del modelo, que realiza antes de almacenar los objetos en la base de datos.</p>\n<p>Se decide cambiar la política de creación de usuarios para que solo una dirección de correo electrónico válida se pueda utilizar como nombre de usuario. Implemente una validación que verifique este problema durante la creación de un usuario.</p>\n<p>Modifique el middleware de manejo de errores para proporcionar un mensaje de error más descriptivo de la situación (por ejemplo, usando el mensaje de error Sequelize):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"error\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"Validation isEmail on username failed\"</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Ejercicio 13.10.</h4>\n<p>Expanda la aplicación para que el usuario conectado actual identificado por un token esté vinculado a cada blog agregado. Para hacer esto, también deberá implementar un endpoint de inicio de sesión <em>POST /api/login</em>, que devuelve el token.</p>\n<h4>Ejercicio 13.11.</h4>\n<p>Haga que la eliminación de un blog solo sea posible para el usuario que agregó el blog.</p>\n<h4>Ejercicio 13.12.</h4>\n<p>Modifique las rutas para recuperar todos los blogs y todos los usuarios para:</p>\n<p>1- Que cada blog muestre el usuario que lo agregó.\n2- Cada usuario muestre los blogs que agregó.</p>\n</div>\n<div class=\"content\">\n<h3>Más consultas</h3>\n<p>Hasta ahora, nuestra aplicación ha sido muy simple en términos de consultas, las consultas han buscado una sola fila en función de la clave principal utilizando el método <a href=\"https://sequelize.org/master/class/lib/model.js~Model.html#static-method-findByPk\">findByPk</a> o han buscado todas las filas en la tabla usando el método <a href=\"https://sequelize.org/master/class/lib/model.js~Model.html#static-method-findAll\">findAll</a>. Estos son suficientes para el frontend de la aplicación creada en la Sección 5, pero vamos a expandir el backend para que también podamos practicar haciendo consultas un poco más complejas.</p>\n<p>Primero implementemos la posibilidad de recuperar solo notas importantes o no importantes. Implementemos esto usando el <a href=\"http://expressjs.com/en/5x/api.html#req.query\">parámetro de consulta</a> important:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">attributes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">exclude</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'userId'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">include</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">attributes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token literal-property property\">where</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">important</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> <span class=\"token string\">\"true\"</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ahora el backend puede recuperar notas importantes con una solicitud a <a href=\"http://localhost:3001/api/notes?important=true\">http://localhost:3001/api/notes?important=true</a> y notas no importantes con una solicitud a <a href=\"http://localhost:3001/api/notes?important=false\">http://localhost:3001/api/notes?important=false</a></p>\n<p>La consulta SQL generada por Sequelize contiene una cláusula WHERE que filtra las filas que normalmente se devolverían:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"important\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user.id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"name\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user.name\"</span>\n<span class=\"token keyword\">FROM</span> <span class=\"token string\">\"notes\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"note\"</span> <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">OUTER</span> <span class=\"token keyword\">JOIN</span> <span class=\"token string\">\"users\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user\"</span> <span class=\"token keyword\">ON</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"user_id\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span>\n<span class=\"token keyword\">WHERE</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"important\"</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Desafortunadamente, esta implementación no funcionará si la solicitud no está interesada en si, la nota es importante o no, es decir, si la solicitud se realiza en <a href=\"http://localhost:3001/api/notes\">http://localhost:3001/api/notes</a>. La corrección se puede hacer de varias maneras. Una, pero quizás no la mejor manera de hacer la corrección, sería la siguiente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Op <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sequelize'</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">let</span> important <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">[</span>Op<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>important <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    important <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> <span class=\"token string\">\"true\"</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">attributes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">exclude</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'userId'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">include</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">attributes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">where</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      important</span>    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>El objeto <i>important</i> ahora almacena la condición de consulta. La consulta predeterminada es:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token literal-property property\">where</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">important</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>Op<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>es decir, la columna <i>important</i> puede ser <i>true</i> o <i>false</i>, usando uno de los muchos operadores Sequelize <a href=\"https://sequelize.org/master/manual/model-querying-basics.html#operators\">Op.in</a>. Si se especifica el parámetro de consulta <i>req.query.important</i>, la consulta cambia a una de las dos formas</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token literal-property property\">where</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">important</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>or</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token literal-property property\">where</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">important</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>dependiendo del valor del parámetro de consulta.</p>\n<p>La funcionalidad se puede ampliar aún más al permitir que el usuario especifique una palabra clave requerida al recuperar notas, p. Una solicitud a <a href=\"http://localhost:3001/api/notes?search=database\">http://localhost:3001/api/notes?search=database</a> devolverá todas las notas que mencionen <i>database</i> o una solicitud a <a href=\"http://localhost:3001/api/notes?search=javascript&#x26;important=true\">http://localhost:3001/api/notes?search=javascript&#x26;important=true</a> devolverá todas las notas marcadas como importantes y mencionando <i>javascript</i>. La implementación es la siguiente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> important <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>Op<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>important <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    important <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> <span class=\"token string\">\"true\"</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">attributes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">exclude</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'userId'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">include</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">attributes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">where</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      important<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">[</span>Op<span class=\"token punctuation\">.</span>substring<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>search <span class=\"token operator\">?</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>search <span class=\"token operator\">:</span> <span class=\"token string\">''</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span></span>    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><a href=\"https://sequelize.org/master/manual/model-querying-basics.html#operators\">Op.substring</a> de Sequelize genera la consulta que queremos usando la palabra clave LIKE en SQL. Por ejemplo, si hacemos una consulta a <a href=\"http://localhost:3001/api/notes?search=database&#x26;important=true\">http://localhost:3001/api/notes?search=database&#x26;important=true</a> veremos que la consulta SQL que genera es exactamente como esperábamos.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"important\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user.id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"name\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user.name\"</span>\n<span class=\"token keyword\">FROM</span> <span class=\"token string\">\"notes\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"note\"</span> <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">OUTER</span> <span class=\"token keyword\">JOIN</span> <span class=\"token string\">\"users\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user\"</span> <span class=\"token keyword\">ON</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"user_id\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span>\n<span class=\"token keyword\">WHERE</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"important\"</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">AND</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"content\"</span> <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%database%'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Todavía hay una hermosa falla en nuestra aplicación que vemos si hacemos una solicitud a <a href=\"http://localhost:3001/api/notes\">http://localhost:3001/api/notes</a>, es decir, queremos todas las notas, nuestra implementación causará un WHERE innecesario en la consulta, lo que puede (dependiendo de la implementación del motor de la base de datos) afectar innecesariamente la eficiencia de la consulta:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"important\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user.id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"name\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user.name\"</span>\n<span class=\"token keyword\">FROM</span> <span class=\"token string\">\"notes\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"note\"</span> <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">OUTER</span> <span class=\"token keyword\">JOIN</span> <span class=\"token string\">\"users\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user\"</span> <span class=\"token keyword\">ON</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"user_id\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span>\n<span class=\"token keyword\">WHERE</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"important\"</span> <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">AND</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"content\"</span> <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%%'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Optimicemos el código para que las condiciones WHERE se usen solo si es necesario:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> where <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    where<span class=\"token punctuation\">.</span>important <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> <span class=\"token string\">\"true\"</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    where<span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">[</span>Op<span class=\"token punctuation\">.</span>substring<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>search\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">attributes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">exclude</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'userId'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">include</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">attributes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    where\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Si la solicitud tiene condiciones de búsqueda, p. <a href=\"http://localhost:3001/api/notes?search=database&#x26;important=true\">http://localhost:3001/api/notes?search=database&#x26;important=true</a>, se forma una consulta que contiene WHERE :</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"important\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user.id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"name\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user.name\"</span>\n<span class=\"token keyword\">FROM</span> <span class=\"token string\">\"notes\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"note\"</span> <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">OUTER</span> <span class=\"token keyword\">JOIN</span> <span class=\"token string\">\"users\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user\"</span> <span class=\"token keyword\">ON</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"user_id\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span>\n<span class=\"token keyword\">WHERE</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"important\"</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">AND</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"content\"</span> <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%database%'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Si la solicitud no tiene condiciones de búsqueda <a href=\"http://localhost:3001/api/notes\">http://localhost:3001/api/notes</a>, entonces la consulta no tiene un WHERE innecesario</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"important\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user.id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"name\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user.name\"</span>\n<span class=\"token keyword\">FROM</span> <span class=\"token string\">\"notes\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"note\"</span> <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">OUTER</span> <span class=\"token keyword\">JOIN</span> <span class=\"token string\">\"users\"</span> <span class=\"token keyword\">AS</span> <span class=\"token string\">\"user\"</span> <span class=\"token keyword\">ON</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"user_id\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>El código actual de la aplicación se encuentra en su totalidad en <a href=\"https://github.com/fullstack-hy/part13-notes/tree/part13-5\">GitHub</a>, rama <i>part13-5</i>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Ejercicios 13.13.-13.16</h3>\n<h4>Ejercicio 13.13.</h4>\n<p>Implementar filtrado por palabra clave en la aplicación para la ruta de retorno de todos los blogs. El filtrado debería funcionar de la siguiente manera</p>\n<ul>\n<li><em>GET /api/blogs?search=react</em> devuelve todos los blogs con la palabra de búsqueda <i>react</i> en el campo <i>title</i>, la palabra de búsqueda no distingue entre mayúsculas y minúsculas</li>\n<li><em>GET /api/blogs</em> devuelve todos los blogs</li>\n</ul>\n<p><a href=\"https://sequelize.org/master/manual/model-querying-basics.html#operators\">Esto</a> debería ser útil para esta tarea y la siguiente.</p>\n<h4>Ejercicio 13.14.</h4>\n<p>Expanda el filtro para buscar una palabra clave en los campos <i>title</i> o <i>author</i>, es decir,</p>\n<p><em>GET /api/blogs?search=jami</em> devuelve blogs con la palabra de búsqueda <i>jami</i> en el campo <i>title</i> o en el campo <i>author</i></p>\n<h4>Ejercicio 13.15.</h4>\n<p>Modifique la ruta de los blogs para que devuelva los blogs en función de los likes en orden descendente. Busque la <a href=\"https://sequelize.org/master/manual/model-querying-basics.html\">documentación</a> para obtener instrucciones sobre cómo realizar pedidos,</p>\n<h4>Ejercicio 13.16.</h4>\n<p>Haz una ruta para la aplicación <em>/api/authors</em> que devuelva el número de blogs de cada autor y el número total de likes. Implemente la operación directamente a nivel de la base de datos. Lo más probable es que necesite la función <a href=\"https://sequelize.org/master/manual/model-querying-basics.html#grouping\">group by</a> y la función de agregación <a href=\"https://sequelize.org/master/manual/model-querying-basics.html#specifying-attributes-for-select-queries\">sequelize.fn</a>.</p>\n<p>El JSON devuelto por la ruta podría tener el siguiente aspecto:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[\n  {\n    author: \"Jami Kousa\",\n    articles: \"3\",\n    likes: \"10\"\n  },\n  {\n    author: \"Kalle Ilves\",\n    articles: \"1\",\n    likes: \"2\"\n  },\n  {\n    author: \"Dan Abramov\",\n    articles: \"1\",\n    likes: \"4\"\n  }\n]</code></pre></div>\n<p>Tarea de bonificación: ordene los datos devueltos según la cantidad de likes, haga el pedido en la consulta de la base de datos.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/a912ccd5077570e9e5104b4d7b908c3c/part-13.svg"},"part":13,"letter":"b","lang":"es"}}},"pageContext":{"part":13,"letter":"b","lang":"es"}},"staticQueryHashes":["3128451518"]}
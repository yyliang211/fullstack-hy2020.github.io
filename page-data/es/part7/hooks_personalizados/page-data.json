{"componentChunkName":"component---src-templates-content-template-js","path":"/es/part7/hooks_personalizados","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<h3>Hooks</h3>\n<p>React ofrece 15 <a href=\"https://es.react.dev/reference/react/hooks\">hooks incorporados</a> diferentes, de los cuales los más populares son <a href=\"https://es.react.dev/reference/react/useState\">useState</a> y <a href=\"https://es.react.dev/reference/react/useEffect\">useEffect</a>, a los cuales ya hemos estado utilizando extensivamente.</p>\n<p>En la <a href=\"/es/part5/props_children_y_proptypes#referencias-a-componentes-con-ref\">parte 5</a> usamos el hook <a href=\"https://es.react.dev/reference/react/useImperativeHandle\">useImperativeHandle</a> que permite que los componentes proporcionen sus funciones a otros componentes. En la <a href=\"/es/part6/react_query_use_reducer_y_el_contexto\">parte 6</a> utilizamos <a href=\"https://es.react.dev/reference/react/useReducer\">useReducer</a> y <a href=\"https://es.react.dev/reference/react/useContext\">useContext</a> para implementar una gestión de estado similar a Redux.</p>\n<p>Durante el último año, muchas librerías de React han comenzado a ofrecer APIs basadas en hooks. En la <a href=\"/es/part6/flux_architecture_y_redux\">parte 6</a> usamos los hooks <a href=\"https://react-redux.js.org/api/hooks#useselector\">useSelector</a> y <a href=\"https://react-redux.js.org/api/hooks#usedispatch\">useDispatch</a> de la librería react-redux para compartir nuestra redux-store y la función dispatch a nuestros componentes.</p>\n<p>La API de <a href=\"https://reactrouter.com/en/main/start/tutorial\">React-Router</a> que presentamos en la <a href=\"/es/part7/react_router\">parte anterior</a> también se basa parcialmente en hooks. Sus hooks se pueden usar para acceder a los parámetros de la URL y al objeto <i>navigation</i>, lo que permite manipular la URL del navegador programáticamente.</p>\n<p>Como se mencionó en la <a href=\"/es/part1/un_estado_mas_complejo_depurando_aplicaciones_react#reglas-de-los-hooks\">parte 1</a>, los hooks no son funciones normales y cuando los usamos tenemos que cumplir con ciertas <a href=\"https://es.react.dev/warnings/invalid-hook-call-warning#breaking-rules-of-hooks\">reglas o limitaciones</a>. Recapitulemos las reglas del uso de hooks, copiadas literalmente de la documentación oficial de React:</p>\n<p><strong>Evita utilizar Hooks dentro de loops, condicionales o funciones anidadas.</strong> En su lugar, utiliza los Hooks únicamente en el nivel superior de tu función de React.</p>\n<p><strong>Los Hooks sólo deben ser utilizados durante la renderización de un componente de función en React:</strong></p>\n<ul>\n<li>Utilízalos en el nivel superior del cuerpo de un componente de función.</li>\n<li>Utilízalos en el nivel superior del cuerpo de un Hook personalizado.</li>\n</ul>\n<p>Existe un plugin de <a href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\">ESlint</a> que se puede usar para verificar que la aplicación usa los hooks correctamente.</p>\n<picture><img src=\"/static/a42713feec07bc59d2ba81cbc95c239b/5a190/60ea.png\" alt=\"error de vscode al llamar a useState condicionalmente\" srcset=\"/static/a42713feec07bc59d2ba81cbc95c239b/772e8/60ea.png 200w,\n/static/a42713feec07bc59d2ba81cbc95c239b/e17e5/60ea.png 400w,\n/static/a42713feec07bc59d2ba81cbc95c239b/5a190/60ea.png 800w,\n/static/a42713feec07bc59d2ba81cbc95c239b/c1b63/60ea.png 1200w,\n/static/a42713feec07bc59d2ba81cbc95c239b/07a9c/60ea.png 1440w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Hooks personalizados</h3>\n<p>React ofrece la opción de crear nuestros propios hooks <a href=\"https://es.react.dev/learn/reusing-logic-with-custom-hooks\">personalizados</a>. Según React, el propósito principal de los hooks personalizados es facilitar la reutilización de la lógica utilizada en los componentes.</p>\n<blockquote>\n<p><i>Crear tus propios Hooks te permite extraer la lógica de los componentes en funciones reutilizables.</i></p>\n</blockquote>\n<p>Los hooks personalizados son funciones regulares de JavaScript que pueden utilizar cualquier otro hook, siempre que se adhieran a las <a href=\"/es/part1/un_estado_mas_complejo_depurando_aplicaciones_react#reglas-de-los-hooks\">reglas de los hooks</a>. Además, el nombre de los hooks personalizados debe comenzar con la palabra <em>use</em>.</p>\n<p>Implementamos una aplicación de contador en la <a href=\"/es/part1/estado_del_componente_controladores_de_eventos#manejo-de-eventos\">parte 1</a>, que puede tener su valor incrementado, reducido o reiniciado. El código de la aplicación es el siguiente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> setCounter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>counter<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        plus\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>counter <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        minus\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>      \n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        zero\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Extraigamos la lógica del contador en su propio hook personalizado. El código del hook es el siguiente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useCounter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increase</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">decrease</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">zero</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">,</span> \n    increase<span class=\"token punctuation\">,</span>\n    decrease<span class=\"token punctuation\">,</span>\n    zero\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nuestro hook personalizado utiliza el hook <em>useState</em> internamente para crear su propio estado. El hook devuelve un objeto, cuyas propiedades incluyen el valor del contador, así como funciones para manipular el valor.</p>\n<p>Los componentes de React pueden utilizar el hook como se muestra a continuación:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">useCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>counter<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>counter<span class=\"token punctuation\">.</span>increase<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        plus\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>counter<span class=\"token punctuation\">.</span>decrease<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        minus\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>      \n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>counter<span class=\"token punctuation\">.</span>zero<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        zero\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Al hacer esto, podemos extraer el estado del componente <em>App</em> y su manipulación por completo en el hook <em>useCounter</em>. La gestión del estado y la lógica del contador ahora es responsabilidad del hook personalizado.</p>\n<p>El mismo hook podría <i>reutilizarse</i> en la aplicación que realizaba un seguimiento de la cantidad de clics realizados en los botones izquierdo y derecho:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> <span class=\"token function\">useCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> <span class=\"token function\">useCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>left<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>left<span class=\"token punctuation\">.</span>increase<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        left\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>right<span class=\"token punctuation\">.</span>increase<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        right\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>right<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La aplicación crea <i>dos</i> contadores completamente separados. El primero se asigna a la variable <em>left</em> y el otro a la variable <em>right</em>.</p>\n<p>Tratar con formularios en React es algo complicado. La siguiente aplicación presenta al usuario un formulario que le solicita que ingrese su nombre, fecha de nacimiento y altura:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>born<span class=\"token punctuation\">,</span> setBorn<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>height<span class=\"token punctuation\">,</span> setHeight<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form<span class=\"token operator\">></span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> \n        <span class=\"token operator\">&lt;</span>input\n          type<span class=\"token operator\">=</span><span class=\"token string\">'text'</span>\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> \n        <span class=\"token operator\">/</span><span class=\"token operator\">></span> \n        <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">/</span><span class=\"token operator\">></span> \n        <span class=\"token literal-property property\">birthdate</span><span class=\"token operator\">:</span>\n        <span class=\"token operator\">&lt;</span>input\n          type<span class=\"token operator\">=</span><span class=\"token string\">'date'</span>\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>born<span class=\"token punctuation\">}</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setBorn</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span> \n        <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span>\n        <span class=\"token operator\">&lt;</span>input\n          type<span class=\"token operator\">=</span><span class=\"token string\">'number'</span>\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>height<span class=\"token punctuation\">}</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>born<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>height<span class=\"token punctuation\">}</span> \n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cada campo del formulario tiene su propio estado. Para mantener el estado del formulario sincronizado con los datos proporcionados por el usuario, tenemos que registrar un controlador <i>onChange</i> apropiado para cada uno de los elementos <i>input</i>.</p>\n<p>Definamos nuestro propio hook personalizado <em>useField</em>, que simplifica la gestión del estado del formulario:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useField</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">,</span>\n    value<span class=\"token punctuation\">,</span>\n    onChange\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La función de hook recibe el tipo de campo de entrada como parámetro. Devuelve todos los atributos requeridos por el <i>input</i>: su tipo, valor y el controlador onChange.</p>\n<p>El hook se puede utilizar de la siguiente manera:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token function\">useField</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input\n          type<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">}</span>\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">.</span>onChange<span class=\"token punctuation\">}</span> \n        <span class=\"token operator\">/</span><span class=\"token operator\">></span> \n        <span class=\"token comment\">// ...</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Propagando atributos con Spread</h3>\n<p>Podríamos simplificar un poco más las cosas. Dado que el objeto <em>name</em> tiene exactamente todos los atributos que el elemento <i>input</i> espera recibir como props, podemos pasar los props al elemento usando la <a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">sintaxis spread</a>(spread syntax) de la siguiente manera:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>input <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>name<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> </code></pre></div>\n<p>Como indica el <a href=\"https://es.react.dev/learn/updating-objects-in-state#copying-objects-with-the-spread-syntax\">ejemplo</a> en la documentación de React, las siguientes dos formas de pasar props a un componente logran exactamente el mismo resultado:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Greeting firstName<span class=\"token operator\">=</span><span class=\"token string\">'Arto'</span> lastName<span class=\"token operator\">=</span><span class=\"token string\">'Hellas'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n<span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">'Arto'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">'Hellas'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">&lt;</span>Greeting <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>person<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>La aplicación se simplifica en el siguiente formato:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token function\">useField</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> born <span class=\"token operator\">=</span> <span class=\"token function\">useField</span><span class=\"token punctuation\">(</span><span class=\"token string\">'date'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> height <span class=\"token operator\">=</span> <span class=\"token function\">useField</span><span class=\"token punctuation\">(</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form<span class=\"token operator\">></span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> \n        <span class=\"token operator\">&lt;</span>input  <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>name<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> \n        <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">/</span><span class=\"token operator\">></span> \n        <span class=\"token literal-property property\">birthdate</span><span class=\"token operator\">:</span>\n        <span class=\"token operator\">&lt;</span>input <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>born<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span> \n        <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span>\n        <span class=\"token operator\">&lt;</span>input <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>height<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>born<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>height<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tratar con formularios se simplifica enormemente cuando los desagradables detalles esenciales relacionados con la sincronización del estado del formulario se encapsulan dentro de nuestro hook personalizado.</p>\n<p>Los hooks personalizados no son solo una herramienta para reutilizar código; sino que también brindan una mejor manera de dividirlo en partes modulares más pequeñas.</p>\n<h3>Más sobre hooks</h3>\n<p>Internet está comenzando a llenarse con más y más material útil relacionado con los hooks. Vale la pena consultar las siguientes fuentes:</p>\n<ul>\n<li><a href=\"https://github.com/rehooks/awesome-react-hooks\">Awesome React Hooks Resources</a></li>\n<li><a href=\"https://usehooks.com/\">Easy to understand React Hook recipes by Gabe Ragland</a></li>\n<li><a href=\"https://overreacted.io/why-do-hooks-rely-on-call-order/\">Why Do React Hooks Rely on Call Order?</a></li>\n</ul>\n</div>\n<div class=\"tasks\">\n<h3>Ejercicios 7.4.-7.8.</h3>\n<p>Continuaremos con la aplicación de los <a href=\"/es/part7/react_router#ejercicios-7-1-7-3\">ejercicios</a> del capítulo de <a href=\"/es/part7/react_router\">react router</a>.</p>\n<h4>7.4: Anécdotas y Hooks paso 1</h4>\n<p>Simplifica el formulario de creación de anécdotas de tu aplicación con el hook personalizado <em>useField</em> que definimos anteriormente.</p>\n<p>Un lugar natural para guardar los hooks personalizados en tu aplicación es el archivo <i>/src/hooks/index.js</i>.</p>\n<p>Si utilizas la <a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Statements/export#descripci%C3%B3n\">exportación nombrada</a> en lugar de la exportación predeterminada:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useField</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">,</span>\n    value<span class=\"token punctuation\">,</span>\n    onChange\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// los módulos pueden tener muchas exportaciones nombradas</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useAnotherHook</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Luego, la <a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Statements/import\">importación</a> ocurre de la siguiente manera:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span>  <span class=\"token punctuation\">{</span> useField <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./hooks'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">const</span> username <span class=\"token operator\">=</span> <span class=\"token function\">useField</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>7.5: Anécdotas y Hooks paso 2</h4>\n<p>Agrega un botón al formulario que puedas usar para borrar todos los campos de entrada:</p>\n<picture><img src=\"/static/1bce1cdac08279ba132f61a614900b94/5a190/61ea.png\" alt=\"formulario de anécdotas con botón reset\" srcset=\"/static/1bce1cdac08279ba132f61a614900b94/772e8/61ea.png 200w,\n/static/1bce1cdac08279ba132f61a614900b94/e17e5/61ea.png 400w,\n/static/1bce1cdac08279ba132f61a614900b94/5a190/61ea.png 800w,\n/static/1bce1cdac08279ba132f61a614900b94/c1b63/61ea.png 1200w,\n/static/1bce1cdac08279ba132f61a614900b94/29007/61ea.png 1600w,\n/static/1bce1cdac08279ba132f61a614900b94/541fe/61ea.png 1654w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Amplia la funcionalidad del hook <i>useField</i> para que ofrezca una nueva operación <i>reset</i> para limpiar el campo.</p>\n<p>Dependiendo de tu solución, es posible que veas la siguiente advertencia en tu consola:</p>\n<picture><img src=\"/static/c4f6d266117f4d881d1df60a4ca3b9f5/5a190/62ea.png\" alt=\"consola con advertencia: valor invalido para prop reset\" srcset=\"/static/c4f6d266117f4d881d1df60a4ca3b9f5/772e8/62ea.png 200w,\n/static/c4f6d266117f4d881d1df60a4ca3b9f5/e17e5/62ea.png 400w,\n/static/c4f6d266117f4d881d1df60a4ca3b9f5/5a190/62ea.png 800w,\n/static/c4f6d266117f4d881d1df60a4ca3b9f5/c1b63/62ea.png 1200w,\n/static/c4f6d266117f4d881d1df60a4ca3b9f5/29007/62ea.png 1600w,\n/static/c4f6d266117f4d881d1df60a4ca3b9f5/b4904/62ea.png 1768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Volveremos a esta advertencia en el próximo ejercicio.</p>\n<h4>7.6: Anécdotas y Hooks paso 3</h4>\n<p>Si tu solución no provocó que apareciera una advertencia en la consola, ya has terminado este ejercicio.</p>\n<p>Si ves la advertencia <em>Invalid value for prop `reset` on &#x3C;input> tag</em> en la consola, realiza los cambios necesarios para deshacerte de ella.</p>\n<p>El motivo de esta advertencia es que después de realizar los cambios en tu aplicación, la siguiente expresión:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>input <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>content<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>Esencialmente, es lo mismo que esto:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>input\n  value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span> \n  type<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">}</span>\n  onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">.</span>onChange<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">  reset<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">.</span>reset<span class=\"token punctuation\">}</span></span><span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>El elemento <i>input</i> no debe recibir un atributo <i>reset</i>.</p>\n<p>Una solución simple sería no usar la sintaxis de spread y escribir todos los formularios de esta manera:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>input\n  value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span> \n  type<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">}</span>\n  onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">.</span>onChange<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>Si hiciéramos esto, perderíamos gran parte del beneficio proporcionado por el hook <i>useField</i>. En su lugar, busca una solución al problema, pero que aún sea fácil de usar con la sintaxis de spread.</p>\n<h4>7.7: Hook de País</h4>\n<p>Volvamos a los ejercicios <a href=\"/es/part2/agregar_estilos_a_la_aplicacion_react#ejercicios-2-18-2-20\">2.18-20</a>.</p>\n<p>Utilza el código de <a href=\"https://github.com/fullstack-hy2020/country-hook\">https://github.com/fullstack-hy2020/country-hook</a> como punto de partida.</p>\n<p>La aplicación se puede utilizar para buscar detalles de países desde la interfaz <a href=\"https://studies.cs.helsinki.fi/restcountries/\">https://studies.cs.helsinki.fi/restcountries/</a>. Si se encuentra a un país, se muestran sus detalles:</p>\n<picture><img src=\"/static/b705259ca07b94ce736ac882dbbce776/5a190/69ea.png\" alt=\"navegador mostrando detalles del país\" srcset=\"/static/b705259ca07b94ce736ac882dbbce776/772e8/69ea.png 200w,\n/static/b705259ca07b94ce736ac882dbbce776/e17e5/69ea.png 400w,\n/static/b705259ca07b94ce736ac882dbbce776/5a190/69ea.png 800w,\n/static/b705259ca07b94ce736ac882dbbce776/c1b63/69ea.png 1200w,\n/static/b705259ca07b94ce736ac882dbbce776/82c1e/69ea.png 1398w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Si no se encuentra ningún país, se le muestra un mensaje al usuario</p>\n<picture><img src=\"/static/b8f3f1b250a195526cc2816eb8f69c41/5a190/70ea.png\" alt=\"navegador mostrando país no encontrado\" srcset=\"/static/b8f3f1b250a195526cc2816eb8f69c41/772e8/70ea.png 200w,\n/static/b8f3f1b250a195526cc2816eb8f69c41/e17e5/70ea.png 400w,\n/static/b8f3f1b250a195526cc2816eb8f69c41/5a190/70ea.png 800w,\n/static/b8f3f1b250a195526cc2816eb8f69c41/c1b63/70ea.png 1200w,\n/static/b8f3f1b250a195526cc2816eb8f69c41/53639/70ea.png 1358w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Por lo demás, la aplicación está completa, pero en este ejercicio debes implementar un hook personalizado <em>useCountry</em>, que se pueda utilizar para buscar los detalles del país dado al hook como parámetro.</p>\n<p>Usa el endpoint <a href=\"https://studies.cs.helsinki.fi/restcountries/\">name</a> de la API para obtener los detalles del país en un hook <em>useEffect</em> dentro de su hook personalizado.</p>\n<p>Ten en cuenta que en este ejercicio es esencial utilizar el <a href=\"https://react.dev/reference/react/useEffect#parameters\">segundo parámetro</a> de useEffect para controlar cuándo se ejecuta la función de efecto.</p>\n<h4>7.8: Hooks Definitivos</h4>\n<p>El código de la aplicación responsable de comunicarse con el backend de la aplicación de notas de las partes anteriores se ve así:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token keyword\">const</span> baseUrl <span class=\"token operator\">=</span> <span class=\"token string\">'/api/notes'</span>\n\n<span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setToken</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">newToken</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  token <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newToken<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAll</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>data\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">create</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">newObject</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">Authorization</span><span class=\"token operator\">:</span> token <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">,</span> newObject<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>data\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> newObject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> baseUrl <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> newObject<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>data\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span> getAll<span class=\"token punctuation\">,</span> create<span class=\"token punctuation\">,</span> update<span class=\"token punctuation\">,</span> setToken <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notamos que el código de ninguna manera es especifico al hecho de que nuestra aplicación gestiona notas. Excluyendo el valor de la variable <em>baseUrl</em>, el mismo código podría reutilizarse en la aplicación de publicación de blogs para tratar la comunicación con el backend.</p>\n<p>Extrae el código para comunicarse con el backend en su propio hook <em>useResource</em>. Es suficiente implementar la búsqueda de todos los recursos y la creación de un nuevo recurso.</p>\n<p>Puedes hacer el ejercicio en el proyecto que se encuentra en el repositorio <a href=\"https://github.com/fullstack-hy2020/ultimate-hooks\">https://github.com/fullstack-hy2020/ultimate-hooks</a>. El componente <i>App</i> del proyecto es el siguiente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token function\">useField</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token function\">useField</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> number <span class=\"token operator\">=</span> <span class=\"token function\">useField</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> noteService<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3005/notes'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>persons<span class=\"token punctuation\">,</span> personService<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3005/persons'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleNoteSubmit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    noteService<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> content<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n \n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handlePersonSubmit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    personService<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> name<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">number</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>notes<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleNoteSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>content<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">></span>create<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>p key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>persons<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handlePersonSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        name <span class=\"token operator\">&lt;</span>input <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>name<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        number <span class=\"token operator\">&lt;</span>input <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>number<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">></span>create<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>persons<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>p key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El hook personalizado <em>useResource</em> devuelve un array de dos elementos al igual que los hooks de estado. El primer elemento del array contiene todos los recursos individuales y el segundo elemento del array es un objeto que se puede usar para manipular la colección de recursos y crear nuevos.</p>\n<p>Si implementas el hook correctamente, se puede usar tanto para notas como para números de teléfono (inicia el servidor con el comando <em>npm run server</em> en el puerto 3005).</p>\n<picture><img src=\"/static/101f0d62e315b6b8a02a14365cd3652d/5a190/21e.png\" alt=\"navegador mostrando notas y personas\" srcset=\"/static/101f0d62e315b6b8a02a14365cd3652d/772e8/21e.png 200w,\n/static/101f0d62e315b6b8a02a14365cd3652d/e17e5/21e.png 400w,\n/static/101f0d62e315b6b8a02a14365cd3652d/5a190/21e.png 800w,\n/static/101f0d62e315b6b8a02a14365cd3652d/c1b63/21e.png 1200w,\n/static/101f0d62e315b6b8a02a14365cd3652d/7f15f/21e.png 1530w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/2184b1c35920cfc7a09e10660dea04eb/part-7.svg"},"part":7,"letter":"b","lang":"es"}}},"pageContext":{"part":7,"letter":"b","lang":"es"}},"staticQueryHashes":["3128451518"]}
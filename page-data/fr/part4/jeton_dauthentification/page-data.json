{"componentChunkName":"component---src-templates-content-template-js","path":"/fr/part4/jeton_dauthentification","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Les utilisateurs doivent pouvoir se connecter à notre application, et lorsque l'utilisateur est connecté, ses informations doivent automatiquement être attachées à toutes les nouvelles notes qu'ils créent.</p>\n<p>Nous allons maintenant implémenter le support de <a href=\"https://www.digitalocean.com/community/tutorials/the-ins-and-outs-of-token-based-authentication#how-token-based-works\">l'authentification basée sur des jetons</a> dans le backend.</p>\n<p>Les principes de l'authentification basée sur des jetons sont représentés dans le diagramme de séquence suivant :</p>\n<picture><img src=\"/static/259c9dce6b3d1d77bedb04e799ac7dd3/5a190/16new.png\" alt=\"diagramme de séquence de l&#x27;authentification basée sur des jetons\" srcset=\"/static/259c9dce6b3d1d77bedb04e799ac7dd3/772e8/16new.png 200w,\n/static/259c9dce6b3d1d77bedb04e799ac7dd3/e17e5/16new.png 400w,\n/static/259c9dce6b3d1d77bedb04e799ac7dd3/5a190/16new.png 800w,\n/static/259c9dce6b3d1d77bedb04e799ac7dd3/c1b63/16new.png 1200w,\n/static/259c9dce6b3d1d77bedb04e799ac7dd3/29007/16new.png 1600w,\n/static/259c9dce6b3d1d77bedb04e799ac7dd3/da893/16new.png 2130w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<ul>\n<li>\n<p>L'utilisateur commence par se connecter à l'aide d'un formulaire de connexion implémenté avec React</p>\n<ul>\n<li>Nous ajouterons le formulaire de connexion à l'interface utilisateur dans la <a href=\"/fr/part5\">partie 5</a></li>\n</ul>\n</li>\n<li>Cela amène le code React à envoyer le nom d'utilisateur et le mot de passe à l'adresse du serveur <i>/api/login</i> sous forme de requête HTTP POST.</li>\n<li>\n<p>Si le nom d'utilisateur et le mot de passe sont corrects, le serveur génère un <i>jeton</i> qui identifie d'une certaine manière l'utilisateur connecté.</p>\n<ul>\n<li>Le jeton est signé numériquement, le rendant impossible à falsifier (par des moyens cryptographiques)</li>\n</ul>\n</li>\n<li>Le backend répond avec un code d'état indiquant que l'opération a réussi et retourne le jeton avec la réponse.</li>\n<li>Le navigateur enregistre le jeton, par exemple dans l'état d'une application React.</li>\n<li>Lorsque l'utilisateur crée une nouvelle note (ou effectue une autre opération nécessitant une identification), le code React envoie le jeton au serveur avec la requête.</li>\n<li>Le serveur utilise le jeton pour identifier l'utilisateur</li>\n</ul>\n<p>Implémentons d'abord la fonctionnalité de connexion. Installez la bibliothèque <a href=\"https://github.com/auth0/node-jsonwebtoken\">jsonwebtoken</a>, qui nous permet de générer des <a href=\"https://jwt.io/\">jetons web JSON</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> jsonwebtoken</code></pre></div>\n<p>Le code pour la fonctionnalité de connexion est placé dans le fichier <i>controllers/login.js</i>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jsonwebtoken'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> bcrypt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bcrypt'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> loginRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/user'</span><span class=\"token punctuation\">)</span>\n\nloginRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> passwordCorrect <span class=\"token operator\">=</span> user <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span>\n    <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span>\n    <span class=\"token operator\">:</span> <span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>passwordHash<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;&amp;</span> passwordCorrect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token string\">'invalid username or password'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> userForToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>userForToken<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span>\n\n  response\n    <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> token<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> loginRouter</code></pre></div>\n<p>Le code commence par rechercher l'utilisateur dans la base de données en utilisant le <i>nom d'utilisateur</i> joint à la requête.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ensuite, il vérifie le <i>mot de passe</i>, également joint à la requête.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> passwordCorrect <span class=\"token operator\">=</span> user <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span>\n  <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span>\n  <span class=\"token operator\">:</span> <span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>passwordHash<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Comme les mots de passe eux-mêmes ne sont pas enregistrés dans la base de données, mais plutôt des <i>hashes</i> calculés à partir des mots de passe, la méthode <em>bcrypt.compare</em> est utilisée pour vérifier si le mot de passe est correct:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>passwordHash<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Si l'utilisateur n'est pas trouvé ou si le mot de passe est incorrect, la requête reçoit une réponse avec le code d'état <a href=\"https://www.rfc-editor.org/rfc/rfc9110.html#name-401-unauthorized\">401 non autorisé</a>. La raison de l'échec est expliquée dans le corps de la réponse.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;&amp;</span> passwordCorrect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token string\">'invalid username or password'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Si le mot de passe est correct, un jeton est créé avec la méthode <em>jwt.sign</em>. Le jeton contient le nom d'utilisateur et l'identifiant de l'utilisateur sous une forme numériquement signée.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> userForToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>userForToken<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Le jeton a été signé numériquement en utilisant une chaîne de la variable d'environnement <i>SECRET</i> comme <i>secret</i>.\nLa signature numérique garantit que seules les parties qui connaissent le secret peuvent générer un jeton valide.\nLa valeur de la variable d'environnement doit être définie dans le fichier <i>.env</i>.</p>\n<p>Une requête réussie reçoit une réponse avec le code d'état <i>200 OK</i>. Le jeton généré et le nom d'utilisateur de l'utilisateur sont renvoyés dans le corps de la réponse.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">response\n  <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> token<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Il ne reste plus qu'à ajouter le code pour la connexion à l'application en ajoutant le nouveau routeur à <i>app.js</i>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> loginRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./controllers/login'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//...</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/login'</span><span class=\"token punctuation\">,</span> loginRouter<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Essayons de nous connecter en utilisant le client REST de VS Code:</p>\n<picture><img src=\"/static/5c4c0fb60e15ec9c753e541a05002c3f/5a190/17e.png\" alt=\"post de vscode rest avec nom d&#x27;utilisateur/mot de passe\" srcset=\"/static/5c4c0fb60e15ec9c753e541a05002c3f/772e8/17e.png 200w,\n/static/5c4c0fb60e15ec9c753e541a05002c3f/e17e5/17e.png 400w,\n/static/5c4c0fb60e15ec9c753e541a05002c3f/5a190/17e.png 800w,\n/static/5c4c0fb60e15ec9c753e541a05002c3f/c1b63/17e.png 1200w,\n/static/5c4c0fb60e15ec9c753e541a05002c3f/0f586/17e.png 1498w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Cela ne fonctionne pas. Le message suivant est imprimé dans la console:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>node:32911<span class=\"token punctuation\">)</span> UnhandledPromiseRejectionWarning: Error: secretOrPrivateKey must have a value\n    at Object.module.exports <span class=\"token punctuation\">[</span>as sign<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>/Users/mluukkai/opetus/_2019fullstack-koodit/osa3/notes-backend/node_modules/jsonwebtoken/sign.js:101:20<span class=\"token punctuation\">)</span>\n    at loginRouter.post <span class=\"token punctuation\">(</span>/Users/mluukkai/opetus/_2019fullstack-koodit/osa3/notes-backend/controllers/login.js:26:21<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>node:32911<span class=\"token punctuation\">)</span> UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async <span class=\"token keyword\">function</span> without a catch block, or by rejecting a promise <span class=\"token function\">which</span> was not handled with .catch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>. <span class=\"token punctuation\">(</span>rejection id: <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>La commande <em>jwt.sign(userForToken, process.env.SECRET)</em> échoue. Nous avons oublié de définir une valeur pour la variable d'environnement <i>SECRET</i>. Cela peut être n'importe quelle chaîne. Lorsque nous définissons la valeur dans le fichier <i>.env</i> (et redémarrons le serveur), la connexion fonctionne.</p>\n<p>Une connexion réussie renvoie les détails de l'utilisateur et le jeton:</p>\n<picture><img src=\"/static/2e2ddac76483e17fded8f6fcc43fd7d4/5a190/18ea.png\" alt=\"réponse du client rest de VS Code montrant les détails et le jeton\" srcset=\"/static/2e2ddac76483e17fded8f6fcc43fd7d4/772e8/18ea.png 200w,\n/static/2e2ddac76483e17fded8f6fcc43fd7d4/e17e5/18ea.png 400w,\n/static/2e2ddac76483e17fded8f6fcc43fd7d4/5a190/18ea.png 800w,\n/static/2e2ddac76483e17fded8f6fcc43fd7d4/c1b63/18ea.png 1200w,\n/static/2e2ddac76483e17fded8f6fcc43fd7d4/29007/18ea.png 1600w,\n/static/2e2ddac76483e17fded8f6fcc43fd7d4/6f175/18ea.png 2036w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Un nom d'utilisateur ou un mot de passe incorrect renvoie un message d'erreur et le code d'état approprié:</p>\n<picture><img src=\"/static/49fe09c494b9e591fa8811b1772404d5/5a190/19ea.png\" alt=\"réponse du client rest de VS Code pour des détails de connexion incorrects\" srcset=\"/static/49fe09c494b9e591fa8811b1772404d5/772e8/19ea.png 200w,\n/static/49fe09c494b9e591fa8811b1772404d5/e17e5/19ea.png 400w,\n/static/49fe09c494b9e591fa8811b1772404d5/5a190/19ea.png 800w,\n/static/49fe09c494b9e591fa8811b1772404d5/c1b63/19ea.png 1200w,\n/static/49fe09c494b9e591fa8811b1772404d5/29007/19ea.png 1600w,\n/static/49fe09c494b9e591fa8811b1772404d5/aea0a/19ea.png 2018w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Limiter la création de nouvelles notes aux utilisateurs connectés</h3>\n<p>Changeons la création de nouvelles notes de manière à ce qu'elle ne soit possible que si la requête post a un jeton valide attaché. La note est ensuite enregistrée dans la liste des notes de l'utilisateur identifié par le jeton.</p>\n<p>Il existe plusieurs façons d'envoyer le jeton du navigateur au serveur. Nous utiliserons l'en-tête <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization\">Authorization</a>. L'en-tête indique également quel <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication#Authentication_schemes\">schéma d'authentification</a> est utilisé. Cela peut être nécessaire si le serveur offre plusieurs façons de s'authentifier.\nL'identification du schéma indique au serveur comment les informations d'identification jointes doivent être interprétées.</p>\n<p>Le schéma <i>Bearer</i> convient à nos besoins.</p>\n<p>En pratique, cela signifie que si le jeton est, par exemple, la chaîne <i>eyJhbGciOiJIUzI1NiIsInR5c2VybmFtZSI6Im1sdXVra2FpIiwiaW</i>, l'en-tête Authorization aura la valeur :</p>\n<pre>\nBearer eyJhbGciOiJIUzI1NiIsInR5c2VybmFtZSI6Im1sdXVra2FpIiwiaW\n</pre>\n<p>La création de nouvelles notes changera ainsi (<i>controllers/notes.js</i>):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jsonwebtoken'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getTokenFrom</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">request</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> authorization <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'authorization'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authorization <span class=\"token operator\">&amp;&amp;</span> authorization<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bearer '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> authorization<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bearer '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\nnotesRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> decodedToken <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span><span class=\"token function\">getTokenFrom</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token string\">'token invalid'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">important</span><span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>_id\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> savedNote <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  user<span class=\"token punctuation\">.</span>notes <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>savedNote<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>savedNote<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>La fonction d'aide <em>getTokenFrom</em> isole le jeton de l'en-tête <i>authorization</i>. La validité du jeton est vérifiée avec <em>jwt.verify</em>. La méthode décode également le jeton ou renvoie l'objet sur lequel le jeton était basé.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> decodedToken <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Si le jeton est manquant ou invalide, l'exception <i>JsonWebTokenError</i> est levée. Nous devons étendre le middleware de gestion des erreurs pour prendre en charge ce cas particulier:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">errorHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'CastError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token string\">'malformatted id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'ValidationError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span>  <span class=\"token string\">'JsonWebTokenError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>L'objet décodé du jeton contient les champs <i>username</i> et <i>id</i>, qui indiquent au serveur qui a effectué la requête.</p>\n<p>Si l'objet décodé du jeton ne contient pas l'identité de l'utilisateur (si decodedToken.id est indéfini), le code d'état d'erreur <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2\">401 non autorisé</a> est renvoyé et la raison de l'échec est expliquée dans le corps de la réponse.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token string\">'token invalid'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Lorsque l'identité de l'auteur de la requête est résolue, l'exécution continue comme auparavant.</p>\n<p>Une nouvelle note peut maintenant être créée en utilisant Postman si l'en-tête <i>authorization</i> se voit attribuer la valeur correcte, la chaîne <i>Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ</i>, où la seconde valeur est le jeton renvoyé par l'opération <i>login</i>.</p>\n<p>Avec Postman, cela ressemble à ceci:</p>\n<picture><img src=\"/static/fbedde4a1b76cfc0594778a6833312b2/5a190/20e.png\" alt=\"postman ajoutant un jeton bearer\" srcset=\"/static/fbedde4a1b76cfc0594778a6833312b2/772e8/20e.png 200w,\n/static/fbedde4a1b76cfc0594778a6833312b2/e17e5/20e.png 400w,\n/static/fbedde4a1b76cfc0594778a6833312b2/5a190/20e.png 800w,\n/static/fbedde4a1b76cfc0594778a6833312b2/c1b63/20e.png 1200w,\n/static/fbedde4a1b76cfc0594778a6833312b2/5d6a0/20e.png 1580w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>et avec le client REST de Visual Studio Code</p>\n<picture><img src=\"/static/b52fbb45633b056b6e67b02bda722bc8/5a190/21e.png\" alt=\"exemple vscode ajoutant un jeton bearer\" srcset=\"/static/b52fbb45633b056b6e67b02bda722bc8/772e8/21e.png 200w,\n/static/b52fbb45633b056b6e67b02bda722bc8/e17e5/21e.png 400w,\n/static/b52fbb45633b056b6e67b02bda722bc8/5a190/21e.png 800w,\n/static/b52fbb45633b056b6e67b02bda722bc8/c1b63/21e.png 1200w,\n/static/b52fbb45633b056b6e67b02bda722bc8/29007/21e.png 1600w,\n/static/b52fbb45633b056b6e67b02bda722bc8/dcb79/21e.png 1700w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Le code actuel de l'application peut être trouvé sur <a href=\"https://github.com/fullstack-hy2020/part3-notes-backend/tree/part4-9\">Github</a>, branche <i>part4-9</i>.</p>\n<p>Si l'application a plusieurs interfaces nécessitant une identification, la validation du JWT devrait être séparée dans son propre middleware. Une bibliothèque existante comme <a href=\"https://www.npmjs.com/package/express-jwt\">express-jwt</a> pourrait également être utilisée.</p>\n<h3>Problèmes de l'authentification basée sur des jetons</h3>\n<p>L'authentification par jeton est assez facile à mettre en oeuvre, mais elle contient un problème. Une fois que l'utilisateur de l'API, par exemple une application React, obtient un jeton, l'API fait entièrement confiance au détenteur du jeton. Que faire si les droits d'accès du détenteur du jeton doivent être révoqués?</p>\n<p>Il existe deux solutions à ce problème. La plus simple consiste à limiter la période de validité d'un jeton:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">loginRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> passwordCorrect <span class=\"token operator\">=</span> user <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span>\n    <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span>\n    <span class=\"token operator\">:</span> <span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>passwordHash<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;&amp;</span> passwordCorrect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token string\">'invalid username or password'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> userForToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// token expires in 60*60 seconds, that is, in one hour</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    userForToken<span class=\"token punctuation\">,</span> </span><span class=\"gatsby-highlight-code-line\">    process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">expiresIn</span><span class=\"token operator\">:</span> <span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">60</span> <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span></span>\n  response\n    <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> token<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Une fois que le jeton expire, l'application cliente doit obtenir un nouveau jeton. Habituellement, cela se fait en obligeant l'utilisateur à se reconnecter à l'application.</p>\n<p>Le middleware de gestion des erreurs devrait être étendu pour fournir une erreur appropriée en cas de jeton expiré:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">errorHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'CastError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token string\">'malformatted id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'ValidationError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'JsonWebTokenError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token string\">'invalid token'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'TokenExpiredError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token string\">'token expired'</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La durée de validité plus courte, la solution est plus sûre. Ainsi, si le jeton tombe entre de mauvaises mains ou si l'accès de l'utilisateur au système doit être révoqué, le jeton n'est utilisable que pendant une durée limitée. D'autre part, une durée de validité courte force l'utilisateur à se connecter plus fréquemment au système, ce qui peut être pénible.</p>\n<p>L'autre solution consiste à enregistrer des informations sur chaque jeton dans la base de données du backend et à vérifier pour chaque requête API si les droits d'accès correspondant aux jetons sont toujours valides. Avec ce schéma, les droits d'accès peuvent être révoqués à tout moment. Ce type de solution est souvent appelé une <i>session côté serveur</i>.</p>\n<p>L'aspect négatif des sessions côté serveur est la complexité accrue dans le backend et aussi l'effet sur les performances puisque la validité du jeton doit être vérifiée pour chaque requête API dans la base de données. L'accès à la base de données est considérablement plus lent par rapport à la vérification de la validité du jeton lui-même. C'est pourquoi il est assez courant d'enregistrer la session correspondant à un jeton dans une base de données <i>clé-valeur</i> comme <a href=\"https://redis.io/\">Redis</a>, qui est limitée en fonctionnalités par rapport, par exemple, à MongoDB ou à une base de données relationnelle, mais extrêmement rapide dans certains scénarios d'utilisation.</p>\n<p>Lorsque les sessions côté serveur sont utilisées, le jeton est souvent juste une chaîne aléatoire, qui n'inclut pas d'informations sur l'utilisateur, comme c'est souvent le cas avec les jetons jwt. Pour chaque requête API, le serveur récupère les informations pertinentes sur l'identité de l'utilisateur depuis la base de données. Il est également assez courant que, au lieu d'utiliser l'en-tête d'autorisation, les <i>cookies</i> soient utilisés comme mécanisme pour transférer le jeton entre le client et le serveur.</p>\n<h3>Notes de fin</h3>\n<p>Il y a eu de nombreux changements dans le code qui ont causé un problème typique pour un projet logiciel en rapide évolution: la plupart des tests ont échoué. Comme cette partie du cours est déjà saturée de nouvelles informations, nous laisserons la réparation des tests en tant qu'exercice facultatif.</p>\n<p>Les noms d'utilisateur, les mots de passe et les applications utilisant l'authentification par jeton doivent toujours être utilisés via <a href=\"https://en.wikipedia.org/wiki/HTTPS\">HTTPS</a>. Nous pourrions utiliser un serveur <a href=\"https://nodejs.org/api/https.html\">HTTPS</a> de Node dans notre application au lieu du serveur <a href=\"https://nodejs.org/docs/latest-v8.x/api/http.html\">HTTP</a> (cela nécessite plus de configuration). D'autre part, la version de production de notre application est sur Fly.io, donc notre application reste sécurisée : Fly.io achemine tout le trafic entre un navigateur et le serveur Fly.io via HTTPS.</p>\n<p>Nous mettrons en oeuvre la connexion au frontend dans la <a href=\"/fr/part5\">partie suivante</a>.</p>\n<p>REMARQUE: À ce stade, dans l'application de prise de notes déployée, il est prévu que la fonctionnalité de création d'une note cesse de fonctionner car la fonction de connexion du backend n'est pas encore liée au frontend.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercices 4.15.-4.23.</h3>\n<p>Dans les exercices suivants, les bases de la gestion des utilisateurs seront implémentées pour l'application Bloglist. La manière la plus sûre est de suivre l'histoire de la partie 4 du chapitre <a href=\"/en/part4/user_administration\">Administration des utilisateurs</a> au chapitre <a href=\"/en/part4/token_authentication\">Authentification par jeton</a>. Vous pouvez bien sûr aussi utiliser votre créativité.</p>\n<p><strong>Encore un avertissement:</strong> Si vous remarquez que vous mélangez les appels async/await et <em>then</em>, il est à 99 % certain que vous faites quelque chose de mal. Utilisez l'un ou l'autre, mais jamais les deux.</p>\n<h4>4.15 : expansion de bloglist, étape3</h4>\n<p>Mettez en oeuvre un moyen de créer de nouveaux utilisateurs en effectuant une requête HTTP POST à l'adresse <i>api/users</i>. Les utilisateurs ont un <i>nom d'utilisateur, un mot de passe et un nom</i>.</p>\n<p>Ne sauvegardez pas les mots de passe dans la base de données en texte clair, mais utilisez la bibliothèque <i>bcrypt</i> comme nous l'avons fait dans la partie 4 du chapitre <a href=\"/en/part4/user_administration#creating-users\">Créer de nouveaux utilisateurs</a>.</p>\n<p><strong>NB</strong> Certains utilisateurs de Windows ont eu des problèmes avec <i>bcrypt</i>. Si vous rencontrez des problèmes, supprimez la bibliothèque avec la commande</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> uninstall bcrypt </code></pre></div>\n<p>et installez <a href=\"https://www.npmjs.com/package/bcryptjs\">bcryptjs</a> à la place.</p>\n<p>Mettez en oeuvre un moyen de voir les détails de tous les utilisateurs en effectuant une requête HTTP appropriée.</p>\n<p>La liste des utilisateurs peut, par exemple, ressembler à ceci:</p>\n<picture><img src=\"/static/b59bda1bd7e5987a5c805332d509e516/5a190/22.png\" alt=\"api/users du navigateur affiche les données JSON de deux utilisateurs\" srcset=\"/static/b59bda1bd7e5987a5c805332d509e516/772e8/22.png 200w,\n/static/b59bda1bd7e5987a5c805332d509e516/e17e5/22.png 400w,\n/static/b59bda1bd7e5987a5c805332d509e516/5a190/22.png 800w,\n/static/b59bda1bd7e5987a5c805332d509e516/c1b63/22.png 1200w,\n/static/b59bda1bd7e5987a5c805332d509e516/9685e/22.png 1336w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>4.16* : expansion de bloglist, étape4</h4>\n<p>Ajoutez une fonctionnalité qui impose les restrictions suivantes pour la création de nouveaux utilisateurs : Le nom d'utilisateur et le mot de passe doivent être fournis. Le nom d'utilisateur et le mot de passe doivent avoir au moins 3 caractères de long. Le nom d'utilisateur doit être unique.</p>\n<p>L'opération doit répondre avec un code de statut approprié et une sorte de message d'erreur si un utilisateur invalide est créé.</p>\n<p><strong>NB</strong> Ne testez pas les restrictions de mot de passe avec les validations Mongoose. Ce n'est pas une bonne idée car le mot de passe reçu par le backend et le hash du mot de passe enregistré dans la base de données ne sont pas la même chose. La longueur du mot de passe doit être validée dans le contrôleur comme nous l'avons fait dans la <a href=\"/en/part3/node_js_and_express\">partie 3</a> avant d'utiliser la validation Mongoose.</p>\n<p>Mettez également en oeuvre des tests qui garantissent que les utilisateurs invalides ne sont pas créés et qu'une opération d'ajout d'utilisateur invalide retourne un code de statut et un message d'erreur appropriés.</p>\n<h4>4.17 : expansion de bloglist, étape5</h4>\n<p>Étendez les blogs pour que chaque blog contienne des informations sur le créateur du blog.</p>\n<p>Modifiez l'ajout de nouveaux blogs pour que, lorsqu'un nouveau blog est créé, <i>n'importe quel</i> utilisateur de la base de données soit désigné comme son créateur (par exemple, le premier trouvé). Implémentez cela selon la partie 4 du chapitre <a href=\"/en/part4/user_administration#populate\">populate</a>.\nPeu importe quel utilisateur est désigné comme le créateur pour le moment. La fonctionnalité est terminée dans l'exercice 4.19.</p>\n<p>Modifiez la liste de tous les blogs pour que les informations de l'utilisateur créateur soient affichées avec le blog:</p>\n<picture><img src=\"/static/199682ad74f50747c90997a967856ffa/5a190/23e.png\" alt=\"api/blogs intègre les informations de l&#x27;utilisateur créateur dans les données JSON\" srcset=\"/static/199682ad74f50747c90997a967856ffa/772e8/23e.png 200w,\n/static/199682ad74f50747c90997a967856ffa/e17e5/23e.png 400w,\n/static/199682ad74f50747c90997a967856ffa/5a190/23e.png 800w,\n/static/199682ad74f50747c90997a967856ffa/c1b63/23e.png 1200w,\n/static/199682ad74f50747c90997a967856ffa/ae28e/23e.png 1598w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>et que la liste de tous les utilisateurs affiche également les blogs créés par chaque utilisateur:</p>\n<picture><img src=\"/static/ac9967c89785b33440e9b1b4e87c17e5/5a190/24e.png\" alt=\"api/users intègre les blogs dans les données JSON\" srcset=\"/static/ac9967c89785b33440e9b1b4e87c17e5/772e8/24e.png 200w,\n/static/ac9967c89785b33440e9b1b4e87c17e5/e17e5/24e.png 400w,\n/static/ac9967c89785b33440e9b1b4e87c17e5/5a190/24e.png 800w,\n/static/ac9967c89785b33440e9b1b4e87c17e5/c1b63/24e.png 1200w,\n/static/ac9967c89785b33440e9b1b4e87c17e5/9f9a4/24e.png 1560w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>4.18 : expansion de bloglist, étape6</h4>\n<p>Mettez en oeuvre l'authentification basée sur les jetons selon le chapitre <a href=\"/en/part4/token_authentication\">Authentification par jeton</a> de la partie 4.</p>\n<h4>4.19 : expansion de bloglist, étape7</h4>\n<p>Modifiez l'ajout de nouveaux blogs pour qu'il ne soit possible que si un jeton valide est envoyé avec la requête HTTP POST. L'utilisateur identifié par le jeton est désigné comme le créateur du blog.</p>\n<h4>4.20* : expansion de bloglist, étape8</h4>\n<p><a href=\"/en/part4/token_authentication\">Cet exemple</a> de la partie 4 montre comment extraire le jeton de l'en-tête avec la fonction d'aide <em>getTokenFrom</em> dans <i>controllers/blogs.js</i>.</p>\n<p>Si vous avez utilisé la même solution, refactorisez l'extraction du jeton en un <a href=\"/en/part3/node_js_and_express#middleware\">middleware</a>. Le middleware devrait prendre le jeton de l'en-tête <i>Authorization</i> et le placer dans le champ <i>token</i> de l'objet <i>request</i>.</p>\n<p>En d'autres termes, si vous enregistrez ce middleware dans le fichier <i>app.js</i> avant toutes les routes</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>tokenExtractor<span class=\"token punctuation\">)</span></code></pre></div>\n<p>les routes peuvent accéder au jeton avec <em>request.token</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">blogsRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n  <span class=\"token keyword\">const</span> decodedToken <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>souvenez-vous qu'une <a href=\"/en/part3/node_js_and_express#middleware\">fonction middleware</a> normale est une fonction avec trois paramètres, qui, à la fin, appelle le dernier paramètre <i>next</i> pour transférer le contrôle au prochain middleware:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">tokenExtractor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// code that extracts the token</span>\n\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>4.21* : expansion de bloglist, étape9</h4>\n<p>Modifiez l'opération de suppression de blog de manière à ce qu'un blog puisse être supprimé uniquement par l'utilisateur qui l'a ajouté. Par conséquent, la suppression d'un blog n'est possible que si le jeton envoyé avec la requête est le même que celui du créateur du blog.</p>\n<p>Si une tentative de suppression d'un blog est faite sans jeton ou par un utilisateur invalide, l'opération doit retourner un code de statut approprié.</p>\n<p>Notez que si vous récupérez un blog de la base de données,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> blog <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Blog<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>le champ <i>blog.user</i> ne contient pas une chaîne de caractères, mais un objet. Donc, si vous voulez comparer l'identifiant de l'objet récupéré de la base de données avec un identifiant sous forme de chaîne, une opération de comparaison normale ne fonctionnera pas. L'identifiant récupéré de la base de données doit d'abord être converti en chaîne de caractères.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> blog<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> userid<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">...</span></code></pre></div>\n<h4>4.22* : expansion de bloglist, étape10</h4>\n<p>Les opérations de création d'un nouveau blog et de suppression d'un blog doivent toutes deux déterminer l'identité de l'utilisateur qui effectue l'opération. Le middleware <em>tokenExtractor</em> que nous avons réalisé dans l'exercice 4.20 aide, mais les gestionnaires des opérations <i>post</i> et <i>delete</i> doivent toujours déterminer qui est l'utilisateur associé à un jeton spécifique.</p>\n<p>Créez maintenant un nouveau middleware <em>userExtractor</em>, qui identifie l'utilisateur et le définit dans l'objet de requête. Lorsque vous enregistrez le middleware dans <i>app.js</i></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>userExtractor<span class=\"token punctuation\">)</span></code></pre></div>\n<p>l'utilisateur sera défini dans le champ <em>request.user</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">blogsRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// get user from request object</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>user\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nblogsRouter<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// get user from request object</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>user\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Notez qu'il est possible d'enregistrer un middleware uniquement pour un ensemble spécifique de routes. Ainsi, au lieu d'utiliser <em>userExtractor</em> avec toutes les routes,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> middleware <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../utils/middleware'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token comment\">// use the middleware in all routes</span>\n<span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>userExtractor<span class=\"token punctuation\">)</span></span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/blogs'</span><span class=\"token punctuation\">,</span> blogsRouter<span class=\"token punctuation\">)</span>  \napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users'</span><span class=\"token punctuation\">,</span> usersRouter<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/login'</span><span class=\"token punctuation\">,</span> loginRouter<span class=\"token punctuation\">)</span></code></pre></div>\n<p>nous pourrions l'enregistrer pour qu'il soit exécuté uniquement avec les routes du chemin <i>/api/blogs</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> middleware <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../utils/middleware'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token comment\">// use the middleware only in /api/blogs routes</span>\n<span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/blogs'</span><span class=\"token punctuation\">,</span> middleware<span class=\"token punctuation\">.</span>userExtractor<span class=\"token punctuation\">,</span> blogsRouter<span class=\"token punctuation\">)</span></span>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users'</span><span class=\"token punctuation\">,</span> usersRouter<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/login'</span><span class=\"token punctuation\">,</span> loginRouter<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Comme on peut le voir, cela se fait en chaînant plusieurs middlewares en tant que paramètre de la fonction <i>use</i>. Il serait également possible d'enregistrer un middleware uniquement pour une opération spécifique:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> middleware <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../utils/middleware'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> middleware<span class=\"token punctuation\">.</span>userExtractor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>4.23* : expansion de bloglist, étape11</h4>\n<p>Après l'ajout de l'authentification basée sur les jetons, les tests pour l'ajout d'un nouveau blog ont échoué. Corrigez les tests. Écrivez également un nouveau test pour vous assurer que l'ajout d'un blog échoue avec le code de statut approprié <i>401 Non autorisé</i> si un jeton n'est pas fourni.</p>\n<p><a href=\"https://github.com/visionmedia/supertest/issues/398\">Ceci</a> pourrait être très utile pour effectuer la correction.</p>\n<p>C'est le dernier exercice de cette partie du cours et il est temps de pousser votre code sur GitHub et de marquer tous vos exercices terminés dans le <a href=\"https://studies.cs.helsinki.fi/stats/courses/fullstackopen\">système de soumission</a> des exercices.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/f800638504cdf371a12947fc31d52030/part-4.svg"},"part":4,"letter":"d","lang":"fr"}}},"pageContext":{"part":4,"letter":"d","lang":"fr"}},"staticQueryHashes":["3128451518"]}
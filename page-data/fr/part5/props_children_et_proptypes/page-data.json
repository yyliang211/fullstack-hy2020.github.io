{"componentChunkName":"component---src-templates-content-template-js","path":"/fr/part5/props_children_et_proptypes","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<h3>Afficher le formulaire de connexion uniquement lorsque c'est approprié</h3>\n<p>Modifions l'application pour que le formulaire de connexion ne soit pas affiché par défaut:</p>\n<picture><img src=\"/static/da248f79ad2c71a9e834c174065dc694/5a190/10e.png\" alt=\"navigateur montrant le bouton de connexion par défaut\" srcset=\"/static/da248f79ad2c71a9e834c174065dc694/772e8/10e.png 200w,\n/static/da248f79ad2c71a9e834c174065dc694/e17e5/10e.png 400w,\n/static/da248f79ad2c71a9e834c174065dc694/5a190/10e.png 800w,\n/static/da248f79ad2c71a9e834c174065dc694/c1b63/10e.png 1200w,\n/static/da248f79ad2c71a9e834c174065dc694/3ceac/10e.png 1456w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Le formulaire de connexion apparaît lorsque l'utilisateur appuie sur le bouton <i>login</i>:</p>\n<picture><img src=\"/static/bb9909156016418fc4cc9a1b60424f13/5a190/11e.png\" alt=\"utilisateur sur l&#x27;écran de connexion sur le point d&#x27;appuyer sur annuler\" srcset=\"/static/bb9909156016418fc4cc9a1b60424f13/772e8/11e.png 200w,\n/static/bb9909156016418fc4cc9a1b60424f13/e17e5/11e.png 400w,\n/static/bb9909156016418fc4cc9a1b60424f13/5a190/11e.png 800w,\n/static/bb9909156016418fc4cc9a1b60424f13/c1b63/11e.png 1200w,\n/static/bb9909156016418fc4cc9a1b60424f13/8b936/11e.png 1368w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>L'utilisateur peut fermer le formulaire de connexion en cliquant sur le bouton <i>cancel</i>.</p>\n<p>Commençons par extraire le formulaire de connexion dans son propre composant:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">LoginForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n   handleSubmit<span class=\"token punctuation\">,</span>\n   handleUsernameChange<span class=\"token punctuation\">,</span>\n   handlePasswordChange<span class=\"token punctuation\">,</span>\n   username<span class=\"token punctuation\">,</span>\n   password\n  <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          username\n          <span class=\"token operator\">&lt;</span>input\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleUsernameChange<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          password\n          <span class=\"token operator\">&lt;</span>input\n            type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span>\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>password<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handlePasswordChange<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> LoginForm</code></pre></div>\n<p>L'état et toutes les fonctions qui s'y rapportent sont définis à l'extérieur du composant et sont passés au composant sous forme de props.</p>\n<p>Remarquez que les props sont assignées à des variables par le biais de la <i>décomposition</i>, ce qui signifie qu'au lieu d'écrire:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">LoginForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          username\n          <span class=\"token operator\">&lt;</span>input\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span>\n            name<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token comment\">// ...</span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>où les propriétés de l'objet <em>props</em> sont accessibles par exemple via <em>props.handleSubmit</em>, les propriétés sont directement assignées à leurs propres variables.</p>\n<p>Une manière rapide de mettre en oeuvre la fonctionnalité consiste à modifier la fonction <em>loginForm</em> du composant <i>App</i> de cette façon:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loginVisible<span class=\"token punctuation\">,</span> setLoginVisible<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loginForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> hideWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> loginVisible <span class=\"token operator\">?</span> <span class=\"token string\">'none'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> showWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> loginVisible <span class=\"token operator\">?</span> <span class=\"token string\">''</span> <span class=\"token operator\">:</span> <span class=\"token string\">'none'</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hideWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setLoginVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>log <span class=\"token keyword\">in</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>showWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>LoginForm\n            username<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span>\n            password<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>password<span class=\"token punctuation\">}</span>\n            handleUsernameChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n            handlePasswordChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n            handleSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleLogin<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setLoginVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>cancel<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>L'état du composant <i>App</i> contient maintenant le booléen <i>loginVisible</i>, qui définit si le formulaire de connexion doit être montré à l'utilisateur ou non.</p>\n<p>La valeur de <em>loginVisible</em> est basculée avec deux boutons. Les deux boutons ont leurs gestionnaires d'événements définis directement dans le composant:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setLoginVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>log <span class=\"token keyword\">in</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setLoginVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>cancel<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>La visibilité du composant est définie en donnant au composant une règle de style <a href=\"/fr/part2/styliser_vos_applications_react#styles-en-ligne\">en ligne</a>, où la valeur de la propriété <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/display\">display</a> est <i>none</i> si nous ne voulons pas que le composant soit affiché:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> hideWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> loginVisible <span class=\"token operator\">?</span> <span class=\"token string\">'none'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> showWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> loginVisible <span class=\"token operator\">?</span> <span class=\"token string\">''</span> <span class=\"token operator\">:</span> <span class=\"token string\">'none'</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hideWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token comment\">// button</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>showWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token comment\">// button</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p>Nous utilisons une fois de plus l'opérateur ternaire \"point d'interrogation\". Si <em>loginVisible</em> est <i>true</i>, alors la règle CSS du composant sera:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">display</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Si <em>loginVisible</em> est <i>false</i>, alors <i>display</i> ne recevra aucune valeur liée à la visibilité du composant.</p>\n<h3>Les enfants des composants, alias props.children</h3>\n<p>Le code lié à la gestion de la visibilité du formulaire de connexion pourrait être considéré comme sa propre entité logique, et pour cette raison, il serait bon de l'extraire du composant <i>App</i> pour le placer dans un composant séparé.</p>\n<p>Notre objectif est de mettre en oeuvre un nouveau composant <i>Togglable</i> qui peut être utilisé de la manière suivante:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">'login'</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>LoginForm\n    username<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span>\n    password<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>password<span class=\"token punctuation\">}</span>\n    handleUsernameChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    handlePasswordChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    handleSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleLogin<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span></code></pre></div>\n<p>La manière dont le composant est utilisé est légèrement différente de nos composants précédents. Le composant a des balises d'ouverture et de fermeture qui entourent un composant <i>LoginForm</i>. Dans la terminologie React, <i>LoginForm</i> est un composant enfant de <i>Togglable</i>.</p>\n<p>Nous pouvons ajouter tous les éléments React que nous voulons entre les balises d'ouverture et de fermeture de <i>Togglable</i>, comme ceci par exemple:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">\"reveal\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token keyword\">this</span> line is at start hidden<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>also <span class=\"token keyword\">this</span> is hidden<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span></code></pre></div>\n<p>Le code pour le composant <i>Togglable</i> est montré ci-dessous:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Togglable</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>visible<span class=\"token punctuation\">,</span> setVisible<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> hideWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> visible <span class=\"token operator\">?</span> <span class=\"token string\">'none'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> showWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> visible <span class=\"token operator\">?</span> <span class=\"token string\">''</span> <span class=\"token operator\">:</span> <span class=\"token string\">'none'</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggleVisibility</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visible<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hideWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleVisibility<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>buttonLabel<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>showWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleVisibility<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>cancel<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Togglable</code></pre></div>\n<p>La partie nouvelle et intéressante du code est <a href=\"https://react.dev/learn/passing-props-to-a-component#passing-jsx-as-children\">props.children</a>, qui est utilisée pour référencer les composants enfants du composant. Les composants enfants sont les éléments React que nous définissons entre les balises d'ouverture et de fermeture d'un composant.</p>\n<p>Cette fois, les enfants sont rendus dans le code utilisé pour le rendu du composant lui-même:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>showWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleVisibility<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>cancel<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p>Contrairement aux props \"normales\" que nous avons vues précédemment, <i>children</i> est automatiquement ajouté par React et existe toujours. Si un composant est défini avec une balise de fermeture automatique <em>/></em>, comme ceci:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Note\n  key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n  note<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">}</span>\n  toggleImportance<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">toggleImportanceOf</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>Alors, <i>props.children</i> est un tableau vide.</p>\n<p>Le composant <i>Togglable</i> est réutilisable et nous pouvons l'utiliser pour ajouter une fonctionnalité de basculement de visibilité similaire au formulaire utilisé pour créer de nouvelles notes.</p>\n<p>Avant cela, extrayons le formulaire de création de notes dans un composant:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">NoteForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onSubmit<span class=\"token punctuation\">,</span> handleChange<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Create a <span class=\"token keyword\">new</span> <span class=\"token class-name\">note</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleChange<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>save<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ensuite, définissons le composant de formulaire à l'intérieur d'un composant <i>Togglable</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">\"new note\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>NoteForm\n    onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addNote<span class=\"token punctuation\">}</span>\n    value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newNote<span class=\"token punctuation\">}</span>\n    handleChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleNoteChange<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span></code></pre></div>\n<p>Vous pouvez trouver le code de notre application actuelle dans son intégralité dans la branche <i>part5-4</i> <a href=\"https://github.com/fullstack-hy2020/part2-notes-frontend/tree/part5-4\">de ce dépôt GitHub</a>.</p>\n<h3>État des formulaires</h3>\n<p>L'état de l'application est actuellement dans le composant <em>App</em>.</p>\n<p>La documentation de React dit ce qui <a href=\"https://react.dev/learn/sharing-state-between-components\">suit</a> sur l'endroit où placer l'état:</p>\n<p><i>Parfois, vous voulez que l'état de deux composants change toujours ensemble. Pour ce faire, retirez l'état de ces deux composants, déplacez-le vers leur parent commun le plus proche, puis transmettez-le à ces composants via les props. Cela est connu sous le nom de remontée d'état, et c’est l’une des choses les plus courantes que vous ferez en écrivant du code React.</i></p>\n<p>Si nous réfléchissons à l'état des formulaires, donc par exemple au contenu d'une nouvelle note avant qu'elle n'ait été créée, le composant <em>App</em> n'en a besoin pour rien.\nNous pourrions tout aussi bien déplacer l'état des formulaires vers les composants correspondants.</p>\n<p>Le composant pour une note change comme suit:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">NoteForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> createNote <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newNote<span class=\"token punctuation\">,</span> setNewNote<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addNote</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">createNote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> newNote<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">important</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">setNewNote</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Create a <span class=\"token keyword\">new</span> <span class=\"token class-name\">note</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addNote<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newNote<span class=\"token punctuation\">}</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token function\">setNewNote</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>save<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> NoteForm</code></pre></div>\n<p><strong>NOTE</strong> En même temps, nous avons changé le comportement de l'application de sorte que les nouvelles notes soient importantes par défaut, c'est-à-dire que le champ <i>important</i> reçoit la valeur <i>true</i>.</p>\n<p>L'attribut d'état <i>newNote</i> et le gestionnaire d'événements responsable de sa modification ont été déplacés du composant <em>App</em> au composant responsable du formulaire de note.</p>\n<p>Il ne reste qu'une seule prop, la fonction <em>createNote</em>, que le formulaire appelle lorsqu'une nouvelle note est créée.</p>\n<p>Le composant <em>App</em> devient plus simple maintenant que nous nous sommes débarrassés de l'état <i>newNote</i> et de son gestionnaire d'événements.\nLa fonction <em>addNote</em> pour créer de nouvelles notes reçoit une nouvelle note en paramètre, et la fonction est la seule prop que nous envoyons au formulaire:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addNote</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">noteObject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>    noteService\n      <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>noteObject<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">returnedNote</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>returnedNote<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noteForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">'new note'</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>NoteForm createNote<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addNote<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nous pourrions faire de même pour le formulaire de connexion, mais nous laisserons cela pour un exercice optionnel.</p>\n<p>Le code de l'application peut être trouvé sur <a href=\"https://github.com/fullstack-hy2020/part2-notes-frontend/tree/part5-5\">GitHub</a>,\nbranche <i>part5-5</i>.</p>\n<h3>Références aux composants avec ref</h3>\n<p>Notre mise en oeuvre actuelle est assez bonne; il y a un aspect qui pourrait être amélioré.</p>\n<p>Après la création d'une nouvelle note, il serait logique de masquer le formulaire de la nouvelle note. Actuellement, le formulaire reste visible. Il y a un léger problème pour masquer le formulaire. La visibilité est contrôlée avec la variable <i>visible</i> à l'intérieur du composant <i>Togglable</i>. Comment pouvons-nous y accéder de l'extérieur du composant ?</p>\n<p>Il existe de nombreuses manières d'implémenter la fermeture du formulaire depuis le composant parent, mais utilisons le mécanisme de <a href=\"https://react.dev/learn/referencing-values-with-refs\">ref</a> de React, qui offre une référence au composant.</p>\n<p>Faisons les changements suivants au composant <i>App</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect<span class=\"token punctuation\">,</span> useRef <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> noteFormRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noteForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">'new note'</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>noteFormRef<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span>      <span class=\"token operator\">&lt;</span>NoteForm createNote<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addNote<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Le hook <a href=\"https://react.dev/reference/react/useRef\">useRef</a> est utilisé pour créer une référence <i>noteFormRef</i>, qui est attribuée au composant <i>Togglable</i> contenant le formulaire de création de note. La variable <i>noteFormRef</i> agit comme une référence au composant. Ce hook garantit que la même référence (ref) est conservée tout au long des rendus du composant.</p>\n<p>Nous apportons également les changements suivants au composant <i>Togglable</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> forwardRef<span class=\"token punctuation\">,</span> useImperativeHandle <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> Togglable <span class=\"token operator\">=</span> <span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> refs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>visible<span class=\"token punctuation\">,</span> setVisible<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> hideWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> visible <span class=\"token operator\">?</span> <span class=\"token string\">'none'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> showWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> visible <span class=\"token operator\">?</span> <span class=\"token string\">''</span> <span class=\"token operator\">:</span> <span class=\"token string\">'none'</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggleVisibility</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visible<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useImperativeHandle</span><span class=\"token punctuation\">(</span>refs<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      toggleVisibility</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hideWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleVisibility<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>buttonLabel<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>showWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleVisibility<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>cancel<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Togglable</code></pre></div>\n<p>La fonction qui crée le composant est encapsulée à l'intérieur d'un appel de fonction <a href=\"https://react.dev/reference/react/forwardRef\">forwardRef</a>. De cette manière, le composant peut accéder à la référence qui lui est attribuée.</p>\n<p>Le composant utilise le hook <a href=\"https://react.dev/reference/react/useImperativeHandle\">useImperativeHandle</a> pour rendre sa fonction <i>toggleVisibility</i> disponible à l'extérieur du composant.</p>\n<p>Nous pouvons maintenant masquer le formulaire en appelant <i>noteFormRef.current.toggleVisibility()</i> après qu'une nouvelle note a été créée:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addNote</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">noteObject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    noteFormRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">toggleVisibility</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>    noteService\n      <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>noteObject<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">returnedNote</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>     \n        <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>returnedNote<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Pour résumer, la fonction <a href=\"https://react.dev/reference/react/useImperativeHandle\">useImperativeHandle</a> est un hook de React, qui est utilisé pour définir des fonctions dans un composant, qui peuvent être invoquées de l'extérieur du composant.</p>\n<p>Cette astuce fonctionne pour changer l'état d'un composant, mais elle semble un peu désagréable. Nous aurions pu accomplir la même fonctionnalité avec un code légèrement plus propre en utilisant les composants basés sur les classes du \"vieux React\". Nous examinerons ces composants de classe pendant la partie 7 du matériel du cours. Jusqu'à présent, c'est la seule situation où l'utilisation des hooks de React mène à un code qui n'est pas plus propre qu'avec les composants de classe.</p>\n<p>Il existe également <a href=\"https://react.dev/learn/manipulating-the-dom-with-refs\">d'autres cas d'utilisation</a> pour les refs que l'accès aux composants React.</p>\n<p>Vous pouvez trouver le code de notre application actuelle dans son intégralité dans la branche <i>part5-6</i> de <a href=\"https://github.com/fullstack-hy2020/part2-notes-frontend/tree/part5-6\">ce dépôt GitHub</a>.</p>\n<h3>Un point sur les composants</h3>\n<p>Lorsque nous définissons un composant en React:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Togglable</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">...</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And use it like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>togglable1<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    first\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">\"2\"</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>togglable2<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    second\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">\"3\"</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>togglable3<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    third\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p>Nous créons <i>trois instances distinctes du composant</i> qui ont toutes leur état séparé:</p>\n<picture><img src=\"/static/c7355696281ca0c4d8d1e734a1d81a26/5a190/12e.png\" alt=\"navigateur de trois composants togglable\" srcset=\"/static/c7355696281ca0c4d8d1e734a1d81a26/772e8/12e.png 200w,\n/static/c7355696281ca0c4d8d1e734a1d81a26/e17e5/12e.png 400w,\n/static/c7355696281ca0c4d8d1e734a1d81a26/5a190/12e.png 800w,\n/static/c7355696281ca0c4d8d1e734a1d81a26/077b7/12e.png 1166w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>L'attribut <i>ref</i> est utilisé pour assigner une référence à chacun des composants dans les variables <i>togglable1</i>, <i>togglable2</i> et <i>togglable3</i>.</p>\n<h3>Le serment du développeur full stack mis à jour</h3>\n<p>Le nombre de parties mobiles augmente. En même temps, la probabilité de se retrouver dans une situation où nous cherchons un bug au mauvais endroit augmente. Nous devons donc être encore plus systématiques.</p>\n<p>Nous devrions donc étendre une fois de plus notre serment:</p>\n<p>Le développement full stack est <i>extrêmement difficile</i>, c'est pourquoi j'utiliserai tous les moyens possibles pour le rendre plus facile</p>\n<ul>\n<li>J'aurai ma console de développeur de navigateur ouverte tout le temps</li>\n<li>J'utiliserai l'onglet réseau des outils de développement du navigateur pour m'assurer que le frontend et le backend communiquent comme je le souhaite</li>\n<li>Je garderai constamment un oeil sur l'état du serveur pour m'assurer que les données envoyées par le frontend y sont sauvegardées comme je le souhaite</li>\n<li>Je garderai un oeil sur la base de données: le backend y sauvegarde-t-il les données dans le bon format</li>\n<li>Je progresse par petites étapes</li>\n<li><i>lorsque je suspecte qu'il y a un bug dans le frontend, je m'assure que le backend fonctionne à coup sûr</i></li>\n<li><i>lorsque je suspecte qu'il y a un bug dans le backend, je m'assure que le frontend fonctionne à coup sûr</i></li>\n<li>J'écrirai beaucoup de <em>console.log</em> pour m'assurer que je comprends comment le code et les tests se comportent et pour aider à localiser les problèmes</li>\n<li>Si mon code ne fonctionne pas, je n'écrirai pas plus de code. Au lieu de cela, je commence à supprimer le code jusqu'à ce qu'il fonctionne ou je reviens à un état où tout fonctionnait encore</li>\n<li>Si un test ne passe pas, je m'assure que la fonctionnalité testée fonctionne à coup sûr dans l'application</li>\n<li>Lorsque je demande de l'aide sur le canal Discord ou Telegram du cours ou ailleurs, je formule correctement mes questions, voir <a href=\"https://fullstackopen.com/en/part0/general_info#how-to-get-help-in-discord-telegram\">ici</a> comment demander de l'aide</li>\n</ul>\n</div>\n<div class=\"tasks\">\n<h3>Exercices 5.5.-5.11.</h3>\n<h4>5.5 Blog list frontend, étape 5</h4>\n<p>Changez le formulaire de création de billets de blog de sorte qu'il ne soit affiché que lorsque cela est approprié. Utilisez une fonctionnalité similaire à celle montrée <a href=\"/en/part5/props_children_and_proptypes#displaying-the-login-form-only-when-appropriate\">plus tôt dans cette partie du matériel du cours</a>. Si vous le souhaitez, vous pouvez utiliser le composant <i>Togglable</i> défini dans la partie 5.</p>\n<p>Par défaut, le formulaire n'est pas visible</p>\n<picture><img src=\"/static/de4cfabdf46a837f1f0bfdba4fd27d67/5a190/13ae.png\" alt=\"navigateur montrant le bouton nouvelle note sans formulaire\" srcset=\"/static/de4cfabdf46a837f1f0bfdba4fd27d67/772e8/13ae.png 200w,\n/static/de4cfabdf46a837f1f0bfdba4fd27d67/e17e5/13ae.png 400w,\n/static/de4cfabdf46a837f1f0bfdba4fd27d67/5a190/13ae.png 800w,\n/static/de4cfabdf46a837f1f0bfdba4fd27d67/c1b63/13ae.png 1200w,\n/static/de4cfabdf46a837f1f0bfdba4fd27d67/eb2ef/13ae.png 1324w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Il se déploie lorsque le bouton <i>créer un nouveau blog</i> est cliqué</p>\n<picture><img src=\"/static/0cb27abc7b56ba5ecdd7e9d48d325c87/5a190/13be.png\" alt=\"navigateur montrant le formulaire avec créer nouveau\" srcset=\"/static/0cb27abc7b56ba5ecdd7e9d48d325c87/772e8/13be.png 200w,\n/static/0cb27abc7b56ba5ecdd7e9d48d325c87/e17e5/13be.png 400w,\n/static/0cb27abc7b56ba5ecdd7e9d48d325c87/5a190/13be.png 800w,\n/static/0cb27abc7b56ba5ecdd7e9d48d325c87/c1b63/13be.png 1200w,\n/static/0cb27abc7b56ba5ecdd7e9d48d325c87/bc3ae/13be.png 1268w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Le formulaire se ferme lorsqu'un nouveau blog est créé.</p>\n<h4>5.6 Blog list frontend, étape 6</h4>\n<p>Séparez le formulaire de création d'un nouveau blog dans son propre composant (si ce n'est pas déjà fait), et déplacez tous les états nécessaires à la création d'un nouveau blog dans ce composant.</p>\n<p>Le composant doit fonctionner comme le composant <i>NoteForm</i> du <a href=\"/en/part5/props_children_and_proptypes\">matériel</a> de cette partie.</p>\n<h4>5.7 Blog list frontend, étape 7</h4>\n<p>Ajoutons un bouton à chaque blog, qui contrôle si tous les détails sur le blog sont montrés ou non.</p>\n<p>Les détails complets du blog s'ouvrent lorsque le bouton est cliqué.</p>\n<picture><img src=\"/static/b49e9ca45d0582829eed343baad44910/5a190/13ea.png\" alt=\"navigateur montrant les détails complets d&#x27;un blog avec les autres ayant juste des boutons de vue\" srcset=\"/static/b49e9ca45d0582829eed343baad44910/772e8/13ea.png 200w,\n/static/b49e9ca45d0582829eed343baad44910/e17e5/13ea.png 400w,\n/static/b49e9ca45d0582829eed343baad44910/5a190/13ea.png 800w,\n/static/b49e9ca45d0582829eed343baad44910/c1b63/13ea.png 1200w,\n/static/b49e9ca45d0582829eed343baad44910/229ad/13ea.png 1356w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Et les détails sont cachés lorsque le bouton est cliqué à nouveau.</p>\n<p>À ce stade, le bouton <i>like</i> n'a pas besoin de faire quoi que ce soit.</p>\n<p>L'application montrée dans l'image a un peu de CSS supplémentaire pour améliorer son apparence.</p>\n<p>Il est facile d'ajouter des styles à l'application comme montré dans la partie 2 en utilisant des styles <a href=\"/fr/part2/styliser_vos_applications_react#styles-en-ligne\">en ligne</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Blog</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> blog <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> blogStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">paddingTop</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">paddingLeft</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">border</span><span class=\"token operator\">:</span> <span class=\"token string\">'solid'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">borderWidth</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">marginBottom</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>blogStyle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span>      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>blog<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>blog<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token comment\">// ...</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>NB:</strong> même si la fonctionnalité mise en oeuvre dans cette partie est presque identique à la fonctionnalité fournie par le composant <i>Togglable</i>, le composant ne peut pas être utilisé directement pour obtenir le comportement souhaité. La solution la plus simple sera d'ajouter un état au billet de blog qui contrôle la forme affichée du billet de blog.</p>\n<h4>5.8 : Blog list frontend, étape 8</h4>\n<p>Nous remarquons que quelque chose ne va pas. Lorsqu'un nouveau blog est créé dans l'application, le nom de l'utilisateur qui a ajouté le blog n'est pas affiché dans les détails du blog:</p>\n<picture><img src=\"/static/4c1a13b22d33df750f24a6e136e7abc1/5a190/59new.png\" alt=\"navigateur montrant le nom manquant sous le bouton like\" srcset=\"/static/4c1a13b22d33df750f24a6e136e7abc1/772e8/59new.png 200w,\n/static/4c1a13b22d33df750f24a6e136e7abc1/e17e5/59new.png 400w,\n/static/4c1a13b22d33df750f24a6e136e7abc1/5a190/59new.png 800w,\n/static/4c1a13b22d33df750f24a6e136e7abc1/c1b63/59new.png 1200w,\n/static/4c1a13b22d33df750f24a6e136e7abc1/29007/59new.png 1600w,\n/static/4c1a13b22d33df750f24a6e136e7abc1/0d292/59new.png 1620w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Lorsque le navigateur est rechargé, les informations de la personne sont affichées. Ceci n'est pas acceptable, trouvez où se trouve le problème et apportez la correction nécessaire.</p>\n<h4>5.9 : Blog list frontend, étape 9</h4>\n<p>Mettez en oeuvre la fonctionnalité pour le bouton like. Les likes sont augmentés en faisant une requête HTTP <em>PUT</em> à l'adresse unique du billet de blog dans le backend.</p>\n<p>Puisque l'opération du backend remplace l'ensemble du billet de blog, vous devrez envoyer tous ses champs dans le corps de la requête. Si vous vouliez ajouter un like au billet de blog suivant:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">_id</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5a43fde2cbd20b12a2c34e91\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">_id</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5a43e6b6c37f3d065eaaa581\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mluukkai\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Matti Luukkainen\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">likes</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Joel Spolsky\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"The Joel Test: 12 Steps to Better Code\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>Vous devriez faire une requête HTTP PUT à l'adresse <i>/api/blogs/5a43fde2cbd20b12a2c34e91</i> avec les données de requête suivantes:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5a43e6b6c37f3d065eaaa581\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">likes</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Joel Spolsky\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"The Joel Test: 12 Steps to Better Code\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Le backend doit également être mis à jour pour gérer la référence utilisateur.</p>\n<p><strong>Un dernier avertissement:</strong> si vous remarquez que vous utilisez async/await et la méthode <em>then</em> dans le même code, il est presque certain que vous faites quelque chose de mal. Tenez-vous en à l'utilisation de l'un ou de l'autre, et n'utilisez jamais les deux en même temps \"juste au cas où\".</p>\n<h4>5.10 : Blog list frontend, étape 10</h4>\n<p>Modifiez l'application pour lister les posts de blog par nombre de <i>likes</i>. Le tri des posts de blog peut être réalisé avec la méthode <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\">sort</a> du tableau.</p>\n<h4>5.11 : Blog list frontend, étape 11</h4>\n<p>Ajoutez un nouveau bouton pour supprimer les posts de blog. Implémentez également la logique de suppression des posts de blog dans le frontend.</p>\n<p>Votre application pourrait ressembler à cela:</p>\n<picture><img src=\"/static/87b7180f1f10ce670af1bc21f50233ec/5a190/14ea.png\" alt=\"navigateur de confirmation de suppression de blog\" srcset=\"/static/87b7180f1f10ce670af1bc21f50233ec/772e8/14ea.png 200w,\n/static/87b7180f1f10ce670af1bc21f50233ec/e17e5/14ea.png 400w,\n/static/87b7180f1f10ce670af1bc21f50233ec/5a190/14ea.png 800w,\n/static/87b7180f1f10ce670af1bc21f50233ec/c1b63/14ea.png 1200w,\n/static/87b7180f1f10ce670af1bc21f50233ec/d0c2f/14ea.png 1362w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>La boîte de dialogue de confirmation pour la suppression d'un post de blog est facile à implémenter avec la fonction <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm\">window.confirm</a>.</p>\n<p>Affichez le bouton de suppression d'un post de blog uniquement si le post de blog a été ajouté par l'utilisateur.</p>\n</div>\n<div class=\"content\">\n<h3>PropTypes</h3>\n<p>Le composant <i>Togglable</i> suppose qu'on lui donne le texte pour le bouton via la prop <i>buttonLabel</i>. Si nous oublions de le définir pour le composant:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Togglable<span class=\"token operator\">></span> buttonLabel forgotten<span class=\"token operator\">...</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span></code></pre></div>\n<p>L'application fonctionne, mais le navigateur affiche un bouton qui n'a pas de texte d'étiquette.</p>\n<p>Nous aimerions imposer que lorsque le composant <i>Togglable</i> est utilisé, la prop de texte d'étiquette du bouton doit se voir attribuer une valeur.</p>\n<p>Les props attendues et requises d'un composant peuvent être définies avec le package <a href=\"https://github.com/facebook/prop-types\">prop-types</a>. Installons le package:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> prop-types</code></pre></div>\n<p>Nous pouvons définir la prop <i>buttonLabel</i> comme une prop obligatoire ou <i>required</i> de type chaîne de caractères comme montré ci-dessous:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span>\n\n<span class=\"token keyword\">const</span> Togglable <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nTogglable<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">buttonLabel</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La console affichera le message d'erreur suivant si la prop est laissée indéfinie:</p>\n<picture><img src=\"/static/7a239ed6d3ad6721a65ae3ac24eb29b5/5a190/15.png\" alt=\"erreur de console indiquant que buttonLabel est indéfini\" srcset=\"/static/7a239ed6d3ad6721a65ae3ac24eb29b5/772e8/15.png 200w,\n/static/7a239ed6d3ad6721a65ae3ac24eb29b5/e17e5/15.png 400w,\n/static/7a239ed6d3ad6721a65ae3ac24eb29b5/5a190/15.png 800w,\n/static/7a239ed6d3ad6721a65ae3ac24eb29b5/c1b63/15.png 1200w,\n/static/7a239ed6d3ad6721a65ae3ac24eb29b5/29007/15.png 1600w,\n/static/7a239ed6d3ad6721a65ae3ac24eb29b5/ab40b/15.png 1736w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>L'application fonctionne toujours et rien ne nous oblige à définir des props malgré les définitions de PropTypes. Cela dit, il est extrêmement peu professionnel de laisser <i>n'importe quel</i> message d'erreur en rouge dans la console du navigateur.</p>\n<p>Définissons également les PropTypes pour le composant <i>LoginForm</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">LoginForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n   handleSubmit<span class=\"token punctuation\">,</span>\n   handleUsernameChange<span class=\"token punctuation\">,</span>\n   handlePasswordChange<span class=\"token punctuation\">,</span>\n   username<span class=\"token punctuation\">,</span>\n   password\n  <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\nLoginForm<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">handleSubmit</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">handleUsernameChange</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">handlePasswordChange</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Si le type d'une prop passée est incorrect, par exemple, si nous essayons de définir la prop <i>handleSubmit</i> comme une chaîne de caractères, cela entraînera l'avertissement suivant:</p>\n<picture><img src=\"/static/ec732518823c5e2921d46285e5549bf3/5a190/16.png\" alt=\"erreur de console disant que handleSubmit attendait une fonction\" srcset=\"/static/ec732518823c5e2921d46285e5549bf3/772e8/16.png 200w,\n/static/ec732518823c5e2921d46285e5549bf3/e17e5/16.png 400w,\n/static/ec732518823c5e2921d46285e5549bf3/5a190/16.png 800w,\n/static/ec732518823c5e2921d46285e5549bf3/c1b63/16.png 1200w,\n/static/ec732518823c5e2921d46285e5549bf3/29007/16.png 1600w,\n/static/ec732518823c5e2921d46285e5549bf3/ab40b/16.png 1736w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>ESlint</h3>\n<p>Dans la partie 3, nous avons configuré l'outil de style de code <a href=\"/fr/part3/validation_et_es_lint#lint\">ESlint</a> pour le backend. Prenons ESlint en main pour l'utiliser également dans le frontend.</p>\n<p>Vite a installé ESlint dans le projet par défaut, il ne nous reste donc plus qu'à définir notre configuration souhaitée dans le fichier <i>.eslintrc.cjs</i>.</p>\n<p>Ensuite, nous commencerons à tester le frontend et afin d'éviter des erreurs de linter indésirables et non pertinentes, nous installerons le package <a href=\"https://www.npmjs.com/package/eslint-plugin-jest\">eslint-plugin-jest</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev eslint-plugin-jest</code></pre></div>\n<p>Créons un fichier <i>.eslintrc.cjs</i> avec le contenu suivant:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">root</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">env</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">browser</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">es2020</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"jest/globals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'eslint:recommended'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'plugin:react/recommended'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'plugin:react/jsx-runtime'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'plugin:react-hooks/recommended'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">ignorePatterns</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'dist'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.eslintrc.cjs'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">parserOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">ecmaVersion</span><span class=\"token operator\">:</span> <span class=\"token string\">'latest'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">sourceType</span><span class=\"token operator\">:</span> <span class=\"token string\">'module'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">settings</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">react</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> <span class=\"token string\">'18.2'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'react-refresh'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jest'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"indent\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">2</span>  \n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"linebreak-style\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"unix\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"quotes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"single\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"semi\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"never\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"eqeqeq\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"no-trailing-spaces\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"object-curly-spacing\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"always\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"arrow-spacing\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"before\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">\"after\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"no-console\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"react/react-in-jsx-scope\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"react/prop-types\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"no-unused-vars\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>    \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>NOTE: Si vous utilisez Visual Studio Code avec le plugin ESLint, vous pourriez avoir besoin d'ajouter un paramètre de workspace pour qu'il fonctionne. Si vous voyez l'erreur <code class=\"language-text\">Failed to load plugin react: Cannot find module 'eslint-plugin-react'</code>, une configuration supplémentaire est nécessaire. Ajouter la ligne <code class=\"language-text\">\"eslint.workingDirectories\": [{ \"mode\": \"auto\" }]</code> au fichier settings.json dans l'espace de travail semble fonctionner. Voir <a href=\"https://github.com/microsoft/vscode-eslint/issues/880#issuecomment-578052807\">ici</a> pour plus d'informations.</p>\n<p>Créons un fichier <a href=\"https://eslint.org/docs/user-guide/configuring#ignoring-files-and-directories\">.eslintignore</a> avec le contenu suivant à la racine du dépôt:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node_modules\ndist\n.eslintrc.cjs</code></pre></div>\n<p>Maintenant, les répertoires <em>dist</em> et <em>node_modules</em> seront ignorés lors du linting.</p>\n<p>Comme d'habitude, vous pouvez effectuer le linting soit depuis la ligne de commande avec la commande</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run Lint</code></pre></div>\n<p>ou en utilisant le plugin Eslint de l'éditeur.</p>\n<p>Le composant <em>Togglable</em> provoque un avertissement désagréable <i>La définition du composant manque d'un nom d'affichage</i>:</p>\n<picture><img src=\"/static/f61843245205294dd4fbf50d8b864dd7/5a190/25x.png\" alt=\"vscode montrant une erreur de définition de composant\" srcset=\"/static/f61843245205294dd4fbf50d8b864dd7/772e8/25x.png 200w,\n/static/f61843245205294dd4fbf50d8b864dd7/e17e5/25x.png 400w,\n/static/f61843245205294dd4fbf50d8b864dd7/5a190/25x.png 800w,\n/static/f61843245205294dd4fbf50d8b864dd7/c1b63/25x.png 1200w,\n/static/f61843245205294dd4fbf50d8b864dd7/29007/25x.png 1600w,\n/static/f61843245205294dd4fbf50d8b864dd7/913b9/25x.png 1822w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Les react-devtools révèlent également que le composant n'a pas de nom:</p>\n<p>1<a href=\"../../images/5/26ea.png\">react devtools montrant forwardRef comme anonyme</a></p>\n<p>Heureusement, cela est facile à corriger</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useImperativeHandle <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span>\n\n<span class=\"token keyword\">const</span> Togglable <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">Togglable<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">=</span> <span class=\"token string\">'Togglable'</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Togglable</code></pre></div>\n<p>Vous pouvez trouver le code de notre application actuelle dans son intégralité dans la branche <i>part5-7</i> de <a href=\"https://github.com/fullstack-hy2020/part2-notes-frontend/tree/part5-7\">ce dépôt GitHub</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>exercice 5.12.</h3>\n<h4>5.12 : Blog list frontend, étape 12</h4>\n<p>Définissez PropTypes pour l'un des composants de votre application et ajoutez ESlint au projet. Définissez la configuration selon vos préférences. Corrigez toutes les erreurs du linter.</p>\n<p>Vite a installé ESlint dans le projet par défaut, il ne vous reste donc plus qu'à définir votre configuration souhaitée dans le fichier <i>.eslintrc.cjs</i>.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/b92f84fe9702a35b12f10af4588ba4c2/part-5.svg"},"part":5,"letter":"b","lang":"fr"}}},"pageContext":{"part":5,"letter":"b","lang":"fr"}},"staticQueryHashes":["3128451518"]}
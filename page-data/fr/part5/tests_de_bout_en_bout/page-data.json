{"componentChunkName":"component---src-templates-content-template-js","path":"/fr/part5/tests_de_bout_en_bout","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Jusqu'à présent, nous avons testé le backend dans son ensemble au niveau de l'API en utilisant des tests d'intégration et testé certains composants frontend en utilisant des tests unitaires.</p>\n<p>Ensuite, nous examinerons une manière de tester le <a href=\"https://en.wikipedia.org/wiki/System_testing\">système dans son ensemble</a> en utilisant des tests <i>End to End</i> (E2E).</p>\n<p>Nous pouvons effectuer des tests E2E d'une application web en utilisant un navigateur et une bibliothèque de tests. Il existe plusieurs bibliothèques disponibles. Un exemple est <a href=\"http://www.seleniumhq.org/\">Selenium</a>, qui peut être utilisé avec presque tous les navigateurs.\nUne autre option de navigateur est ce qu'on appelle les <a href=\"https://en.wikipedia.org/wiki/Headless_browser\">navigateurs sans tête</a>, qui sont des navigateurs sans interface graphique utilisateur.\nPar exemple, Chrome peut être utilisé en mode sans tête.</p>\n<p>Les tests E2E sont potentiellement la catégorie de tests la plus utile car ils testent le système via la même interface que celle utilisée par les vrais utilisateurs.</p>\n<p>Ils présentent toutefois certains inconvénients. Configurer des tests E2E est plus difficile que les tests unitaires ou d'intégration. Ils tendent également à être assez lents, et avec un grand système, leur temps d'exécution peut être de minutes ou même d'heures. Cela est mauvais pour le développement car pendant la codification, il est bénéfique de pouvoir exécuter des tests aussi souvent que possible en cas de <a href=\"https://en.wikipedia.org/wiki/Regression_testing\">régressions</a> de code.</p>\n<p>Les tests E2E peuvent également être <a href=\"https://hackernoon.com/flaky-tests-a-war-that-never-ends-9aa32fdef359\">instables</a>.\nCertains tests peuvent réussir une fois et échouer une autre, même si le code ne change pas du tout.</p>\n<h3>Cypress</h3>\n<p>La bibliothèque E2E <a href=\"https://www.cypress.io/\">Cypress</a> est devenue populaire au cours de la dernière année. Cypress est exceptionnellement facile à utiliser et, comparé à Selenium, par exemple, il nécessite beaucoup moins de tracas et de maux de tête.\nSon principe de fonctionnement est radicalement différent de celui de la plupart des bibliothèques de tests E2E parce que les tests Cypress sont exécutés entièrement dans le navigateur.\nD'autres bibliothèques exécutent les tests dans un processus Node, qui est connecté au navigateur via une API.</p>\n<p>Faisons quelques tests de bout en bout pour notre application de notes.</p>\n<p>Nous commençons par installer Cypress dans <i>le frontend</i> en tant que dépendance de développement</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev cypress</code></pre></div>\n<p>et en ajoutant un script npm pour l'exécuter:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string-property property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vite --host\"</span><span class=\"token punctuation\">,</span></span>    <span class=\"token string-property property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vite build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"preview\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vite preview\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"server\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"json-server -p3001 --watch db.json\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jest\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string-property property\">\"cypress:open\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cypress open\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nous avons également apporté un petit changement au script qui démarre l'application, sans ce changement Cypress ne peut pas accéder à l'appli.</p>\n<p>Contrairement aux tests unitaires du frontend, les tests Cypress peuvent se trouver dans le dépôt du frontend ou du backend, ou même dans leur propre dépôt séparé.</p>\n<p>Les tests nécessitent que le système testé soit en cours d'exécution. Contrairement à nos tests d'intégration backend, les tests Cypress <i>ne démarrent pas</i> le système lorsqu'ils sont exécutés.</p>\n<p>Ajoutons un script npm à <i>backend</i> qui le démarre en mode test, ou de manière à ce que <i>NODE_ENV</i> soit <i>test</i>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NODE_ENV=production node index.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NODE_ENV=development nodemon index.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"build:ui\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rm -rf build &amp;&amp; cd ../frontend/ &amp;&amp; npm run build &amp;&amp; cp -r build ../backend\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"deploy\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fly deploy\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"deploy:full\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run build:ui &amp;&amp; npm run deploy\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"logs:prod\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fly logs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint .\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jest --verbose --runInBand\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string-property property\">\"start:test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NODE_ENV=test node index.js\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>NB</strong> Pour que Cypress fonctionne avec WSL2, il peut être nécessaire d'effectuer d'abord quelques configurations supplémentaires. Ces deux <a href=\"https://docs.cypress.io/guides/getting-started/installing-cypress#Windows-Subsystem-for-Linux\">liens</a> sont de bons points de <a href=\"https://nickymeuleman.netlify.app/blog/gui-on-wsl2-cypress\">départ</a>.</p>\n<p>Lorsque le backend et le frontend sont en cours d'exécution, nous pouvons démarrer Cypress avec la commande</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm run cypress<span class=\"token operator\">:</span>open</code></pre></div>\n<p>Cypress demande quel type de tests nous effectuons. Choisissons \"E2E Testing\" (Tests E2E):</p>\n<picture><img src=\"/static/2f55f8a155164a0b0f70806c99fff7f2/5a190/51new.png\" alt=\"flèche cypress vers l&#x27;option de test e2e\" srcset=\"/static/2f55f8a155164a0b0f70806c99fff7f2/772e8/51new.png 200w,\n/static/2f55f8a155164a0b0f70806c99fff7f2/e17e5/51new.png 400w,\n/static/2f55f8a155164a0b0f70806c99fff7f2/5a190/51new.png 800w,\n/static/2f55f8a155164a0b0f70806c99fff7f2/c1b63/51new.png 1200w,\n/static/2f55f8a155164a0b0f70806c99fff7f2/29007/51new.png 1600w,\n/static/2f55f8a155164a0b0f70806c99fff7f2/cd13d/51new.png 1958w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Ensuite, un navigateur est sélectionné (par exemple, Chrome) et nous cliquons sur \"Create new spec\" (Créer une nouvelle spécification):</p>\n<picture><img src=\"/static/32e9abf3e53ee55a69c09848a80c1841/5a190/52new.png\" alt=\"créer une nouvelle spécification avec une flèche pointant vers celle-ci\" srcset=\"/static/32e9abf3e53ee55a69c09848a80c1841/772e8/52new.png 200w,\n/static/32e9abf3e53ee55a69c09848a80c1841/e17e5/52new.png 400w,\n/static/32e9abf3e53ee55a69c09848a80c1841/5a190/52new.png 800w,\n/static/32e9abf3e53ee55a69c09848a80c1841/c1b63/52new.png 1200w,\n/static/32e9abf3e53ee55a69c09848a80c1841/0d390/52new.png 1472w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Créons le fichier de test <i>cypress/e2e/note_app.cy.js</i>:</p>\n<picture><img src=\"/static/8d2a5e80b10aee456df04e38800e001c/5a190/53new.png\" alt=\"cypress avec le chemin cypress/e2e/note_app.cy.js\" srcset=\"/static/8d2a5e80b10aee456df04e38800e001c/772e8/53new.png 200w,\n/static/8d2a5e80b10aee456df04e38800e001c/e17e5/53new.png 400w,\n/static/8d2a5e80b10aee456df04e38800e001c/5a190/53new.png 800w,\n/static/8d2a5e80b10aee456df04e38800e001c/c1b63/53new.png 1200w,\n/static/8d2a5e80b10aee456df04e38800e001c/93582/53new.png 1524w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Nous pourrions modifier les tests dans Cypress, mais utilisons plutôt VS Code:</p>\n<picture><img src=\"/static/f5d760cc7f64255be31285e11d5cc1c7/5a190/54new.png\" alt=\"vscode montrant les modifications du test et cypress montrant la spécification ajoutée\" srcset=\"/static/f5d760cc7f64255be31285e11d5cc1c7/772e8/54new.png 200w,\n/static/f5d760cc7f64255be31285e11d5cc1c7/e17e5/54new.png 400w,\n/static/f5d760cc7f64255be31285e11d5cc1c7/5a190/54new.png 800w,\n/static/f5d760cc7f64255be31285e11d5cc1c7/c1b63/54new.png 1200w,\n/static/f5d760cc7f64255be31285e11d5cc1c7/29007/54new.png 1600w,\n/static/f5d760cc7f64255be31285e11d5cc1c7/acb5a/54new.png 2632w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Nous pouvons maintenant fermer la vue d'édition de Cypress.</p>\n<p>Changeons le contenu du test comme suit:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note app'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'front page can be opened'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:5173'</span><span class=\"token punctuation\">)</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Notes'</span><span class=\"token punctuation\">)</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note app, Department of Computer Science, University of Helsinki 2023'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Le test est exécuté en cliquant sur le test dans Cypress:</p>\n<p>L'exécution du test montre comment l'application se comporte pendant l'exécution du test:</p>\n<picture><img src=\"/static/7eee650a6bd5609b463b385b74864cd0/5a190/56new.png\" alt=\"cypress montrant l&#x27;automatisation du test de note\" srcset=\"/static/7eee650a6bd5609b463b385b74864cd0/772e8/56new.png 200w,\n/static/7eee650a6bd5609b463b385b74864cd0/e17e5/56new.png 400w,\n/static/7eee650a6bd5609b463b385b74864cd0/5a190/56new.png 800w,\n/static/7eee650a6bd5609b463b385b74864cd0/c1b63/56new.png 1200w,\n/static/7eee650a6bd5609b463b385b74864cd0/29007/56new.png 1600w,\n/static/7eee650a6bd5609b463b385b74864cd0/95c1f/56new.png 2330w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>La structure du test devrait vous sembler familière. Ils utilisent des blocs <i>describe</i> pour regrouper différents cas de test, tout comme Jest. Les cas de test ont été définis avec la méthode <i>it</i>. Cypress a emprunté ces parties à la bibliothèque de tests <a href=\"https://mochajs.org/\">Mocha</a> qu'il utilise en interne.</p>\n<p><a href=\"https://docs.cypress.io/api/commands/visit.html\">cy.visit</a> et <a href=\"https://docs.cypress.io/api/commands/contains.html\">cy.contains</a> sont des commandes Cypress, et leur but est assez évident.\n<a href=\"https://docs.cypress.io/api/commands/visit.html\">cy.visit</a> ouvre l'adresse web qui lui est donnée en paramètre dans le navigateur utilisé par le test. <a href=\"https://docs.cypress.io/api/commands/contains.html\">cy.contains</a> recherche la chaîne qu'il a reçue en paramètre sur la page.</p>\n<p>Nous aurions pu déclarer le test en utilisant une fonction fléchée</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note app'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'front page can be opened'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>    cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:5173'</span><span class=\"token punctuation\">)</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Notes'</span><span class=\"token punctuation\">)</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note app, Department of Computer Science, University of Helsinki 2023'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Cependant, Mocha <a href=\"https://mochajs.org/#arrow-functions\">recommande</a> de ne pas utiliser de fonctions fléchées, car elles pourraient causer certains problèmes dans certaines situations.</p>\n<p>Si <i>cy.contains</i> ne trouve pas le texte qu'il recherche, le test ne passe pas. Donc, si nous étendons notre test ainsi</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note app'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'front page can be opened'</span><span class=\"token punctuation\">,</span>  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:5173'</span><span class=\"token punctuation\">)</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Notes'</span><span class=\"token punctuation\">)</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note app, Department of Computer Science, University of Helsinki 2023'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'front page contains random text'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:5173'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wtf is this app?'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>le test échoue</p>\n<picture><img src=\"/static/46553c6a2f07144ed8ece77e6c7d1a00/5a190/57new.png\" alt=\"cypress montrant l&#x27;échec s&#x27;attendant à trouver wtf mais non\" srcset=\"/static/46553c6a2f07144ed8ece77e6c7d1a00/772e8/57new.png 200w,\n/static/46553c6a2f07144ed8ece77e6c7d1a00/e17e5/57new.png 400w,\n/static/46553c6a2f07144ed8ece77e6c7d1a00/5a190/57new.png 800w,\n/static/46553c6a2f07144ed8ece77e6c7d1a00/c1b63/57new.png 1200w,\n/static/46553c6a2f07144ed8ece77e6c7d1a00/29007/57new.png 1600w,\n/static/46553c6a2f07144ed8ece77e6c7d1a00/aea0a/57new.png 2018w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Supprimons le code qui échoue du test.</p>\n<p>La variable <em>cy</em> que nos tests utilisent nous donne une vilaine erreur Eslint</p>\n<picture><img src=\"/static/4f1adcc810efd9cea92b3da176cf6f6d/5a190/58new.png\" alt=\"capture d&#x27;écran vscode montrant cy n&#x27;est pas défini\" srcset=\"/static/4f1adcc810efd9cea92b3da176cf6f6d/772e8/58new.png 200w,\n/static/4f1adcc810efd9cea92b3da176cf6f6d/e17e5/58new.png 400w,\n/static/4f1adcc810efd9cea92b3da176cf6f6d/5a190/58new.png 800w,\n/static/4f1adcc810efd9cea92b3da176cf6f6d/c1b63/58new.png 1200w,\n/static/4f1adcc810efd9cea92b3da176cf6f6d/87488/58new.png 1282w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Nous pouvons nous en débarrasser en installant <a href=\"https://github.com/cypress-io/eslint-plugin-cypress\">eslint-plugin-cypress</a> en tant que dépendance de développement</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install eslint<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span>cypress <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</code></pre></div>\n<p>et en changeant la configuration dans <i>.eslintrc.cjs</i> comme suit:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">browser</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">es2020</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"jest/globals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string-property property\">\"cypress/globals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> \n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"parserOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jest\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cypress\"</span></span>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Écrire dans un formulaire</h3>\n<p>Étendons nos tests de manière à ce que le test essaie de se connecter à notre application.\nNous supposons que notre backend contient un utilisateur avec le nom d'utilisateur <i>mluukkai</i> et le mot de passe <i>salainen</i>.</p>\n<p>Le test commence par ouvrir le formulaire de connexion.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note app'</span><span class=\"token punctuation\">,</span>  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'login form can be opened'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:5173'</span><span class=\"token punctuation\">)</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'log in'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Le test recherche d'abord le bouton de connexion par son texte et clique sur le bouton avec la commande <a href=\"https://docs.cypress.io/api/commands/click.html#Syntax\">cy.click</a>.</p>\n<p>Comme nos deux tests commencent de la même manière, par l'ouverture de la page <i><a href=\"http://localhost:5173\">http://localhost:5173</a></i>, nous devrions séparer la partie commune dans un bloc <i>beforeEach</i> exécuté avant chaque test:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note app'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:5173'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'front page can be opened'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Notes'</span><span class=\"token punctuation\">)</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note app, Department of Computer Science, University of Helsinki 2023'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'login form can be opened'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'log in'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Le champ de connexion contient deux champs <i>input</i>, dans lesquels le test devrait écrire.</p>\n<p>La commande <a href=\"https://docs.cypress.io/api/commands/get.html#Syntax\">cy.get</a> permet de rechercher des éléments par sélecteurs CSS.</p>\n<p>Nous pouvons accéder au premier et au dernier champ de saisie sur la page, et y écrire avec la commande <a href=\"https://docs.cypress.io/api/commands/type.html#Syntax\">cy.type</a> comme suit:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user can login'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'log in'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input:first'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mluukkai'</span><span class=\"token punctuation\">)</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input:last'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'salainen'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  </code></pre></div>\n<p>Le test fonctionne. Le problème est que si nous ajoutons plus tard d'autres champs de saisie, le test échouera car il s'attend à ce que les champs dont il a besoin soient le premier et le dernier sur la page.</p>\n<p>Il serait préférable de donner à nos entrées des <i>ids</i> uniques et de les utiliser pour les trouver.\nNous modifions notre formulaire de connexion comme suit:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">LoginForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          username\n          <span class=\"token operator\">&lt;</span>input\n<span class=\"gatsby-highlight-code-line\">            id<span class=\"token operator\">=</span><span class=\"token string\">'username'</span></span>            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleUsernameChange<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          password\n          <span class=\"token operator\">&lt;</span>input\n<span class=\"gatsby-highlight-code-line\">            id<span class=\"token operator\">=</span><span class=\"token string\">'password'</span></span>            type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span>\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>password<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handlePasswordChange<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>button id<span class=\"token operator\">=</span><span class=\"token string\">\"login-button\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span></span>          login\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nous avons également ajouté un id à notre bouton de soumission afin de pouvoir y accéder dans nos tests.</p>\n<p>Le test devient:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note app'</span><span class=\"token punctuation\">,</span>  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user can log in'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'log in'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mluukkai'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'salainen'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#login-button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"gatsby-highlight-code-line\">    cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Matti Luukkainen logged in'</span><span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>La dernière ligne assure que la connexion a été réussie.</p>\n<p>Notez que le <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors\">sélecteur d'id</a> CSS est #, donc si nous voulons rechercher un élément avec l'id <i>username</i>, le sélecteur CSS est <i>#username</i>.</p>\n<p>Veuillez noter que réussir le test à ce stade nécessite qu'il y ait un utilisateur dans la base de données de test de l'environnement backend dont le nom d'utilisateur est <i>mluukkai</i> et le mot de passe est <i>salainen</i>. Créez un utilisateur si nécessaire !</p>\n<h3>Tester le formulaire de nouvelle note</h3>\n<p>Ajoutons ensuite des méthodes de test pour tester la fonctionnalité \"nouvelle note\":</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note app'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'when logged in'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'log in'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input:first'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mluukkai'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input:last'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'salainen'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#login-button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a new note can be created'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new note'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a note created by cypress'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'save'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">      cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a note created by cypress'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Le test a été défini dans son propre bloc <i>describe</i>.\nSeuls les utilisateurs connectés peuvent créer de nouvelles notes, donc nous avons ajouté la connexion à l'application dans un bloc <i>beforeEach</i>.</p>\n<p>Le test suppose que lors de la création d'une nouvelle note, la page contient un seul champ de saisie, donc il le recherche comme suit:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Si la page contenait plus d'entrées, le test échouerait</p>\n<picture><img src=\"/static/ff34ae737a9c922199439257fdc4e1e9/5a190/31x.png\" alt=\"erreur cypress - cy.type ne peut être appelé que sur un seul élément\" srcset=\"/static/ff34ae737a9c922199439257fdc4e1e9/772e8/31x.png 200w,\n/static/ff34ae737a9c922199439257fdc4e1e9/e17e5/31x.png 400w,\n/static/ff34ae737a9c922199439257fdc4e1e9/5a190/31x.png 800w,\n/static/ff34ae737a9c922199439257fdc4e1e9/c1b63/31x.png 1200w,\n/static/ff34ae737a9c922199439257fdc4e1e9/29007/31x.png 1600w,\n/static/ff34ae737a9c922199439257fdc4e1e9/6ee58/31x.png 1640w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>À cause de ce problème, il serait à nouveau préférable de donner un <i>id</i> à l'entrée et de rechercher l'élément par son id.</p>\n<p>La structure des tests ressemble à ceci:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note app'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user can log in'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'log in'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mluukkai'</span><span class=\"token punctuation\">)</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'salainen'</span><span class=\"token punctuation\">)</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#login-button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Matti Luukkainen logged in'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'when logged in'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'log in'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input:first'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mluukkai'</span><span class=\"token punctuation\">)</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input:last'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'salainen'</span><span class=\"token punctuation\">)</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#login-button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a new note can be created'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Cypress exécute les tests dans l'ordre où ils figurent dans le code. Ainsi, il exécute d'abord <i>user can log in</i> (l'utilisateur peut se connecter), où l'utilisateur se connecte. Ensuite, Cypress exécutera <i>a new note can be created</i> (une nouvelle note peut être créée) pour lequel un bloc <i>beforeEach</i> se connecte également.\nPourquoi faire cela ? L'utilisateur n'est-il pas déjà connecté après le premier test?\nNon, car <i>chaque</i> test commence de zéro en ce qui concerne le navigateur.\nTous les changements dans l'état du navigateur sont réinitialisés après chaque test.</p>\n<h3>Contrôler l'état de la base de données</h3>\n<p>Si les tests doivent pouvoir modifier la base de données du serveur, la situation devient immédiatement plus compliquée. Idéalement, la base de données du serveur devrait être la même chaque fois que nous exécutons les tests, pour que nos tests puissent être fiables et facilement répétables.</p>\n<p>Comme avec les tests unitaires et d'intégration, avec les tests E2E, il est préférable de vider la base de données et éventuellement de la formater avant l'exécution des tests. Le défi avec les tests E2E est qu'ils n'ont pas accès à la base de données.</p>\n<p>La solution est de créer des points d'API pour les tests backend.\nNous pouvons vider la base de données en utilisant ces points d'API.\nCréons un nouveau routeur pour les tests à l'intérieur du dossier <i>controllers</i>, dans le fichier <i>testing.js</i></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> testingRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> Note <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/note'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/user'</span><span class=\"token punctuation\">)</span>\n\ntestingRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/reset'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">deleteMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">deleteMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">204</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> testingRouter</code></pre></div>\n<p>et l'ajouter au backend <i>uniquement si l'application est exécutée en mode test</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/login'</span><span class=\"token punctuation\">,</span> loginRouter<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users'</span><span class=\"token punctuation\">,</span> usersRouter<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> notesRouter<span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> testingRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./controllers/testing'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/testing'</span><span class=\"token punctuation\">,</span> testingRouter<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>unknownEndpoint<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>errorHandler<span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> app</code></pre></div>\n<p>Après les modifications, une requête HTTP POST vers le point de terminaison <i>/api/testing/reset</i> vide la base de données. Assurez-vous que votre backend est exécuté en mode test en le démarrant avec cette commande (préalablement configurée dans le fichier package.json):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  npm run start<span class=\"token operator\">:</span>test</code></pre></div>\n<p>Le code backend modifié peut être trouvé sur la branche <a href=\"https://github.com/fullstack-hy2020/part3-notes-backend/tree/part5-1\">GitHub</a> <i>part5-1</i>.</p>\n<p>Ensuite, nous allons modifier le bloc <i>beforeEach</i> de sorte qu'il vide la base de données du serveur avant l'exécution des tests.</p>\n<p>Actuellement, il n'est pas possible d'ajouter de nouveaux utilisateurs via l'interface utilisateur du frontend, donc nous ajoutons un nouvel utilisateur au backend depuis le bloc beforeEach.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note app'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    cy<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://localhost:3001/api/testing/reset'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Matti Luukkainen'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'mluukkai'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'salainen'</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">    cy<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://localhost:3001/api/users/'</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span> </span>    cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:5173'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'front page can be opened'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user can login'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'when logged in'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Lors du formatage, le test effectue des requêtes HTTP vers le backend avec <a href=\"https://docs.cypress.io/api/commands/request.html\">cy.request</a>.</p>\n<p>Contrairement à avant, maintenant, les tests commencent avec le backend dans le même état à chaque fois. Le backend contiendra un utilisateur et aucune note.</p>\n<p>Ajoutons un autre test pour vérifier que nous pouvons changer l'importance des notes.</p>\n<p>Il y a quelque temps, nous avons modifié le frontend de sorte qu'une nouvelle note soit importante par défaut, ou que le champ <i>important</i> soit <i>true</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">NoteForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> createNote <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addNote</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">createNote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> newNote<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">important</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">setNewNote</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n<p>Il existe plusieurs manières de tester cela. Dans l'exemple suivant, nous recherchons d'abord une note et cliquons sur son bouton <i>rendre non important</i>. Ensuite, nous vérifions que la note contient maintenant un bouton <i>rendre important</i>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note app'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'when logged in'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'and a note exists'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new note'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'another note cypress'</span><span class=\"token punctuation\">)</span>\n        cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'save'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'it can be made not important'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'another note cypress'</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'make not important'</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'another note cypress'</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'make important'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>La première commande recherche un composant contenant le texte <i>another note cypress</i>, puis un bouton <i>rendre non important</i> à l'intérieur. Elle clique ensuite sur le bouton.</p>\n<p>La deuxième commande vérifie que le texte sur le bouton a changé en <i>rendre important</i>.</p>\n<p>Les tests et le code frontend actuel peuvent être trouvés sur la branche <a href=\"https://github.com/fullstack-hy2020/part2-notes-frontend/tree/part5-9\">GitHub</a> <i>part5-9</i>.</p>\n<h3>Test d'échec de connexion</h3>\n<p>Faisons un test pour s'assurer qu'une tentative de connexion échoue si le mot de passe est incorrect.</p>\n<p>Par défaut, Cypress exécutera tous les tests chaque fois, et à mesure que le nombre de tests augmente, cela commence à devenir assez chronophage.\nLors du développement d'un nouveau test ou lors du débogage d'un test en échec, nous pouvons définir le test avec <i>it.only</i> au lieu de <i>it</i>, de sorte que Cypress n'exécute que le test requis.\nLorsque le test fonctionne, nous pouvons retirer <i>.only</i>.</p>\n<p>La première version de nos tests est la suivante:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note app'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  it<span class=\"token punctuation\">.</span><span class=\"token function\">only</span><span class=\"token punctuation\">(</span><span class=\"token string\">'login fails with wrong password'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'log in'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mluukkai'</span><span class=\"token punctuation\">)</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wrong'</span><span class=\"token punctuation\">)</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#login-button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wrong credentials'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Le test utilise <a href=\"https://docs.cypress.io/api/commands/contains.html#Syntax\">cy.contains</a> pour s'assurer que l'application affiche un message d'erreur.</p>\n<p>L'application rend le message d'erreur dans un composant avec la classe CSS <i>error</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Notification</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> message <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>message <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"error\"</span><span class=\"token operator\">></span></span>      <span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nous pourrions faire en sorte que le test s'assure que le message d'erreur est rendu dans le composant correct, c'est-à-dire, le composant avec la classe CSS <i>error</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'login fails with wrong password'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\">  cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wrong credentials'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>D'abord, nous utilisons <a href=\"https://docs.cypress.io/api/commands/get.html#Syntax\">cy.get</a> pour rechercher un composant avec la classe CSS <i>error</i>. Ensuite, nous vérifions que le message d'erreur peut être trouvé dans ce composant.\nNotez que le <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors\">sélecteur de classe CSS</a> commence par un point, donc le sélecteur pour la classe <i>error</i> est <i>.error</i>.</p>\n<p>Nous pourrions faire la même chose en utilisant la syntaxe <a href=\"https://docs.cypress.io/api/commands/should.html\">should</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'login fails with wrong password'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\">  cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token string\">'contain'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wrong credentials'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Utiliser should est un peu plus délicat que d'utiliser <i>contains</i>, mais cela permet des tests plus divers que <i>contains</i>, qui fonctionne uniquement sur la base du contenu textuel.</p>\n<p>Une liste des assertions les plus courantes qui peuvent être utilisées avec <em>should</em> peut être trouvée <a href=\"https://docs.cypress.io/guides/references/assertions.html#Common-Assertions\">ici</a>.</p>\n<p>Nous pouvons, par exemple, nous assurer que le message d'erreur est rouge et qu'il a une bordure:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'login fails with wrong password'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token string\">'contain'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wrong credentials'</span><span class=\"token punctuation\">)</span> \n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token string\">'have.css'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'color'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rgb(255, 0, 0)'</span><span class=\"token punctuation\">)</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token string\">'have.css'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'border-style'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'solid'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Cypress exige que les couleurs soient données en <a href=\"https://rgbcolorcode.com/color/red\">rgb</a>.</p>\n<p>Puisque tous les tests concernent le même composant auquel nous avons accédé en utilisant <a href=\"https://docs.cypress.io/api/commands/get.html#Syntax\">cy.get</a>, nous pouvons les enchaîner en utilisant <a href=\"https://docs.cypress.io/api/commands/and.html\">and</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'login fails with wrong password'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.error'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token string\">'contain'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wrong credentials'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token string\">'have.css'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'color'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rgb(255, 0, 0)'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token string\">'have.css'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'border-style'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'solid'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Terminons le test de sorte qu'il vérifie également que l'application ne rend pas le message de succès <i>'Matti Luukkainen connecté'</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'login fails with wrong password'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'log in'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mluukkai'</span><span class=\"token punctuation\">)</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wrong'</span><span class=\"token punctuation\">)</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#login-button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.error'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token string\">'contain'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wrong credentials'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token string\">'have.css'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'color'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rgb(255, 0, 0)'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token string\">'have.css'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'border-style'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'solid'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token string\">'not.contain'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Matti Luukkainen logged in'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>La commande <i>should</i> est le plus souvent utilisée en la chaînant après la commande <i>get</i> (ou une autre commande similaire qui peut être enchaînée). Le <i>cy.get('html')</i> utilisé dans le test signifie pratiquement le contenu visible de toute l'application.</p>\n<p>Nous pourrions également vérifier la même chose en chaînant la commande <i>contains</i> avec la commande <i>should</i> avec un paramètre légèrement différent:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Matti Luukkainen logged in'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token string\">'not.exist'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>REMARQUE:</strong> Certaines propriétés CSS se <a href=\"https://github.com/cypress-io/cypress/issues/9349\">comportent différemment sur Firefox</a>. Si vous exécutez les tests avec Firefox:</p>\n<img src=\"https://user-images.githubusercontent.com/4255997/119015927-0bdff800-b9a2-11eb-9234-bb46d72c0368.png\" alt=\"running\">\n<p>alors les tests qui impliquent, par exemple, <code class=\"language-text\">border-style</code>, <code class=\"language-text\">border-radius</code> et <code class=\"language-text\">padding</code>, passeront dans Chrome ou Electron, mais échoueront dans Firefox :</p>\n<img src=\"https://user-images.githubusercontent.com/4255997/119016340-7b55e780-b9a2-11eb-82e0-bab0418244c0.png\" alt=\"borderstyle\">\n<h3>Contournement de l'UI</h3>\n<p>Actuellement, nous avons les tests suivants:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note app'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user can login'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'log in'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mluukkai'</span><span class=\"token punctuation\">)</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'salainen'</span><span class=\"token punctuation\">)</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#login-button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Matti Luukkainen logged in'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'login fails with wrong password'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'when logged in'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'log in'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input:first'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mluukkai'</span><span class=\"token punctuation\">)</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input:last'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'salainen'</span><span class=\"token punctuation\">)</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#login-button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a new note can be created'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ... </span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n   \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>D'abord, nous testons la connexion. Ensuite, dans leur propre bloc <i>describe</i>, nous avons un ensemble de tests, qui supposent que l'utilisateur est connecté. L'utilisateur est connecté dans le bloc <i>beforeEach</i>.</p>\n<p>Comme nous l'avons dit ci-dessus, chaque test commence à zéro! Les tests ne commencent pas à partir de l'état où les tests précédents se sont terminés.</p>\n<p>La documentation de Cypress nous donne le conseil suivant: <a href=\"https://docs.cypress.io/guides/end-to-end-testing/testing-your-app#Fully-test-the-login-flow-but-only-once\">Tester complètement le flux de connexion – mais une seule fois</a>.\nDonc, au lieu de connecter un utilisateur en utilisant le formulaire dans le bloc <i>beforeEach</i>, Cypress recommande de <a href=\"https://docs.cypress.io/guides/getting-started/testing-your-app.html#Bypassing-your-UI\">contourner l'UI</a> et de faire une requête HTTP au backend pour se connecter. La raison en est que se connecter avec une requête HTTP est beaucoup plus rapide que de remplir un formulaire.</p>\n<p>Notre situation est un peu plus compliquée que dans l'exemple de la documentation de Cypress car, lorsqu'un utilisateur se connecte, notre application sauvegarde ses détails dans le localStorage.\nCependant, Cypress peut également gérer cela.\nLe code est le suivant</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'when logged in'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    cy<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://localhost:3001/api/login'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'mluukkai'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'salainen'</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loggedNoteappUser'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:5173'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a new note can be created'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Nous pouvons accéder à la réponse d'une <a href=\"https://docs.cypress.io/api/commands/request.html\">cy.request</a> avec la méthode <em>then</em>. Sous le capot, <i>cy.request</i>, comme toutes les commandes Cypress, sont des <a href=\"https://docs.cypress.io/guides/core-concepts/introduction-to-cypress.html#Commands-Are-Promises\">promesses</a>.\nLa fonction de rappel sauvegarde les détails d'un utilisateur connecté dans le localStorage, et recharge la page.\nMaintenant, il n'y a aucune différence avec un utilisateur se connectant avec le formulaire de connexion.</p>\n<p>Si et lorsque nous écrivons de nouveaux tests pour notre application, nous devons utiliser le code de connexion à plusieurs endroits.\nNous devrions en faire une <a href=\"https://docs.cypress.io/api/cypress-api/custom-commands.html\">commande personnalisée</a>.</p>\n<p>Les commandes personnalisées sont déclarées dans <i>cypress/support/commands.js</i>.\nLe code pour se connecter est le suivant:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Cypress<span class=\"token punctuation\">.</span>Commands<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'login'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://localhost:3001/api/login'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    username<span class=\"token punctuation\">,</span> password\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> body <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loggedNoteappUser'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:5173'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Utiliser notre commande personnalisée est facile, et notre test devient plus clair:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'when logged in'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    cy<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'mluukkai'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'salainen'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a new note can be created'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>La même chose s'applique à la création d'une nouvelle note maintenant que nous y pensons. Nous avons un test qui crée une nouvelle note en utilisant le formulaire. Nous créons également une nouvelle note dans le bloc <i>beforeEach</i> du test testant le changement de l'importance d'une note:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note app'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'when logged in'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a new note can be created'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new note'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a note created by cypress'</span><span class=\"token punctuation\">)</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'save'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a note created by cypress'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'and a note exists'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new note'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'another note cypress'</span><span class=\"token punctuation\">)</span>\n        cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'save'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'it can be made important'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Créons une nouvelle commande personnalisée pour créer une nouvelle note. La commande créera une nouvelle note avec une requête HTTP POST:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Cypress<span class=\"token punctuation\">.</span>Commands<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'createNote'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> content<span class=\"token punctuation\">,</span> important <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:3001/api/notes'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> content<span class=\"token punctuation\">,</span> important <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string-property property\">'Authorization'</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loggedNoteappUser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>token<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:5173'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>La commande suppose que l'utilisateur est connecté et que les détails de l'utilisateur sont sauvegardés dans le localStorage.</p>\n<p>Maintenant, le bloc de formatage devient:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note app'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'when logged in'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a new note can be created'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'and a note exists'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">        cy<span class=\"token punctuation\">.</span><span class=\"token function\">createNote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'another note cypress'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token literal-property property\">important</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'it can be made important'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Il y a encore une caractéristique ennuyeuse dans nos tests. L'adresse de l'application <i><a href=\"http://localhost:5173\">http://localhost:5173</a></i> est codée en dur à de nombreux endroits.</p>\n<p>Définissons l'<i>baseUrl</i> pour l'application dans le <a href=\"https://docs.cypress.io/guides/references/configuration\">fichier de configuration</a> pré-généré par Cypress <i>cypress.config.js</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> defineConfig <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cypress\"</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">e2e</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setupNodeEvents</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">on<span class=\"token punctuation\">,</span> config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token literal-property property\">baseUrl</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:5173'</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Toutes les commandes dans les tests utilisent l'adresse de l'application</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:5173'</span> <span class=\"token punctuation\">)</span></code></pre></div>\n<p>peuvent être transformées en</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>L'adresse codée en dur du backend <i><a href=\"http://localhost:3001\">http://localhost:3001</a></i> est encore dans les tests. La <a href=\"https://docs.cypress.io/guides/guides/environment-variables\">documentation</a> de Cypress recommande de définir les autres adresses utilisées par les tests comme variables d'environnement.</p>\n<p>Étendons le fichier de configuration <i>cypress.config.js</i> comme suit:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> defineConfig <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cypress\"</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">e2e</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setupNodeEvents</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">on<span class=\"token punctuation\">,</span> config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">baseUrl</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:5173'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">env</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token constant\">BACKEND</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:3001/api'</span></span>    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Remplaçons toutes les adresses du backend dans les tests de la manière suivante</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note '</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"gatsby-highlight-code-line\">    cy<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Cypress<span class=\"token punctuation\">.</span><span class=\"token function\">env</span><span class=\"token punctuation\">(</span><span class=\"token string\">'BACKEND'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/testing/reset</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></span>    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Matti Luukkainen'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'mluukkai'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'secret'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">    cy<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Cypress<span class=\"token punctuation\">.</span><span class=\"token function\">env</span><span class=\"token punctuation\">(</span><span class=\"token string\">'BACKEND'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/users</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span></span>    cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Les tests et le code frontend peuvent être trouvés sur la branche <a href=\"https://github.com/fullstack-hy2020/part2-notes-frontend/tree/part5-10\">GitHub</a> <i>part5-10</i>.</p>\n<h3>Changer l'importance d'une note</h3>\n<p>Enfin, examinons le test que nous avons réalisé pour changer l'importance d'une note.\nD'abord, nous allons changer le bloc de formatage pour qu'il crée trois notes au lieu d'une:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'when logged in'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'and several notes exist'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      cy<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'mluukkai'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'salainen'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      cy<span class=\"token punctuation\">.</span><span class=\"token function\">createNote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'first note'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">important</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      cy<span class=\"token punctuation\">.</span><span class=\"token function\">createNote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'second note'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">important</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      cy<span class=\"token punctuation\">.</span><span class=\"token function\">createNote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'third note'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">important</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'one of those can be made important'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second note'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'make important'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n      cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second note'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'make not important'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Comment la commande <a href=\"https://docs.cypress.io/api/commands/contains.html\">cy.contains</a> fonctionne-t-elle réellement ?</p>\n<p>Lorsque nous cliquons sur la commande <em>cy.contains('second note')</em> dans le <a href=\"https://docs.cypress.io/guides/core-concepts/test-runner.html\">Test Runner</a> de Cypress, nous voyons que la commande recherche l'élément contenant le texte <i>second note</i>:</p>\n<picture><img src=\"/static/8f8d746fe31f58ba1febb884c5d90503/5a190/34new.png\" alt=\"cypress test runner cliquant sur testbody et second note\" srcset=\"/static/8f8d746fe31f58ba1febb884c5d90503/772e8/34new.png 200w,\n/static/8f8d746fe31f58ba1febb884c5d90503/e17e5/34new.png 400w,\n/static/8f8d746fe31f58ba1febb884c5d90503/5a190/34new.png 800w,\n/static/8f8d746fe31f58ba1febb884c5d90503/c1b63/34new.png 1200w,\n/static/8f8d746fe31f58ba1febb884c5d90503/29007/34new.png 1600w,\n/static/8f8d746fe31f58ba1febb884c5d90503/f5aa5/34new.png 2312w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>En cliquant sur la ligne suivante <em>.contains('make important')</em>, nous voyons que le test utilise le bouton 'make important' correspondant à la <i>second note</i>:</p>\n<picture><img src=\"/static/734fc950760be1621653c38bca57fcb9/5a190/35new.png\" alt=\"cypress test runner cliquant sur make important\" srcset=\"/static/734fc950760be1621653c38bca57fcb9/772e8/35new.png 200w,\n/static/734fc950760be1621653c38bca57fcb9/e17e5/35new.png 400w,\n/static/734fc950760be1621653c38bca57fcb9/5a190/35new.png 800w,\n/static/734fc950760be1621653c38bca57fcb9/c1b63/35new.png 1200w,\n/static/734fc950760be1621653c38bca57fcb9/29007/35new.png 1600w,\n/static/734fc950760be1621653c38bca57fcb9/ade5e/35new.png 2188w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Lorsqu'elles sont enchaînées, la seconde commande <i>contains</i> <i>continue</i> la recherche à partir du composant trouvé par la première commande.</p>\n<p>Si nous n'avions pas enchaîné les commandes, et avions écrit à la place:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second note'</span><span class=\"token punctuation\">)</span>\ncy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'make important'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>le résultat aurait été totalement différent. La seconde ligne du test aurait cliqué sur le bouton d'une mauvaise note:</p>\n<picture><img src=\"/static/7060fa2a17435847d72e7b32fea09f56/5a190/36new.png\" alt=\"cypress montrant une erreur et essayant incorrectement de cliquer sur le premier bouton\" srcset=\"/static/7060fa2a17435847d72e7b32fea09f56/772e8/36new.png 200w,\n/static/7060fa2a17435847d72e7b32fea09f56/e17e5/36new.png 400w,\n/static/7060fa2a17435847d72e7b32fea09f56/5a190/36new.png 800w,\n/static/7060fa2a17435847d72e7b32fea09f56/c1b63/36new.png 1200w,\n/static/7060fa2a17435847d72e7b32fea09f56/29007/36new.png 1600w,\n/static/7060fa2a17435847d72e7b32fea09f56/1a867/36new.png 1998w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Lors de l'écriture des tests, vous devriez vérifier dans le test runner que les tests utilisent les bons composants!</p>\n<p>Changeons le composant <em>Note</em> pour que le texte de la note soit rendu dans un <i>span</i>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Note</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> note<span class=\"token punctuation\">,</span> toggleImportance <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> label <span class=\"token operator\">=</span> note<span class=\"token punctuation\">.</span>important\n    <span class=\"token operator\">?</span> <span class=\"token string\">'make not important'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'make important'</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>li className<span class=\"token operator\">=</span><span class=\"token string\">'note'</span><span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span></span>      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleImportance<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nos tests échouent ! Comme le révèle le test runner, <em>cy.contains('second note')</em> retourne maintenant le composant contenant le texte, et le bouton n'y est pas.</p>\n<picture><img src=\"/static/9157ea8148a3eb0a438516c22ecd8f27/5a190/37new.png\" alt=\"cypress montrant que le test est cassé en essayant de cliquer sur rendre important\" srcset=\"/static/9157ea8148a3eb0a438516c22ecd8f27/772e8/37new.png 200w,\n/static/9157ea8148a3eb0a438516c22ecd8f27/e17e5/37new.png 400w,\n/static/9157ea8148a3eb0a438516c22ecd8f27/5a190/37new.png 800w,\n/static/9157ea8148a3eb0a438516c22ecd8f27/c1b63/37new.png 1200w,\n/static/9157ea8148a3eb0a438516c22ecd8f27/29007/37new.png 1600w,\n/static/9157ea8148a3eb0a438516c22ecd8f27/3c2d4/37new.png 2092w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Une façon de corriger cela est la suivante:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'one of those can be made important'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second note'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second note'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token string\">'contain'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'make not important'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Dans la première ligne, nous utilisons la commande <a href=\"https://docs.cypress.io/api/commands/parent.html\">parent</a> pour accéder à l'élément parent de l'élément contenant <i>second note</i> et trouver le bouton à l'intérieur de celui-ci.\nEnsuite, nous cliquons sur le bouton et vérifions que le texte dessus change.</p>\n<p>Notez que nous utilisons la commande <a href=\"https://docs.cypress.io/api/commands/find.html#Syntax\">find</a> pour rechercher le bouton. Nous ne pouvons pas utiliser <a href=\"https://docs.cypress.io/api/commands/get.html\">cy.get</a> ici, car cela recherche toujours dans la <i>totalité</i> de la page et retournerait les 5 boutons sur la page.</p>\n<p>Malheureusement, nous avons maintenant un peu de copier-coller dans les tests, car le code pour rechercher le bon bouton est toujours le même.</p>\n<p>Dans ce genre de situations, il est possible d'utiliser la commande <a href=\"https://docs.cypress.io/api/commands/as.html\">as</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'one of those can be made important'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second note'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">as</span><span class=\"token punctuation\">(</span><span class=\"token string\">'theButton'</span><span class=\"token punctuation\">)</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@theButton'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@theButton'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token string\">'contain'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'make not important'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Maintenant, la première ligne trouve le bon bouton et utilise <i>as</i> pour le sauvegarder sous le nom <i>theButton</i>. Les lignes suivantes peuvent utiliser l'élément nommé avec <i>cy.get('@theButton')</i>.</p>\n<h3>Exécution et débogage des tests</h3>\n<p>Enfin, quelques notes sur le fonctionnement de Cypress et le débogage de vos tests.</p>\n<p>La forme des tests Cypress donne l'impression que les tests sont du code JavaScript normal, et nous pourrions par exemple essayer ceci:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'log in'</span><span class=\"token punctuation\">)</span>\nbutton<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">debugger</span>\ncy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'logout'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Cela ne fonctionnera cependant pas. Lorsque Cypress exécute un test, il ajoute chaque commande <em>cy</em> à une file d'exécution.\nQuand le code de la méthode de test a été exécuté, Cypress exécutera chaque commande dans la file une par une.</p>\n<p>Les commandes Cypress retournent toujours <em>undefined</em>, donc <em>button.click()</em> dans le code ci-dessus provoquerait une erreur. Une tentative de démarrer le débogueur ne stopperait pas le code entre l'exécution des commandes, mais avant que toute commande ait été exécutée.</p>\n<p>Les commandes Cypress sont <i>comme des promesses</i>, donc si nous voulons accéder à leurs valeurs de retour, nous devons le faire en utilisant la commande <a href=\"https://docs.cypress.io/api/commands/then.html\">then</a>.\nPar exemple, le test suivant imprimerait le nombre de boutons dans l'application et cliquerait sur le premier bouton:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'then example'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">buttons</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'number of buttons'</span><span class=\"token punctuation\">,</span> buttons<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>buttons<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Arrêter l'exécution du test avec le débogueur est <a href=\"https://docs.cypress.io/api/commands/debug.html\">possible</a>. Le débogueur se lance uniquement si la console de développement du test runner de Cypress est ouverte.</p>\n<p>La console de développement est très utile pour déboguer vos tests.\nVous pouvez voir les requêtes HTTP effectuées par les tests dans l'onglet Réseau, et l'onglet Console vous montrera des informations sur vos tests:</p>\n<picture><img src=\"/static/f9f4282b95ffa69cf93044367f022c9f/5a190/38new.png\" alt=\"console de développement lors de l&#x27;exécution de cypress\" srcset=\"/static/f9f4282b95ffa69cf93044367f022c9f/772e8/38new.png 200w,\n/static/f9f4282b95ffa69cf93044367f022c9f/e17e5/38new.png 400w,\n/static/f9f4282b95ffa69cf93044367f022c9f/5a190/38new.png 800w,\n/static/f9f4282b95ffa69cf93044367f022c9f/c1b63/38new.png 1200w,\n/static/f9f4282b95ffa69cf93044367f022c9f/29007/38new.png 1600w,\n/static/f9f4282b95ffa69cf93044367f022c9f/a2ef2/38new.png 1970w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Jusqu'à présent, nous avons exécuté nos tests Cypress en utilisant le test runner graphique.\nIl est également possible de les exécuter <a href=\"https://docs.cypress.io/guides/guides/command-line.html\">depuis la ligne de commande</a>. Il suffit d'ajouter un script npm pour cela:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts start\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts test\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"eject\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts eject\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"server\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"json-server -p3001 --watch db.json\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"cypress:open\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cypress open\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string-property property\">\"test:e2e\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cypress run\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>Maintenant, nous pouvons exécuter nos tests depuis la ligne de commande avec la commande <i>npm run test:e2e</i></p>\n<picture><img src=\"/static/2f7e3623f4f82bf5a6e5dafa31957c17/5a190/39new.png\" alt=\"sortie terminal de l&#x27;exécution des tests npm e2e montrant réussi\" srcset=\"/static/2f7e3623f4f82bf5a6e5dafa31957c17/772e8/39new.png 200w,\n/static/2f7e3623f4f82bf5a6e5dafa31957c17/e17e5/39new.png 400w,\n/static/2f7e3623f4f82bf5a6e5dafa31957c17/5a190/39new.png 800w,\n/static/2f7e3623f4f82bf5a6e5dafa31957c17/c1b63/39new.png 1200w,\n/static/2f7e3623f4f82bf5a6e5dafa31957c17/a8c87/39new.png 1538w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Notez que des vidéos de l'exécution des tests seront sauvegardées dans <i>cypress/videos/</i>, vous devriez donc probablement ignorer ce répertoire avec git. Il est également possible de <a href=\"https://docs.cypress.io/guides/guides/screenshots-and-videos#Videos\">désactiver</a> la création de vidéos.</p>\n<p>Le frontend et le code de test peuvent être trouvés sur la branche <a href=\"https://github.com/fullstack-hy2020/part2-notes-frontend/tree/part5-11\">GitHub</a> <i>part5-11</i>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercices 5.17.-5.23.</h3>\n<p>Dans les derniers exercices de cette partie, nous allons réaliser quelques tests E2E pour notre application de blogs.\nLe matériel de cette partie devrait être suffisant pour compléter les exercices.\nVous <strong>devez consulter la <a href=\"https://docs.cypress.io/guides/overview/why-cypress.html#In-a-nutshell\">documentation</a> de Cypress</strong>. C'est probablement la meilleure documentation que j'ai jamais vue pour un projet open source.</p>\n<p>Je recommande particulièrement de lire <a href=\"https://docs.cypress.io/guides/core-concepts/introduction-to-cypress.html#Cypress-Can-Be-Simple-Sometimes\">Introduction à Cypress</a>, qui déclare</p>\n<blockquote>\n<p><i>Ceci est le guide le plus important pour comprendre comment tester avec Cypress. Lisez-le. Comprenez-le.</i></p>\n</blockquote>\n<h4>5.17: tests de bout en bout de la liste des blogs, étape 1</h4>\n<p>Configurez Cypress pour votre projet. Réalisez un test pour vérifier que l'application affiche par défaut le formulaire de connexion.</p>\n<p>La structure du test doit être la suivante:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Blog app'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://localhost:3003/api/testing/reset'</span><span class=\"token punctuation\">)</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:5173'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Login form is shown'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Le bloc de formatage <i>beforeEach</i> doit vider la base de données en utilisant par exemple la méthode que nous avons utilisée dans le <a href=\"/en/part5/end_to_end_testing#controlling-the-state-of-the-database\">matériel</a>.</p>\n<h4>5.18: tests de bout en bout de la liste des blogs, étape 2</h4>\n<p>Réalisez des tests pour la connexion. Testez à la fois les tentatives de connexion réussies et échouées.\nCréez un nouvel utilisateur dans le bloc <i>beforeEach</i> pour les tests.</p>\n<p>La structure du test s'étend comme suit:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Blog app'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://localhost:3001/api/testing/reset'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// create here a user to backend</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:5173'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Login form is shown'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Login'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'succeeds with correct credentials'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fails with wrong credentials'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><i>Exercice bonus facultatif</i>: Vérifiez que la notification affichée lors d'une connexion infructueuse est affichée en rouge.</p>\n<h4>5.19: tests de bout en bout de la liste des blogs, étape 3</h4>\n<p>Réalisez un test qui vérifie qu'un utilisateur connecté peut créer un nouveau blog.\nLa structure du test pourrait être la suivante:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Blog app'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'When logged in'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// log in user here</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A blog can be created'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Le test doit s'assurer qu'un nouveau blog est ajouté à la liste de tous les blogs.</p>\n<h4>5.20: tests de bout en bout de la liste des blogs, étape 4</h4>\n<p>Réalisez un test qui confirme que les utilisateurs peuvent aimer un blog.</p>\n<h4>5.21: tests de bout en bout de la liste des blogs, étape 5</h4>\n<p>Réalisez un test pour s'assurer que l'utilisateur qui a créé un blog peut le supprimer.</p>\n<h4>5.22: tests de bout en bout de la liste des blogs, étape 6</h4>\n<p>Réalisez un test pour s'assurer que seul le créateur peut voir le bouton de suppression d'un blog, et pas les autres.</p>\n<h4>5.23: tests de bout en bout de la liste des blogs, étape 7</h4>\n<p>Réalisez un test qui vérifie que les blogs sont ordonnés selon les likes, avec le blog ayant le plus de likes en premier.</p>\n<p><i>Cet exercice est un peu plus compliqué que les précédents.</i> Une solution est d'ajouter une certaine classe pour l'élément qui enveloppe le contenu du blog et d'utiliser la méthode <a href=\"https://docs.cypress.io/api/commands/eq#Syntax\">eq</a> pour obtenir l'élément du blog à un index spécifique:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.blog'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token string\">'contain'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'The title with the most likes'</span><span class=\"token punctuation\">)</span>\ncy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.blog'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token string\">'contain'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'The title with the second most likes'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Notez que vous pourriez rencontrer des problèmes si vous cliquez plusieurs fois de suite sur un bouton de like. Il se peut que Cypress clique si rapidement qu'il n'ait pas le temps de mettre à jour l'état de l'application entre les clics. Un remède à cela est d'attendre que le nombre de likes se mette à jour entre tous les clics.</p>\n<p>C'était le dernier exercice de cette partie, et il est temps de pousser votre code sur GitHub et de marquer les exercices que vous avez complétés dans le <a href=\"https://studies.cs.helsinki.fi/stats/courses/fullstackopen\">système de soumission des exercices</a>.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/b92f84fe9702a35b12f10af4588ba4c2/part-5.svg"},"part":5,"letter":"d","lang":"fr"}}},"pageContext":{"part":5,"letter":"d","lang":"fr"}},"staticQueryHashes":["3128451518"]}